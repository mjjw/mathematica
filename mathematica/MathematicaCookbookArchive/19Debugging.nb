(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    361503,       9434]
NotebookOptionsPosition[    334990,       8722]
NotebookOutlinePosition[    345931,       8958]
CellTagsIndexPosition[    344971,       8933]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "CHAPTER ",
 
 CounterBox["ChapterLabel"]
}], "ChapterLabel",
 CounterAssignments->{{"ChapterLabel", 19}},
 CellTags->"chDebug"],

Cell["Debugging and Testing", "ChapterTitle"],

Cell["\<\
Trying hard to speak and
Fighting with my weak hand
Driven to distraction
So part of the plan
When something is broken
And you try to fix it
Trying to repair it
Any way you can
I\[CloseCurlyQuote]m diving off the deep end
You become my best friend
I wanna love you
But I don\[CloseCurlyQuote]t know if I can
I know something is broken
And I\[CloseCurlyQuote]m trying to fix it
Trying to repair it
Any way I can\
\>", "Epigraph"],

Cell["Coldplay, \[OpenCurlyDoubleQuote]X&Y\[CloseCurlyDoubleQuote]", \
"EpigraphAuthor",
 CellChangeTimes->{{3.4729095197204323`*^9, 3.472909545945447*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Introduction"
}], "Heading1"],

Cell[TextData[{
 "Debugging and testing are not as romantic as solving a difficult partial \
differential equation, creating a breathtaking plot, or achieving a \
compelling interactive demonstration of a complicated mathematical concept. \
But, to loosely paraphrase Edison, Mathematica creation is often 10% coding \
and 90% debugging and testing. ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSize->10.199996948242188`],
 "s interactive development paradigm encourages incremental development, so \
often you proceed to solve a complex problem by writing little pieces, trying \
them, tweaking them, and repeating. In time, you will find yourself with \
quite a bit of code. Then, quite satisfied with yourself, you begin to feed \
your code real-world data and\[LongDash]bam!\[LongDash]something goes awry. \
Now what? Recipes ",
 ButtonBox["19.1",
  BaseStyle->"Hyperlink",
  ButtonData->"Printing as the First Recourse to Debugging"],
 " through ",
 ButtonBox["19.6",
  BaseStyle->"Hyperlink",
  ButtonData->"Evaluation and Step Monitors"],
 " demonstrate various debugging techniques that you can use from within the \
traditional Mathematica frontend. Recipe ",
 ButtonBox["19.7",
  BaseStyle->"Hyperlink",
  ButtonData->"Visual Debugging with Wolfram Workbench"],
 " shows you how to use the powerful symbolic debugger provide by Wolfram \
Workbench."
}], "Text",
 CellChangeTimes->{{3.47291063632681*^9, 3.472910682034556*^9}, {
   3.4729107333859797`*^9, 3.472910791240479*^9}, 3.472910844445343*^9, {
   3.472999001451544*^9, 3.472999027205803*^9}, {3.472999491282585*^9, 
   3.472999492011639*^9}, {3.4742853632973824`*^9, 3.4742853677667103`*^9}, {
   3.474388963885371*^9, 3.474388966846121*^9}}],

Cell[TextData[{
 "Debugging skills are essential, but here frustration can begin to creep in. \
Mathematica code can often be difficult to debug, and if \
you\[CloseCurlyQuote]ve wri",
 StyleBox["tten a lot of it in a haphazard",
  FontTracking->"SemiCondensed"],
 " fashion, you might have your work cut out for you. There are two \
complementary techniques for maintaining your sanity ",
 StyleBox["when working with Mathematica on large pro",
  FontTracking->"Extended"],
 "jects. The first is knowing how to isolate the problem through debugging \
techniques, and the second is not getting into the problem in the first \
place. Clearly, the second is preferable, but how is it achieved? As \
convenient as interactive development inside a notebook can be, it is often a \
trap. How tho",
 StyleBox["roughly can you test a com",
  FontTracking->"SemiCondensed"],
 "plex function by feeding it a few values? Not very thoroughly. The solution \
is to write repeatable unit tests. Why is that better? Fir",
 StyleBox["st, test-drive development (part of",
  FontTracking->"Extended"],
 " what software developers call an agile ",
 StyleBox["development methodology) encourages break",
  FontTracking->"Extended"],
 "ing problems into small, easily testable pieces. In its purest form, \
developers are encouraged to actually write the test before the code! Having \
a test suite acts as documentation for the use cases of your function a",
 StyleBox["nd is a godsend if you decide to en",
  FontTracking->"Extended"],
 "hance your implementation, because you can quickly see if you have broken \
existing functionality. Recipes ",
 ButtonBox["19.8",
  BaseStyle->"Hyperlink",
  ButtonData->"Writing Unit Tests"],
 " through ",
 ButtonBox["19.10",
  BaseStyle->"Hyperlink",
  ButtonData->"Organizing and Controlling Test Suites"],
 " show how to develop unit tests within Wolfram Workbench. Recipe ",
 ButtonBox["19.11",
  BaseStyle->"Hyperlink",
  ButtonData->"MUnit in Front-End"],
 " shows how to adapt the underlying ",
 StyleBox["MUnit", "Literal"],
 " framework that is integrated with Wolfram Workbench for use in the \
frontend."
}], "Text",
 CellChangeTimes->{{3.472910865522434*^9, 3.472911064975748*^9}, {
   3.4730002574885807`*^9, 3.4730002952461243`*^9}, {3.473001855274336*^9, 
   3.473001891631041*^9}, {3.474286040496756*^9, 3.474286083324337*^9}, 
   3.474286302164146*^9, 3.476464263346799*^9}],

Cell["\<\
This chapter\[CloseCurlyQuote]s workhorse function for illustrating debugging \
techniques is the Ackermann function. This infamous function has a simple \
recursive definition, but its pathological behavior makes it convenient for \
illustrating various real-world debugging problems (like stack overflows). \
\>", "Text",
 CellChangeTimes->{{3.472911097527714*^9, 3.472911118868084*^9}}],

Cell["\<\
A[0,n_] := n+1
A[m_,0] := A[m - 1, 1]
A[m_, n_] := A[m - 1, A[m, n - 1]]\
\>", "Code",
 CellFrame->True,
 CellMargins->{{0, 0}, {2, 4}},
 CellFrameMargins->{{53, 8}, {8, 8}}],

Cell["Ackermann function", "Figure Title",
 CellChangeTimes->{3.474287010825379*^9}],

Cell[TextData[{
 "The Mathematica frontend has a debugger built into the Evaluation menu. I \
do not discuss this debugger in this chapter. I left it out for several \
reasons. The main reason is that I never use it, and when I have attempted to \
use it, I have found the experience quite unsatisfying. My impression is \
that, at best, the frontend integrated debugger is a work in progress. See ",
 StyleBox["ref/menuitem/DebuggerControls", "URL",
  FontFamily->"Birka Italic",
  FontSize->9],
 " for description of the debugger. "
}], "NoteWarning",
 CellChangeTimes->{{3.4729111394125843`*^9, 3.472911200403638*^9}, {
  3.4729121496976967`*^9, 3.472912155023794*^9}, {3.474287022316889*^9, 
  3.474287023833337*^9}}]
}, Open  ]],

Cell["", "NoteWarningEnd",
 CellChangeTimes->{3.472912168208851*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Printing as the First Recourse to Debugging"
}], "Heading1", "TopOfPage",
 CellTags->"Printing as the First Recourse to Debugging"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["\<\
You can\[CloseCurlyQuote]t understand why you are getting a particular result \
but suspect it is due to a false assumption or bug in an intermediate \
calculation whose value is not visible.\
\>", "Text",
 CellChangeTimes->{{3.472911868543071*^9, 3.4729118699748173`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Injecting a strategically placed ",
 StyleBox["Print", "Literal"],
 " statement can often be the quickest path to",
 " ",
 "debugging a small piece of code. Suppose you forgot or did not know \
Mathematica\[CloseCurlyQuote]s convention for choosing branches in the ",
 StyleBox["Power[x,y]", "Literal"],
 " function (it prefers the principal value of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"y", " ", "log", " ", 
     RowBox[{"(", "x", ")"}]}]], TraditionalForm]], "InlineMath"],
 ")."
}], "Text",
 CellChangeTimes->{{3.4729118984923553`*^9, 3.4729118996327887`*^9}, {
   3.473001948773631*^9, 3.473001951080585*^9}, 3.4855297327680893`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"-", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"y", " ", "=", " ", 
   RowBox[{"Power", "[", 
    RowBox[{"x", ",", 
     RowBox[{"1", "/", "3"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", " ", 
  RowBox[{
   RowBox[{"y", "\[Equal]", " ", 
    RowBox[{"-", "1"}]}], ",", " ", "\"\<expected\>\"", ",", " ", 
   "\"\<not expected\>\""}], "]"}]}], "Input",
 CellLabel->"In[1]:="],

Cell[BoxData["\<\"not expected\"\>"], "Output",
 CellLabel->"Out[3]="]
}, Open  ]],

Cell[TextData[{
 "Here is the same code with a ",
 StyleBox["Print", "Literal"],
 " inserted so the value of ",
 StyleBox["y",
  FontSlant->"Italic"],
 " can be inspected. You will often want to force numerical conversion using ",
 StyleBox["N[]", "Literal"],
 " when inserting ",
 StyleBox["Print", "Literal"],
 "; otherwise you would get the symbolic value (in this case ",
 StyleBox["-1^(1/3)", "Literal"],
 "), which is quite unhelpful."
}], "Text",
 CellChangeTimes->{{3.4729119481853247`*^9, 3.472911989386868*^9}, 
   3.474287123999485*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"-", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"y", " ", "=", " ", 
   RowBox[{"Power", "[", 
    RowBox[{"x", ",", 
     RowBox[{"1", "/", "3"}]}], "]"}]}], ";", 
  StyleBox[
   RowBox[{"Print", "[", 
    RowBox[{"N", "[", "y", "]"}], "]"}], "CodeEmphasis"], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", " ", 
  RowBox[{
   RowBox[{"y", "\[Equal]", " ", 
    RowBox[{"-", "1"}]}], ",", " ", "\"\<expected\>\"", ",", " ", 
   "\"\<not expected\>\""}], "]"}]}], "Input",
 CellLabel->"In[4]:="],

Cell[BoxData[
 RowBox[{"0.5000000000000001`", "\[InvisibleSpace]", "+", 
  RowBox[{"0.8660254037844386`", " ", "\[ImaginaryI]"}]}]], "Print",
 CellLabel->"During evaluation of In[4]:="],

Cell[BoxData["\<\"not expected\"\>"], "Output",
 CellLabel->"Out[6]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "Anyone who has spent even a day programming has come across this obvious \
debugging technique, so it may seem hardly worth a whole recipe, but please \
read on. Sometimes, injecting ",
 StyleBox["Print", "Literal"],
 " into code is very inconvenient, especially if you code in tight function \
style with few intermediate values appearing in variables. The problem is \
that you can\[CloseCurlyQuote]t inject ",
 StyleBox["Print", "Literal"],
 " into functional code because ",
 StyleBox["Print", "Literal"],
 " does not return a value. Consider if the code for the value ",
 StyleBox["y",
  FontSlant->"Italic"],
 " did not exist because it was in-lined."
}], "Text",
 CellChangeTimes->{{3.472912562421397*^9, 3.472912600844041*^9}, {
  3.474287144918869*^9, 3.4742871494342747`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"-", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"Power", "[", 
     RowBox[{"x", ",", 
      RowBox[{"1", "/", "3"}]}], "]"}], "\[Equal]", " ", 
    RowBox[{"-", "1"}]}], ",", " ", "\"\<expected\>\"", ",", " ", 
   "\"\<not expected\>\""}], "]"}]}], "Input",
 CellLabel->"In[7]:="],

Cell[BoxData["\<\"not expected\"\>"], "Output",
 CellLabel->"Out[8]="]
}, Open  ]],

Cell[TextData[{
 "You can\[CloseCurlyQuote]t wrap the call to ",
 StyleBox["Power", "Literal"],
 " in a ",
 StyleBox["Print", "Literal"],
 " because it would change the behavior of the expression, which is not what \
you want to do when you are already contending with bugs. For these \
situations, it is handy to whip up a functional version of ",
 StyleBox["Print", "Literal"],
 ", which I call ",
 StyleBox["fPrint", "Literal"],
 ". This saves you the trouble of introducing temporary variables for \
purposes of debugging, thus leaving less mess to clean up after you have \
diagnosed the problem."
}], "Text",
 CellChangeTimes->{{3.472912634788126*^9, 3.4729126711741867`*^9}, {
  3.472912713380273*^9, 3.47291272670436*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"fPrint", "[", "x__", "]"}], " ", ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Print", "[", "x", "]"}], ";", "x"}], ")"}]}], "\n", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"-", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"fPrint", "[", 
     RowBox[{"N", "[", 
      RowBox[{"Power", "[", 
       RowBox[{"x", ",", 
        RowBox[{"1", "/", "3"}]}], "]"}], "]"}], "]"}], "\[Equal]", " ", 
    RowBox[{"-", "1"}]}], ",", " ", "\"\<expected\>\"", ",", " ", 
   "\"\<not expected\>\""}], "]"}]}], "Input",
 CellLabel->"In[9]:="],

Cell[BoxData[
 RowBox[{"0.5000000000000001`", "\[InvisibleSpace]", "+", 
  RowBox[{"0.8660254037844386`", " ", "\[ImaginaryI]"}]}]], "Print",
 CellLabel->"During evaluation of In[9]:="],

Cell[BoxData["\<\"not expected\"\>"], "Output",
 CellLabel->"Out[11]="]
}, Open  ]],

Cell[TextData[{
 "A possible problem that can lead to lost or gray hairs when debugging with ",
 StyleBox["Print", "Literal"],
 " is when it seems to print nothing. This can take you down the road to hell \
by misleading you into thinking your code must be taking a different branch. \
For example, it is easy to miss the empty print cell created by executing \
this code."
}], "Text",
 CellChangeTimes->{{3.472912746251617*^9, 3.472912746608189*^9}, {
  3.474287173339471*^9, 3.4742871750592546`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", " ", "=", " ", 
   RowBox[{"Sequence", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "x", "]"}]}], "Input",
 CellLabel->"In[12]:="],

Cell[BoxData["\<\"\"\>"], "Print",
 CellLabel->"During evaluation of In[12]:="]
}, Open  ]],

Cell[TextData[{
 "This is not as contrived as it may seem: there are bugs that arise from \
failure to consider the fact that a sequence might be null, for example, when \
you use ",
 StyleBox["Apply", "Literal"],
 " (",
 StyleBox["@@", "Literal"],
 ") on an empty list."
}], "Text",
 CellChangeTimes->{{3.472912759965671*^9, 3.472912785177247*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"myFunctionThatIsBrokenForEmptySeq", "[", "x___", "]"}], " ", ":=", 
  " ", 
  RowBox[{"Total", "[", "x", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"myFunctionThatIsBrokenForEmptySeq", " ", "@@", " ", 
     RowBox[{"{", "}"}]}], " ", "\[Equal]", " ", "0"}], ",", " ", 
   "\"\<zero\>\"", ",", "\"\<not zero\>\"", ",", " ", 
   "\"\<something completely different\>\""}], "]"}]}], "Input",
 CellChangeTimes->{3.4729128199302683`*^9},
 CellLabel->"In[14]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"Total", "::", "\<\"argt\"\>"}], ":", 
  " ", "\<\"\[NoBreak]\\!\\(\\*StyleBox[\\!\\(Total\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" called with \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(0\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" arguments; \
\\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(1\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" or \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(2\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" arguments are \
expected.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/argt\\\", ButtonNote -> \
\\\"Total::argt\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[14]:="],

Cell[BoxData["\"\<something completely different\>\""], "Output", "Input",
 CellChangeTimes->{{3.472912792720059*^9, 3.4729128039174633`*^9}},
 CellLabel->"Out[15]="]
}, Open  ]],

Cell[TextData[{
 "Here an error was generated, and the output was \
\[OpenCurlyDoubleQuote]something completely different\[CloseCurlyDoubleQuote] \
because the expression in the ",
 StyleBox["If", "Literal"],
 " was neither ",
 StyleBox["True", "Literal"],
 " nor ",
 StyleBox["False", "Literal"],
 ". P",
 StyleBox["retend ",
  FontTracking->"Plain"],
 StyleBox["it was not imme",
  FontTracking->"SemiCondensed"],
 "diately obvious to you what was going on (after al",
 StyleBox["l, you clearly see that you called ",
  FontTracking->"Extended"],
 StyleBox["To", "Literal",
  FontTracking->"Extended"],
 StyleBox["tal", "Literal"],
 " with one argument",
 StyleBox[" ",
  FontTracking->"Extended"],
 StyleBox["x", "Literal",
  FontSize->10.199996948242188`,
  FontTracking->"Extended"],
 StyleBox["). You decide to use ",
  FontTracking->"Extended"],
 StyleBox["Print", "Literal",
  FontTracking->"Extended"],
 StyleBox[" to get to the bottom of it. No",
  FontTracking->"Extended"],
 "tice that introducing ",
 StyleBox["Print", "Literal"],
 " into this code requires the whole thing to be wrapped in parentheses \
(another common debugging pitfall)."
}], "Text",
 CellChangeTimes->{{3.472912836685193*^9, 3.472912841397032*^9}, 
   3.4729128987535954`*^9, {3.472912933900832*^9, 3.472912976169859*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"myFunctionThatIsBrokenForEmptySeq", "[", "x___", "]"}], " ", ":=", 
  
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Print", "[", "x", "]"}], ";", " ", 
    RowBox[{"Total", "[", "x", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"myFunctionThatIsBrokenForEmptySeq", " ", "@@", " ", 
     RowBox[{"{", "}"}]}], " ", "\[Equal]", " ", "0"}], ",", " ", 
   "\"\<zero\>\"", ",", "\"\<not zero\>\"", ",", " ", 
   "\"\<something completely different\>\""}], "]"}]}], "Input",
 CellChangeTimes->{3.472912989831408*^9},
 CellLabel->"In[16]:="],

Cell[BoxData["\<\"\"\>"], "Print",
 CellLabel->"During evaluation of In[16]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"Total", "::", "\<\"argt\"\>"}], ":", 
  " ", "\<\"\[NoBreak]\\!\\(\\*StyleBox[\\!\\(Total\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" called with \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(0\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" arguments; \
\\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(1\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" or \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(2\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" arguments are \
expected.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/argt\\\", ButtonNote -> \
\\\"Total::argt\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[16]:="],

Cell[BoxData["\"\<something completely different\>\""], "Output", "Input",
 CellChangeTimes->{{3.472912991254272*^9, 3.472912991277499*^9}},
 CellLabel->"Out[17]="]
}, Open  ]],

Cell[TextData[{
 "If you were confused before, you are now totally befuddled! Here is where \
your own little functional ",
 StyleBox["fPrint", "Literal"],
 " can help, but you need to tweak it slightly to expose two common ghosts \
you might encounter in the wild. "
}], "Text",
 CellChangeTimes->{{3.472913100802885*^9, 3.47291311608597*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "fPrint", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fPrint", "[", "]"}], ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Print", "[", "\"\<NullSequence!!\>\"", "]"}], ";", 
    RowBox[{"Unevaluated", "[", 
     RowBox[{"Sequence", "[", "]"}], "]"}]}], 
   ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fPrint", "[", "\"\<\>\"", "]"}], ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Print", "[", "\"\<NullString!!\>\"", "]"}], ";", "\"\<\>\""}], 
   ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fPrint", "[", "x__", "]"}], " ", ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Print", "[", "x", "]"}], ";", "x"}], ")"}]}]}], "Input",
 CellLabel->"In[18]:="],

Cell["\<\
Now the problem is revealed, and you also side-stepped the parenthesis \
mistake.\
\>", "Text",
 CellChangeTimes->{{3.4729131230028257`*^9, 3.4729131379950657`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"myFunctionThatIsBrokenForEmptySeq", "[", "x___", "]"}], " ", ":=", 
  " ", 
  RowBox[{"Total", "[", 
   RowBox[{"fPrint", "[", "x", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"myFunctionThatIsBrokenForEmptySeq", " ", "@@", " ", 
     RowBox[{"{", "}"}]}], " ", "\[Equal]", " ", "0"}], ",", " ", 
   "\"\<zero\>\"", ",", "\"\<not zero\>\"", ",", " ", 
   "\"\<something completely different\>\""}], "]"}]}], "Input",
 CellChangeTimes->{3.4729130665372667`*^9},
 CellLabel->"In[22]:="],

Cell[BoxData["\<\"NullSequence!!\"\>"], "Print",
 CellLabel->"During evaluation of In[22]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"Total", "::", "\<\"argt\"\>"}], ":", 
  " ", "\<\"\[NoBreak]\\!\\(\\*StyleBox[\\!\\(Total\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" called with \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(0\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" arguments; \
\\\\\\\"\\\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(1\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" or \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(2\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" arguments are \
expected.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/argt\\\", ButtonNote -> \
\\\"Total::argt\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[22]:="],

Cell[BoxData["\"\<something completely different\>\""], "Output", "Input",
 CellChangeTimes->{{3.472913039055562*^9, 3.472913039073683*^9}},
 CellLabel->"Out[23]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2"],

Cell[TextData[{
 "There are other output functions (",
 StyleBox["PrintTemporary", "Literal"],
 ", ",
 StyleBox["CellPrint", "Literal"],
 ", and ",
 StyleBox["MessageDialog", "Literal"],
 ") that may be useful in certain debugging situations. See the documentation \
for these functions. I use ",
 StyleBox["PrintTemporary", "Literal"],
 " as part of the solution in ",
 ButtonBox["Recipe 19.5",
  BaseStyle->"Hyperlink",
  ButtonData->"Creating a Poor Man's Mathematica Debugger"],
 "."
}], "Text",
 CellChangeTimes->{{3.472913176071027*^9, 3.472913176173387*^9}, {
   3.473000346903224*^9, 3.473000349691451*^9}, 3.474287234638474*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Debugging Functions Called Many Times "
}], "Heading1", "TopOfPage",
 CellTags->"Debugging Functions Called Many Times"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell[TextData[{
 "You have a function that is invoked thousands of times, but only a few of \
the calls produce an unexpected result, and it is difficult to determine \
which invocations are causing the problem. ",
 StyleBox["Print", "Literal"],
 " is a poor choice because of the unreasonable amount of data that may get \
printed before you identify the issue."
}], "Text",
 CellChangeTimes->{{3.472913586470745*^9, 3.472913609801009*^9}, 
   3.474287376367256*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Use the ",
 StyleBox["Reap", "Literal"],
 "-",
 StyleBox["Sow", "Literal"],
 " combination discussed in ",
 ButtonBox["Recipe 2.10",
  BaseStyle->"Hyperlink",
  ButtonData->{
   "FunctionalProgramming.nb", "Incremental Construction of Lists"}],
 " to capture the data so you can analyze it using pattern matching or \
plotting. For example, imagine you have a function called ",
 StyleBox["func", "Literal"],
 " that is returning unexpected negative values and you are trying to \
understand the arguments that lead up to negative results. Here I use a \
contrived function for sake of the example. You can write a little wrapper \
around the function like so."
}], "Text",
 CellChangeTimes->{{3.4729136254228477`*^9, 3.472913654613269*^9}, {
  3.473000429342743*^9, 3.4730004416780577`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"func", "[", 
   RowBox[{"a_", ",", " ", "b_", ",", " ", "c_", ",", " ", "d_"}], "]"}], " ",
   ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"a", "+", "16"}], " ", "<", " ", 
     RowBox[{"b", "+", "c"}]}], " ", ",", " ", 
    RowBox[{"1", "-", "d"}], ",", " ", 
    RowBox[{"b", " ", "+", "c"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"funcWrapper", "[", "args__", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "r", "}"}], ",", 
    RowBox[{
     RowBox[{"r", " ", "=", 
      RowBox[{"func", "[", "args", "]"}]}], " ", ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"r", "<", "0"}], ",", " ", 
       RowBox[{"Sow", "[", 
        RowBox[{"{", "args", "}"}], "]"}]}], "]"}], ";", "r"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"result", ",", 
     RowBox[{"{", "problem", "}"}]}], "}"}], " ", "=", " ", 
   RowBox[{"Reap", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"funcWrapper", "[", 
       RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"a", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"b", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"c", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"d", ",", "10"}], "}"}]}], "]"}], "]"}]}], ";"}]}], "Input",
 CellLabel->"In[24]:="],

Cell["\<\
You can now see that there are 90 sets of arguments that caused the negative \
condition. Furthermore, you have the exact problematic values captured in a \
variable and can use the values to debug the function using techniques \
presented in other recipes in this chapter.\
\>", "Text",
 CellChangeTimes->{{3.47291425120892*^9, 3.4729142615319843`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "problem", "]"}]], "Input",
 CellLabel->"In[27]:="],

Cell[BoxData["90"], "Output",
 CellLabel->"Out[27]="]
}, Open  ]],

Cell[TextData[{
 "Invoking the function on these problematic arguments is a cinch using ",
 StyleBox["@@@", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.4729142677875957`*^9, 3.472914271140283*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"func", "@@@", " ", "problem"}]], "Input",
 CellLabel->"In[28]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}]}], "}"}]], "Output",
 CellLabel->"Out[28]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2", "TopOfPage"],

Cell[TextData[{
 StyleBox["Reap-Sow", "Literal"],
 " are a powerful debugging tool because they can direc",
 StyleBox["t debug data into an ar",
  FontTracking->"Extended"],
 "bitrary number of ",
 StyleBox["channels", "Emphasis",
  FontSlant->"Plain"],
 ". By ",
 StyleBox["channel,",
  FontSlant->"Italic"],
 " I refer to the capability of ",
 StyleBox["Sow", "Literal"],
 " to specify a tag as a second argument such that all instances of ",
 StyleBox["Sow", "Literal"],
 " with that tag collect data into a distinct list. For example, imagine you \
want to detect when ",
 StyleBox["func", "Literal"],
 " returns zero but want to segregate those arguments from the",
 StyleBox[" arguments that cause negative results. ",
  FontTracking->"SemiCondensed"]
}], "Text",
 CellChangeTimes->{{3.472914283012658*^9, 3.4729143243514757`*^9}, 
   3.472914368680894*^9, {3.472914399057693*^9, 3.4729144184083023`*^9}, {
   3.4742874802994823`*^9, 3.4742874805701113`*^9}, {3.476464298428001*^9, 
   3.476464301843581*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"funcWrapper", "[", "args__", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "r", "}"}], ",", 
    RowBox[{
     RowBox[{"r", " ", "=", 
      RowBox[{"func", "[", "args", "]"}]}], " ", ";", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{"r", "<", "0"}], ",", " ", 
       RowBox[{"Sow", "[", 
        RowBox[{
         RowBox[{"{", "args", "}"}], ",", "negative"}], "]"}], ",", 
       RowBox[{"r", "\[Equal]", "0"}], ",", 
       RowBox[{"Sow", "[", 
        RowBox[{
         RowBox[{"{", "args", "}"}], ",", "zero"}], "]"}], ",", "True", ",", 
       "0"}], "]"}], ";", "r"}]}], "]"}]}]], "Input",
 CellLabel->"In[29]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"result", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "n", "}"}], ",", 
       RowBox[{"{", "z", "}"}]}], "}"}]}], "}"}], "  ", "=", 
   RowBox[{"Reap", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"funcWrapper", "[", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"a", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"b", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"d", ",", "10"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"negative", ",", "zero"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[30]:="],

Cell["\<\
Now you can use these values as separate test sets to understand these \
distinct behaviors.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"func", " ", "@@@", " ", "n"}]], "Input",
 CellLabel->"In[31]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "7"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "9"}]}], "}"}]], "Output",
 CellLabel->"Out[31]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"func", " ", "@@@", " ", "z"}]], "Input",
 CellLabel->"In[32]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[32]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2"],

Cell[TextData[{
 ButtonBox["Recipe 19.6",
  BaseStyle->"Hyperlink",
  ButtonData->"Evaluation and Step Monitors"],
 " shows another common application of ",
 StyleBox["Reap-Sow", "Literal"],
 " in the debugging of built-in numerical algorithms or plotting functions."
}], "Text",
 CellChangeTimes->{{3.472914440729486*^9, 3.4729144426410217`*^9}, {
  3.4730004851706667`*^9, 3.473000486767481*^9}}],

Cell[TextData[{
 ButtonBox["Recipe 19.3",
  BaseStyle->"Hyperlink",
  ButtonData->"Stack Tracing To Debug Recursive Functions"],
 " shows how to use  ",
 StyleBox["Reap-Sow", "Literal"],
 " to take ",
 StyleBox["Stack", "Literal"],
 " snapshots."
}], "Text",
 CellChangeTimes->{{3.4729144527453947`*^9, 3.472914455137082*^9}, {
  3.473000510522344*^9, 3.4730005119755907`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]Stack Tracing to Debug Recursive Functions"
}], "Heading1",
 CellChangeTimes->{3.472914469974022*^9},
 CellTags->"Stack Tracing To Debug Recursive Functions"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell[TextData[{
 StyleBox["You have a recursive",
  FontTracking->"SemiCondensed"],
 " function that is unexpectedly violating ",
 StyleBox["$RecursionLimit", "Literal"],
 " and generating an error. Alternatively, you have a complex function with \
many function calls and you want to understand the sequence of calls that \
leads up to an error condition or erroneous value."
}], "Text",
 CellChangeTimes->{{3.472914479042107*^9, 3.4729144844549313`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2", "TopOfPage"],

Cell[TextData[{
 "Use ",
 StyleBox["Stack[]", "Literal"],
 " to output a stack trace. Here I use Ackermann",
 "\[CloseCurlyQuote]",
 "s function to illustrate the use of ",
 StyleBox["Stack", "Literal"],
 " because it will easily violate any sane recursion limit. Further, I create \
a function that will detect stack overflow before it happens and ",
 StyleBox["Throw", "Literal"],
 " the stack to caller. Specifically, I throw those expressions on the stack \
that match the function of interest by using ",
 StyleBox["Stack[A]", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{3.4729145237680273`*^9, 3.473000060424608*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"debugStack", "[", "]"}], " ", ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"Stack", "[", "]"}], "]"}], "+", "1"}], "\[GreaterEqual]", 
      "$RecursionLimit"}], ",", 
     RowBox[{"Throw", "[", 
      RowBox[{"Stack", "[", "A", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"A", "[", 
   RowBox[{"0", ",", "n_"}], "]"}], " ", ":=", " ", 
  RowBox[{"n", "+", "1"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"A", "[", 
   RowBox[{"m_", ",", "0"}], "]"}], " ", ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"debugStack", "[", "]"}], ";", 
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"m", "-", "1"}], ",", "1"}], "]"}]}], 
   ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"A", "[", 
   RowBox[{"m_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"debugStack", "[", "]"}], ";", 
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"m", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"m", ",", 
        RowBox[{"n", "-", "1"}]}], "]"}]}], "]"}]}], ")"}]}]}], "Input",
 CellLabel->"In[33]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$RecursionLimit", "=", "30"}], "}"}], ",", 
    RowBox[{"A", "[", 
     RowBox[{"4", ",", "1"}], "]"}]}], "]"}], "]"}]], "Input",
 CellLabel->"In[37]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"4", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"4", ",", 
        RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"2", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"2", ",", 
        RowBox[{"5", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"2", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"2", ",", 
        RowBox[{"4", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"7", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"6", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"5", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"4", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"2", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm]}], "}"}]], "Output",
 CellLabel->"Out[37]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "If you want to take multiple snapshots of the stack du",
 StyleBox["ring the progression of the func",
  FontTracking->"SemiCondensed"],
 "tion, regardless whether it overflows or not, you can use ",
 StyleBox["Reap-Sow", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.4729145377795277`*^9, 3.472914539867529*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",
 CellLabel->"In[38]:="],

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "[", "0", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"Sow", "[", 
      RowBox[{"Stack", "[", "Times", "]"}], "]"}], ";", "1"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"Sow", "[", 
      RowBox[{"Stack", "[", "Times", "]"}], "]"}], ";", 
     RowBox[{"x", " ", "*", " ", 
      RowBox[{"f", "[", 
       RowBox[{"x", "-", "1"}], "]"}]}]}]}], "]"}]}]}], "Input",
 CellLabel->"In[39]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reap", "[", 
  RowBox[{"f", "[", "3", "]"}], "]"}]], "Input",
 CellLabel->"In[41]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       TagBox[
        RowBox[{"3", " ", 
         RowBox[{"f", "[", 
          RowBox[{"3", "-", "1"}], "]"}]}],
        HoldForm], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TagBox[
         RowBox[{"3", " ", 
          RowBox[{"f", "[", 
           RowBox[{"3", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"2", " ", 
          RowBox[{"f", "[", 
           RowBox[{"2", "-", "1"}], "]"}]}],
         HoldForm]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TagBox[
         RowBox[{"3", " ", 
          RowBox[{"f", "[", 
           RowBox[{"3", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"2", " ", 
          RowBox[{"f", "[", 
           RowBox[{"2", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"1", " ", 
          RowBox[{"f", "[", 
           RowBox[{"1", "-", "1"}], "]"}]}],
         HoldForm]}], "}"}]}], "}"}], "}"}]}], "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellLabel->"Out[41]="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       TagBox[
        RowBox[{"3", " ", 
         RowBox[{"f", "[", 
          RowBox[{"3", "-", "1"}], "]"}]}],
        HoldForm], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TagBox[
         RowBox[{"3", " ", 
          RowBox[{"f", "[", 
           RowBox[{"3", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"2", " ", 
          RowBox[{"f", "[", 
           RowBox[{"2", "-", "1"}], "]"}]}],
         HoldForm]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TagBox[
         RowBox[{"3", " ", 
          RowBox[{"f", "[", 
           RowBox[{"3", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"2", " ", 
          RowBox[{"f", "[", 
           RowBox[{"2", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"1", " ", 
          RowBox[{"f", "[", 
           RowBox[{"1", "-", "1"}], "]"}]}],
         HoldForm]}], "}"}]}], "}"}], "}"}]}], "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellLabel->"Out[44]="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       TagBox[
        RowBox[{"3", " ", 
         RowBox[{"f", "[", 
          RowBox[{"3", "-", "1"}], "]"}]}],
        HoldForm], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TagBox[
         RowBox[{"3", " ", 
          RowBox[{"f", "[", 
           RowBox[{"3", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"2", " ", 
          RowBox[{"f", "[", 
           RowBox[{"2", "-", "1"}], "]"}]}],
         HoldForm]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TagBox[
         RowBox[{"3", " ", 
          RowBox[{"f", "[", 
           RowBox[{"3", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"2", " ", 
          RowBox[{"f", "[", 
           RowBox[{"2", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"1", " ", 
          RowBox[{"f", "[", 
           RowBox[{"1", "-", "1"}], "]"}]}],
         HoldForm]}], "}"}]}], "}"}], "}"}]}], "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellLabel->"Out[189]="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       TagBox[
        RowBox[{"3", " ", 
         RowBox[{"f", "[", 
          RowBox[{"3", "-", "1"}], "]"}]}],
        HoldForm], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TagBox[
         RowBox[{"3", " ", 
          RowBox[{"f", "[", 
           RowBox[{"3", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"2", " ", 
          RowBox[{"f", "[", 
           RowBox[{"2", "-", "1"}], "]"}]}],
         HoldForm]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TagBox[
         RowBox[{"3", " ", 
          RowBox[{"f", "[", 
           RowBox[{"3", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"2", " ", 
          RowBox[{"f", "[", 
           RowBox[{"2", "-", "1"}], "]"}]}],
         HoldForm], ",", 
        TagBox[
         RowBox[{"1", " ", 
          RowBox[{"f", "[", 
           RowBox[{"1", "-", "1"}], "]"}]}],
         HoldForm]}], "}"}]}], "}"}], "}"}]}], "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2", "ProductionPageBreak"],

Cell[TextData[{
 StyleBox["StackInhibit", "Literal"],
 " can be used to keep certain expressions from showing up in the evaluation \
stack. It can be helpful to insert this function into your code to control \
the amount of information in the stack. I use this function as part of ",
 ButtonBox["Recipe 19.5",
  BaseStyle->"Hyperlink",
  ButtonData->"Creating a Poor Man's Mathematica Debugger"],
 "."
}], "Text",
 CellChangeTimes->{
  3.474287852008903*^9, {3.47646433583219*^9, 3.476464338244793*^9}, {
   3.4764644989769373`*^9, 3.476464499019988*^9}}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Taming Trace to Extract Useful Debugging Information"
}], "Heading1",
 CellTags->"Taming Trace"],

Cell[CellGroupData[{

Cell["Problem", "Heading2"],

Cell[TextData[{
 StyleBox["Trace", "Literal"],
 " provides an extremely detailed account of the evalua",
 StyleBox["tion of an expression; how",
  FontTracking->"SemiCondensed"],
 "ever, for all but the most trivial expressions, this voluminous detail can \
be difficult to wade through. "
}], "Text",
 CellChangeTimes->{{3.4729146054030647`*^9, 3.472914615653399*^9}, {
  3.474287881376512*^9, 3.474287881827096*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Again, I use the Ackermann function to illustrate the issue, although this \
problem is not particular to recursive functions. Ackermann is convenient \
because it creates a large number of nested function calls and intermediate \
expressions. In addition, I purposefully throw a monkey wrench into this \
function to simulate a bug: ",
 StyleBox["\"bug\"", "Literal"],
 ".  Real-world bugs don",
 "\[CloseCurlyQuote]",
 "t come so nicely labeled (if only!) but the point here is that in a \
real-world debugging situation you are looking for a particular subexpression \
that looks fishy based on your knowledge of the intended computation. "
}], "Text",
 CellChangeTimes->{{3.472914625302328*^9, 3.47291465492689*^9}, {
  3.472914686272229*^9, 3.472914687096106*^9}, {3.472914718460372*^9, 
  3.47291474034865*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "[", 
   RowBox[{"0", ",", "n_"}], "]"}], " ", ":=", " ", 
  RowBox[{"n", "+", "1"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"A", "[", 
   RowBox[{"m_", ",", "0"}], "]"}], " ", ":=", 
  RowBox[{"A", "[", 
   RowBox[{
    RowBox[{"m", "-", "1"}], ",", "1"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"A", "[", 
   RowBox[{"m_", ",", "2"}], "]"}], " ", ":=", 
  RowBox[{"(", " ", 
   RowBox[{"\"\<bug\>\"", ";", 
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"m", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"m", ",", "1"}], "]"}]}], "]"}]}], 
   ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"A", "[", 
   RowBox[{"m_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"A", "[", 
   RowBox[{
    RowBox[{"m", "-", "1"}], ",", 
    RowBox[{"A", "[", 
     RowBox[{"m", ",", 
      RowBox[{"n", "-", "1"}]}], "]"}]}], "]"}]}]}], "Input",
 CellLabel->"In[42]:="],

Cell["\<\
If you attempt to trace this buggy Ackermann on even relatively tame inputs, \
you will quickly generate a lot of output that anyone but the most seasoned \
Mathematica developer would have trouble deciphering. In essence, what you \
are seeing is an expansion of the call tree, and thus, the problem is not \
only the amount of output but the deeply nested structure of the output. You \
could easily miss the \[OpenCurlyDoubleQuote]bug\[CloseCurlyDoubleQuote] in \
this data, and even if you spot it, you might still have trouble \
understanding what led up to its occurrence. \
\>", "Text",
 CellChangeTimes->{{3.472914760539631*^9, 3.472914801979663*^9}, {
  3.474287888539276*^9, 3.474287894072609*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trace", " ", "=", 
  RowBox[{"Trace", "[", 
   RowBox[{"A", "[", 
    RowBox[{"2", ",", "3"}], "]"}], "]"}]}]], "Input",
 CellLabel->"In[46]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"2", ",", "3"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"2", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"2", ",", 
        RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"2", "-", "1"}],
      HoldForm], ",", 
     TagBox["1",
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"3", "-", "1"}],
        HoldForm], ",", 
       TagBox["2",
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"2", ",", "2"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"\<\"bug\"\>", ";", 
       RowBox[{"A", "[", 
        RowBox[{
         RowBox[{"2", "-", "1"}], ",", 
         RowBox[{"A", "[", 
          RowBox[{"2", ",", "1"}], "]"}]}], "]"}]}],
      HoldForm], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"2", "-", "1"}],
          HoldForm], ",", 
         TagBox["1",
          HoldForm]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{"2", ",", "1"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{
            RowBox[{"2", "-", "1"}], ",", 
            RowBox[{"A", "[", 
             RowBox[{"2", ",", 
              RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
          HoldForm], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"2", "-", "1"}],
            HoldForm], ",", 
           TagBox["1",
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             TagBox[
              RowBox[{"1", "-", "1"}],
              HoldForm], ",", 
             TagBox["0",
              HoldForm]}], "}"}], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{"2", ",", "0"}], "]"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{
              RowBox[{"2", "-", "1"}], ",", "1"}], "]"}],
            HoldForm], ",", 
           RowBox[{"{", 
            RowBox[{
             TagBox[
              RowBox[{"2", "-", "1"}],
              HoldForm], ",", 
             TagBox["1",
              HoldForm]}], "}"}], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{"1", ",", "1"}], "]"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{
              RowBox[{"1", "-", "1"}], ",", 
              RowBox[{"A", "[", 
               RowBox[{"1", ",", 
                RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
            HoldForm], ",", 
           RowBox[{"{", 
            RowBox[{
             TagBox[
              RowBox[{"1", "-", "1"}],
              HoldForm], ",", 
             TagBox["0",
              HoldForm]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               TagBox[
                RowBox[{"1", "-", "1"}],
                HoldForm], ",", 
               TagBox["0",
                HoldForm]}], "}"}], ",", 
             TagBox[
              RowBox[{"A", "[", 
               RowBox[{"1", ",", "0"}], "]"}],
              HoldForm], ",", 
             TagBox[
              RowBox[{"A", "[", 
               RowBox[{
                RowBox[{"1", "-", "1"}], ",", "1"}], "]"}],
              HoldForm], ",", 
             RowBox[{"{", 
              RowBox[{
               TagBox[
                RowBox[{"1", "-", "1"}],
                HoldForm], ",", 
               TagBox["0",
                HoldForm]}], "}"}], ",", 
             TagBox[
              RowBox[{"A", "[", 
               RowBox[{"0", ",", "1"}], "]"}],
              HoldForm], ",", 
             TagBox[
              RowBox[{"1", "+", "1"}],
              HoldForm], ",", 
             TagBox["2",
              HoldForm]}], "}"}], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{"0", ",", "2"}], "]"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"2", "+", "1"}],
            HoldForm], ",", 
           TagBox["3",
            HoldForm]}], "}"}], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{"1", ",", "3"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{
            RowBox[{"1", "-", "1"}], ",", 
            RowBox[{"A", "[", 
             RowBox[{"1", ",", 
              RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}],
          HoldForm], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"1", "-", "1"}],
            HoldForm], ",", 
           TagBox["0",
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             TagBox[
              RowBox[{"3", "-", "1"}],
              HoldForm], ",", 
             TagBox["2",
              HoldForm]}], "}"}], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{"1", ",", "2"}], "]"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"\<\"bug\"\>", ";", 
             RowBox[{"A", "[", 
              RowBox[{
               RowBox[{"1", "-", "1"}], ",", 
               RowBox[{"A", "[", 
                RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}],
            HoldForm], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               TagBox[
                RowBox[{"1", "-", "1"}],
                HoldForm], ",", 
               TagBox["0",
                HoldForm]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               TagBox[
                RowBox[{"A", "[", 
                 RowBox[{"1", ",", "1"}], "]"}],
                HoldForm], ",", 
               TagBox[
                RowBox[{"A", "[", 
                 RowBox[{
                  RowBox[{"1", "-", "1"}], ",", 
                  RowBox[{"A", "[", 
                   RowBox[{"1", ",", 
                    RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
                HoldForm], ",", 
               RowBox[{"{", 
                RowBox[{
                 TagBox[
                  RowBox[{"1", "-", "1"}],
                  HoldForm], ",", 
                 TagBox["0",
                  HoldForm]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   TagBox[
                    RowBox[{"1", "-", "1"}],
                    HoldForm], ",", 
                   TagBox["0",
                    HoldForm]}], "}"}], ",", 
                 TagBox[
                  RowBox[{"A", "[", 
                   RowBox[{"1", ",", "0"}], "]"}],
                  HoldForm], ",", 
                 TagBox[
                  RowBox[{"A", "[", 
                   RowBox[{
                    RowBox[{"1", "-", "1"}], ",", "1"}], "]"}],
                  HoldForm], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   TagBox[
                    RowBox[{"1", "-", "1"}],
                    HoldForm], ",", 
                   TagBox["0",
                    HoldForm]}], "}"}], ",", 
                 TagBox[
                  RowBox[{"A", "[", 
                   RowBox[{"0", ",", "1"}], "]"}],
                  HoldForm], ",", 
                 TagBox[
                  RowBox[{"1", "+", "1"}],
                  HoldForm], ",", 
                 TagBox["2",
                  HoldForm]}], "}"}], ",", 
               TagBox[
                RowBox[{"A", "[", 
                 RowBox[{"0", ",", "2"}], "]"}],
                HoldForm], ",", 
               TagBox[
                RowBox[{"2", "+", "1"}],
                HoldForm], ",", 
               TagBox["3",
                HoldForm]}], "}"}], ",", 
             TagBox[
              RowBox[{"A", "[", 
               RowBox[{"0", ",", "3"}], "]"}],
              HoldForm], ",", 
             TagBox[
              RowBox[{"3", "+", "1"}],
              HoldForm], ",", 
             TagBox["4",
              HoldForm]}], "}"}], ",", 
           TagBox["4",
            HoldForm]}], "}"}], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{"0", ",", "4"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"4", "+", "1"}],
          HoldForm], ",", 
         TagBox["5",
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"A", "[", 
         RowBox[{"1", ",", "5"}], "]"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"A", "[", 
         RowBox[{
          RowBox[{"1", "-", "1"}], ",", 
          RowBox[{"A", "[", 
           RowBox[{"1", ",", 
            RowBox[{"5", "-", "1"}]}], "]"}]}], "]"}],
        HoldForm], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"1", "-", "1"}],
          HoldForm], ",", 
         TagBox["0",
          HoldForm]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"5", "-", "1"}],
            HoldForm], ",", 
           TagBox["4",
            HoldForm]}], "}"}], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{"1", ",", "4"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{
            RowBox[{"1", "-", "1"}], ",", 
            RowBox[{"A", "[", 
             RowBox[{"1", ",", 
              RowBox[{"4", "-", "1"}]}], "]"}]}], "]"}],
          HoldForm], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"1", "-", "1"}],
            HoldForm], ",", 
           TagBox["0",
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             TagBox[
              RowBox[{"4", "-", "1"}],
              HoldForm], ",", 
             TagBox["3",
              HoldForm]}], "}"}], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{"1", ",", "3"}], "]"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{
              RowBox[{"1", "-", "1"}], ",", 
              RowBox[{"A", "[", 
               RowBox[{"1", ",", 
                RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}],
            HoldForm], ",", 
           RowBox[{"{", 
            RowBox[{
             TagBox[
              RowBox[{"1", "-", "1"}],
              HoldForm], ",", 
             TagBox["0",
              HoldForm]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               TagBox[
                RowBox[{"3", "-", "1"}],
                HoldForm], ",", 
               TagBox["2",
                HoldForm]}], "}"}], ",", 
             TagBox[
              RowBox[{"A", "[", 
               RowBox[{"1", ",", "2"}], "]"}],
              HoldForm], ",", 
             TagBox[
              RowBox[{"\<\"bug\"\>", ";", 
               RowBox[{"A", "[", 
                RowBox[{
                 RowBox[{"1", "-", "1"}], ",", 
                 RowBox[{"A", "[", 
                  RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}],
              HoldForm], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 TagBox[
                  RowBox[{"1", "-", "1"}],
                  HoldForm], ",", 
                 TagBox["0",
                  HoldForm]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 TagBox[
                  RowBox[{"A", "[", 
                   RowBox[{"1", ",", "1"}], "]"}],
                  HoldForm], ",", 
                 TagBox[
                  RowBox[{"A", "[", 
                   RowBox[{
                    RowBox[{"1", "-", "1"}], ",", 
                    RowBox[{"A", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
                  HoldForm], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   TagBox[
                    RowBox[{"1", "-", "1"}],
                    HoldForm], ",", 
                   TagBox["0",
                    HoldForm]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    TagBox[
                    RowBox[{"1", "-", "1"}],
                    HoldForm], ",", 
                    TagBox["0",
                    HoldForm]}], "}"}], ",", 
                   TagBox[
                    RowBox[{"A", "[", 
                    RowBox[{"1", ",", "0"}], "]"}],
                    HoldForm], ",", 
                   TagBox[
                    RowBox[{"A", "[", 
                    RowBox[{
                    RowBox[{"1", "-", "1"}], ",", "1"}], "]"}],
                    HoldForm], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    TagBox[
                    RowBox[{"1", "-", "1"}],
                    HoldForm], ",", 
                    TagBox["0",
                    HoldForm]}], "}"}], ",", 
                   TagBox[
                    RowBox[{"A", "[", 
                    RowBox[{"0", ",", "1"}], "]"}],
                    HoldForm], ",", 
                   TagBox[
                    RowBox[{"1", "+", "1"}],
                    HoldForm], ",", 
                   TagBox["2",
                    HoldForm]}], "}"}], ",", 
                 TagBox[
                  RowBox[{"A", "[", 
                   RowBox[{"0", ",", "2"}], "]"}],
                  HoldForm], ",", 
                 TagBox[
                  RowBox[{"2", "+", "1"}],
                  HoldForm], ",", 
                 TagBox["3",
                  HoldForm]}], "}"}], ",", 
               TagBox[
                RowBox[{"A", "[", 
                 RowBox[{"0", ",", "3"}], "]"}],
                HoldForm], ",", 
               TagBox[
                RowBox[{"3", "+", "1"}],
                HoldForm], ",", 
               TagBox["4",
                HoldForm]}], "}"}], ",", 
             TagBox["4",
              HoldForm]}], "}"}], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{"0", ",", "4"}], "]"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"4", "+", "1"}],
            HoldForm], ",", 
           TagBox["5",
            HoldForm]}], "}"}], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{"0", ",", "5"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"5", "+", "1"}],
          HoldForm], ",", 
         TagBox["6",
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"A", "[", 
         RowBox[{"0", ",", "6"}], "]"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"6", "+", "1"}],
        HoldForm], ",", 
       TagBox["7",
        HoldForm]}], "}"}], ",", 
     TagBox["7",
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "7"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"7", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"1", "-", "1"}],
      HoldForm], ",", 
     TagBox["0",
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"7", "-", "1"}],
        HoldForm], ",", 
       TagBox["6",
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"1", ",", "6"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{
        RowBox[{"1", "-", "1"}], ",", 
        RowBox[{"A", "[", 
         RowBox[{"1", ",", 
          RowBox[{"6", "-", "1"}]}], "]"}]}], "]"}],
      HoldForm], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"1", "-", "1"}],
        HoldForm], ",", 
       TagBox["0",
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"6", "-", "1"}],
          HoldForm], ",", 
         TagBox["5",
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"A", "[", 
         RowBox[{"1", ",", "5"}], "]"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"A", "[", 
         RowBox[{
          RowBox[{"1", "-", "1"}], ",", 
          RowBox[{"A", "[", 
           RowBox[{"1", ",", 
            RowBox[{"5", "-", "1"}]}], "]"}]}], "]"}],
        HoldForm], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"1", "-", "1"}],
          HoldForm], ",", 
         TagBox["0",
          HoldForm]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"5", "-", "1"}],
            HoldForm], ",", 
           TagBox["4",
            HoldForm]}], "}"}], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{"1", ",", "4"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{
            RowBox[{"1", "-", "1"}], ",", 
            RowBox[{"A", "[", 
             RowBox[{"1", ",", 
              RowBox[{"4", "-", "1"}]}], "]"}]}], "]"}],
          HoldForm], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"1", "-", "1"}],
            HoldForm], ",", 
           TagBox["0",
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             TagBox[
              RowBox[{"4", "-", "1"}],
              HoldForm], ",", 
             TagBox["3",
              HoldForm]}], "}"}], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{"1", ",", "3"}], "]"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{
              RowBox[{"1", "-", "1"}], ",", 
              RowBox[{"A", "[", 
               RowBox[{"1", ",", 
                RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}],
            HoldForm], ",", 
           RowBox[{"{", 
            RowBox[{
             TagBox[
              RowBox[{"1", "-", "1"}],
              HoldForm], ",", 
             TagBox["0",
              HoldForm]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               TagBox[
                RowBox[{"3", "-", "1"}],
                HoldForm], ",", 
               TagBox["2",
                HoldForm]}], "}"}], ",", 
             TagBox[
              RowBox[{"A", "[", 
               RowBox[{"1", ",", "2"}], "]"}],
              HoldForm], ",", 
             TagBox[
              RowBox[{"\<\"bug\"\>", ";", 
               RowBox[{"A", "[", 
                RowBox[{
                 RowBox[{"1", "-", "1"}], ",", 
                 RowBox[{"A", "[", 
                  RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}],
              HoldForm], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 TagBox[
                  RowBox[{"1", "-", "1"}],
                  HoldForm], ",", 
                 TagBox["0",
                  HoldForm]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 TagBox[
                  RowBox[{"A", "[", 
                   RowBox[{"1", ",", "1"}], "]"}],
                  HoldForm], ",", 
                 TagBox[
                  RowBox[{"A", "[", 
                   RowBox[{
                    RowBox[{"1", "-", "1"}], ",", 
                    RowBox[{"A", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
                  HoldForm], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   TagBox[
                    RowBox[{"1", "-", "1"}],
                    HoldForm], ",", 
                   TagBox["0",
                    HoldForm]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    TagBox[
                    RowBox[{"1", "-", "1"}],
                    HoldForm], ",", 
                    TagBox["0",
                    HoldForm]}], "}"}], ",", 
                   TagBox[
                    RowBox[{"A", "[", 
                    RowBox[{"1", ",", "0"}], "]"}],
                    HoldForm], ",", 
                   TagBox[
                    RowBox[{"A", "[", 
                    RowBox[{
                    RowBox[{"1", "-", "1"}], ",", "1"}], "]"}],
                    HoldForm], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    TagBox[
                    RowBox[{"1", "-", "1"}],
                    HoldForm], ",", 
                    TagBox["0",
                    HoldForm]}], "}"}], ",", 
                   TagBox[
                    RowBox[{"A", "[", 
                    RowBox[{"0", ",", "1"}], "]"}],
                    HoldForm], ",", 
                   TagBox[
                    RowBox[{"1", "+", "1"}],
                    HoldForm], ",", 
                   TagBox["2",
                    HoldForm]}], "}"}], ",", 
                 TagBox[
                  RowBox[{"A", "[", 
                   RowBox[{"0", ",", "2"}], "]"}],
                  HoldForm], ",", 
                 TagBox[
                  RowBox[{"2", "+", "1"}],
                  HoldForm], ",", 
                 TagBox["3",
                  HoldForm]}], "}"}], ",", 
               TagBox[
                RowBox[{"A", "[", 
                 RowBox[{"0", ",", "3"}], "]"}],
                HoldForm], ",", 
               TagBox[
                RowBox[{"3", "+", "1"}],
                HoldForm], ",", 
               TagBox["4",
                HoldForm]}], "}"}], ",", 
             TagBox["4",
              HoldForm]}], "}"}], ",", 
           TagBox[
            RowBox[{"A", "[", 
             RowBox[{"0", ",", "4"}], "]"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"4", "+", "1"}],
            HoldForm], ",", 
           TagBox["5",
            HoldForm]}], "}"}], ",", 
         TagBox[
          RowBox[{"A", "[", 
           RowBox[{"0", ",", "5"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"5", "+", "1"}],
          HoldForm], ",", 
         TagBox["6",
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"A", "[", 
         RowBox[{"0", ",", "6"}], "]"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"6", "+", "1"}],
        HoldForm], ",", 
       TagBox["7",
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "7"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"7", "+", "1"}],
      HoldForm], ",", 
     TagBox["8",
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "8"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"8", "+", "1"}],
    HoldForm], ",", 
   TagBox["9",
    HoldForm]}], "}"}]], "Output",
 CellLabel->"Out[46]="]
}, Open  ]],

Cell[TextData[{
 "Using ",
 StyleBox["Depth", "Literal"],
 ", you can see that there are 13 levels in the expression output by ",
 StyleBox["Trace", "Literal"],
 " (although this is inflated by the existence of ",
 StyleBox["HoldForm", "Literal"],
 ", as I explain later). In a real-world use of ",
 StyleBox["Trace", "Literal"],
 ", you could easily encounter output with depth an order of magnitude larger \
and an overall output several orders of magnitude larger still."
}], "Text",
 CellChangeTimes->{
  3.472914816622162*^9, {3.472915003463071*^9, 3.472915093731192*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Depth", "[", "trace", "]"}]], "Input",
 CellLabel->"In[47]:="],

Cell[BoxData["13"], "Output",
 CellLabel->"Out[47]="]
}, Open  ]],

Cell[TextData[{
 "To understand this solution, be aware that all the intermediate expressions \
output by ",
 StyleBox["Trace", "Literal"],
 " are wrapped in ",
 StyleBox["HoldForm", "Literal"],
 " to prevent their evaluation (which would of course defeat the purpose of \
",
 StyleBox["Trace", "Literal"],
 "). You can see this by using ",
 StyleBox["InputForm", "Literal"],
 ". I use ",
 StyleBox["Short", "Literal"],
 " to suppress repeating the mess of output from above."
}], "Text",
 CellChangeTimes->{3.4764645340879173`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"trace", "//", "InputForm"}], "//", "Short"}]], "Input",
 CellLabel->"In[48]:="],

Cell[BoxData[
 TagBox[
  FrameBox["\<\"{HoldForm[A[2, 3]], HoldForm[A[2 - 1, A[2, <<1>>]]], <<8>>, \
HoldForm[9]}\"\>",
   BoxFrame->False,
   FrameMargins->{{False, False}, {False, False}}],
  Short]], "Output",
 CellLabel->"Out[48]//Short="]
}, Open  ]],

Cell[TextData[{
 "One way to get a handle on the output of ",
 StyleBox["Trac", "Literal"],
 StyleBox["e", "Literal",
  FontTracking->"Extended"],
 StyleBox[" is to linearize it so you get a flat struc",
  FontTracking->"Extended"],
 "ture that presents the sequence of operations as they occur in time. This \
can be done by using what amounts to a preorder tree traversal."
}], "Text",
 CellChangeTimes->{{3.472915147570753*^9, 3.47291515265345*^9}, 
   3.474287972874044*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"traverseTrace", ",", "traverseTrace1"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"traverseTrace", "[", "x_", "]"}], " ", ":=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Reap", "[", 
    RowBox[{"traverseTrace1", "[", "x", "]"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"traverseTrace1", "[", 
   RowBox[{"{", "}"}], "]"}], " ", ":=", " ", 
  RowBox[{"Sequence", "[", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"traverseTrace1", "[", "x_List", "]"}], " ", ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"traverseTrace1", "[", 
     RowBox[{"First", "[", "x", "]"}], "]"}], ";", 
    RowBox[{"traverseTrace1", "[", 
     RowBox[{"Rest", "[", "x", "]"}], "]"}]}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"traverseTrace1", "[", 
   RowBox[{"HoldForm", "[", "x_", "]"}], "]"}], " ", ":=", 
  RowBox[{"Sow", "[", 
   RowBox[{"HoldForm", "[", "x", "]"}], "]"}]}]}], "Input",
 CellLabel->"In[49]:="],

Cell["\<\
This still produces as much raw data, but its linear nature makes it easier \
to visualize and manipulate. \
\>", "Text",
 CellChangeTimes->{3.472915166522668*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"timeSequence", " ", "=", 
  RowBox[{"traverseTrace", "[", "trace", "]"}]}]], "Input",
 CellLabel->"In[54]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"2", ",", "3"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"2", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"2", ",", 
        RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"2", "-", "1"}],
    HoldForm], ",", 
   TagBox["1",
    HoldForm], ",", 
   TagBox[
    RowBox[{"3", "-", "1"}],
    HoldForm], ",", 
   TagBox["2",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"2", ",", "2"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"\<\"bug\"\>", ";", 
     RowBox[{"A", "[", 
      RowBox[{
       RowBox[{"2", "-", "1"}], ",", 
       RowBox[{"A", "[", 
        RowBox[{"2", ",", "1"}], "]"}]}], "]"}]}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"2", "-", "1"}],
    HoldForm], ",", 
   TagBox["1",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"2", ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"2", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"2", ",", 
        RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"2", "-", "1"}],
    HoldForm], ",", 
   TagBox["1",
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"2", ",", "0"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"2", "-", "1"}], ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"2", "-", "1"}],
    HoldForm], ",", 
   TagBox["1",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "0"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "+", "1"}],
    HoldForm], ",", 
   TagBox["2",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "2"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"2", "+", "1"}],
    HoldForm], ",", 
   TagBox["3",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "3"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"3", "-", "1"}],
    HoldForm], ",", 
   TagBox["2",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "2"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"\<\"bug\"\>", ";", 
     RowBox[{"A", "[", 
      RowBox[{
       RowBox[{"1", "-", "1"}], ",", 
       RowBox[{"A", "[", 
        RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "0"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "+", "1"}],
    HoldForm], ",", 
   TagBox["2",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "2"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"2", "+", "1"}],
    HoldForm], ",", 
   TagBox["3",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "3"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"3", "+", "1"}],
    HoldForm], ",", 
   TagBox["4",
    HoldForm], ",", 
   TagBox["4",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "4"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"4", "+", "1"}],
    HoldForm], ",", 
   TagBox["5",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "5"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"5", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"5", "-", "1"}],
    HoldForm], ",", 
   TagBox["4",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "4"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"4", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"4", "-", "1"}],
    HoldForm], ",", 
   TagBox["3",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "3"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"3", "-", "1"}],
    HoldForm], ",", 
   TagBox["2",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "2"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"\<\"bug\"\>", ";", 
     RowBox[{"A", "[", 
      RowBox[{
       RowBox[{"1", "-", "1"}], ",", 
       RowBox[{"A", "[", 
        RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "0"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "+", "1"}],
    HoldForm], ",", 
   TagBox["2",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "2"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"2", "+", "1"}],
    HoldForm], ",", 
   TagBox["3",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "3"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"3", "+", "1"}],
    HoldForm], ",", 
   TagBox["4",
    HoldForm], ",", 
   TagBox["4",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "4"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"4", "+", "1"}],
    HoldForm], ",", 
   TagBox["5",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "5"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"5", "+", "1"}],
    HoldForm], ",", 
   TagBox["6",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "6"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"6", "+", "1"}],
    HoldForm], ",", 
   TagBox["7",
    HoldForm], ",", 
   TagBox["7",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "7"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"7", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"7", "-", "1"}],
    HoldForm], ",", 
   TagBox["6",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "6"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"6", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"6", "-", "1"}],
    HoldForm], ",", 
   TagBox["5",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "5"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"5", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"5", "-", "1"}],
    HoldForm], ",", 
   TagBox["4",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "4"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"4", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"4", "-", "1"}],
    HoldForm], ",", 
   TagBox["3",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "3"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"3", "-", "1"}],
    HoldForm], ",", 
   TagBox["2",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "2"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"\<\"bug\"\>", ";", 
     RowBox[{"A", "[", 
      RowBox[{
       RowBox[{"1", "-", "1"}], ",", 
       RowBox[{"A", "[", 
        RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"1", ",", 
        RowBox[{"1", "-", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"1", ",", "0"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"1", "-", "1"}], ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "-", "1"}],
    HoldForm], ",", 
   TagBox["0",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "1"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"1", "+", "1"}],
    HoldForm], ",", 
   TagBox["2",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "2"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"2", "+", "1"}],
    HoldForm], ",", 
   TagBox["3",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "3"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"3", "+", "1"}],
    HoldForm], ",", 
   TagBox["4",
    HoldForm], ",", 
   TagBox["4",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "4"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"4", "+", "1"}],
    HoldForm], ",", 
   TagBox["5",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "5"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"5", "+", "1"}],
    HoldForm], ",", 
   TagBox["6",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "6"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"6", "+", "1"}],
    HoldForm], ",", 
   TagBox["7",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "7"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"7", "+", "1"}],
    HoldForm], ",", 
   TagBox["8",
    HoldForm], ",", 
   TagBox[
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "8"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"8", "+", "1"}],
    HoldForm], ",", 
   TagBox["9",
    HoldForm]}], "}"}]], "Output",
 CellLabel->"Out[54]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "Once you have linearized the output of ",
 StyleBox["Trace", "Literal"],
 ", you can easily extract segments of the execution history or use patterns \
to extract specific segments of interest."
}], "Text",
 CellChangeTimes->{{3.4729151814516*^9, 3.472915209222856*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"timeSequence", "[", 
   RowBox[{"[", 
    RowBox[{"5", ";;", "18"}], "]"}], "]"}], "//", "InputForm"}]], "Input",
 CellLabel->"In[55]:="],

Cell[BoxData[
 StyleBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"HoldForm", "[", 
     RowBox[{"3", " ", "-", " ", "1"}], "]"}], ",", " ", 
    RowBox[{"HoldForm", "[", "2", "]"}], ",", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"A", "[", 
      RowBox[{"2", ",", " ", "2"}], "]"}], "]"}], ",", " ", "\n", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"\<\"bug\"\>", ";", " ", 
      RowBox[{"A", "[", 
       RowBox[{
        RowBox[{"2", " ", "-", " ", "1"}], ",", " ", 
        RowBox[{"A", "[", 
         RowBox[{"2", ",", " ", "1"}], "]"}]}], "]"}]}], "]"}], ",", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"2", " ", "-", " ", "1"}], "]"}], ",", " ", 
    RowBox[{"HoldForm", "[", "1", "]"}], ",", " ", "\n", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"A", "[", 
      RowBox[{"2", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"A", "[", 
      RowBox[{
       RowBox[{"2", " ", "-", " ", "1"}], ",", " ", 
       RowBox[{"A", "[", 
        RowBox[{"2", ",", " ", 
         RowBox[{"1", " ", "-", " ", "1"}]}], "]"}]}], "]"}], "]"}], ",", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"2", " ", "-", " ", "1"}], "]"}], ",", " ", "\n", " ", 
    RowBox[{"HoldForm", "[", "1", "]"}], ",", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"1", " ", "-", " ", "1"}], "]"}], ",", " ", 
    RowBox[{"HoldForm", "[", "0", "]"}], ",", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"A", "[", 
      RowBox[{"2", ",", " ", "0"}], "]"}], "]"}], ",", " ", "\n", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"A", "[", 
      RowBox[{
       RowBox[{"2", " ", "-", " ", "1"}], ",", " ", "1"}], "]"}], "]"}]}], 
   "}"}],
  FontFamily->"WriTheSansMonoCond BoldItalic"]], "Output",
 CellLabel->"Out[55]//InputForm="]
}, Open  ]],

Cell[TextData[{
 "Here I use ",
 StyleBox["ReplaceList", "Literal"],
 " to find every occurrence of a call to ",
 StyleBox["A", "Literal"],
 " where the first argument was 0, and then output the expression co",
 StyleBox["mputed immediately before and imme",
  FontTracking->"Extended"],
 "diately after."
}], "Text",
 CellChangeTimes->{
  3.4729152190317287`*^9, {3.4742879955232*^9, 3.474287997146164*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplaceList", "[", 
  RowBox[{"timeSequence", " ", ",", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"___", ",", "a_", ",", 
      RowBox[{"HoldForm", "[", 
       RowBox[{"A", "[", 
        RowBox[{"0", ",", "z_"}], "]"}], "]"}], ",", " ", "b_", ",", "___"}], 
     "}"}], " ", "\[RuleDelayed]", " ", 
    RowBox[{"{", 
     RowBox[{"a", ",", 
      RowBox[{"HoldForm", "[", 
       RowBox[{"A", "[", 
        RowBox[{"0", ",", "z"}], "]"}], "]"}], ",", "b"}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->"In[56]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TagBox["0",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "1"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["2",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "2"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"2", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["0",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "1"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["2",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "2"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"2", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["3",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "3"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"3", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["4",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "4"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"4", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["0",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "1"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["2",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "2"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"2", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["3",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "3"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"3", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["4",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "4"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"4", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["5",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "5"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"5", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["6",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "6"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"6", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["0",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "1"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["2",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "2"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"2", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["3",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "3"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"3", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["4",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "4"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"4", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["5",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "5"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"5", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["6",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "6"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"6", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["7",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "7"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"7", "+", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["8",
      HoldForm], ",", 
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"0", ",", "8"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"8", "+", "1"}],
      HoldForm]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[56]="]
}, Open  ]],

Cell["\<\
More to the point, here I do the same with the pattern that is the proxy for \
the buggy behavior. This shows the expressions that preceded and followed the \
bug.\
\>", "Text",
 CellChangeTimes->{3.472915228240984*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplaceList", "[", 
  RowBox[{"timeSequence", " ", ",", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"___", ",", "a_", ",", 
      RowBox[{"HoldForm", "[", 
       RowBox[{"\"\<bug\>\"", ";", "z__"}], "]"}], ",", " ", "b_", ",", 
      "___"}], "}"}], " ", "\[RuleDelayed]", " ", 
    RowBox[{"{", 
     RowBox[{"a", ",", 
      RowBox[{"HoldForm", "[", 
       RowBox[{"\"\<bug\>\"", ";", "z"}], "]"}], ",", "b"}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->"In[57]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"2", ",", "2"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"\<\"bug\"\>", ";", 
       RowBox[{"A", "[", 
        RowBox[{
         RowBox[{"2", "-", "1"}], ",", 
         RowBox[{"A", "[", 
          RowBox[{"2", ",", "1"}], "]"}]}], "]"}]}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"2", "-", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"1", ",", "2"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"\<\"bug\"\>", ";", 
       RowBox[{"A", "[", 
        RowBox[{
         RowBox[{"1", "-", "1"}], ",", 
         RowBox[{"A", "[", 
          RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "-", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"1", ",", "2"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"\<\"bug\"\>", ";", 
       RowBox[{"A", "[", 
        RowBox[{
         RowBox[{"1", "-", "1"}], ",", 
         RowBox[{"A", "[", 
          RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "-", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"A", "[", 
       RowBox[{"1", ",", "2"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"\<\"bug\"\>", ";", 
       RowBox[{"A", "[", 
        RowBox[{
         RowBox[{"1", "-", "1"}], ",", 
         RowBox[{"A", "[", 
          RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "-", "1"}],
      HoldForm]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[57]="]
}, Open  ]],

Cell[TextData[{
 "Clearly, linearizing loses some information that was in the original output \
of ",
 StyleBox["Trace", "Literal"],
 ". What you lose is the information that says a certain bunch of \
subexpressions were triggered by some parent expression. But, the act of \
debugging (or indeed understanding any complex data set) is the act of \
suppressing extraneous information until you can identify the area where \
there was a problem. Then some strategically placed debug code or ",
 StyleBox["Print", "Literal"],
 " functions can often get you the rest of the way to the fix."
}], "Text",
 CellChangeTimes->{3.472915234264227*^9, 3.4742882755764093`*^9}],

Cell[TextData[{
 "A very similar result to this solution can be obtained using a variation of \
",
 StyleBox["Trace", "Literal"],
 " called ",
 StyleBox["TraceScan", "Literal"],
 " along with ",
 StyleBox["Reap-Sow", "Literal"],
 ". The difference is that this expression will include a bit more extraneous \
detail because it shows the evaluation of every symbol and constant. Here is \
an excerpt using ",
 StyleBox["Short", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.472915257310197*^9, 3.472915287481188*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Reap", "[", 
    RowBox[{"TraceScan", "[", 
     RowBox[{"Sow", ",", 
      RowBox[{"A", "[", 
       RowBox[{"2", ",", "3"}], "]"}]}], "]"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"2", ",", "1"}], "]"}], "]"}], " ", "//", " ", "Short"}]], "Input",\

 CellLabel->"In[58]:="],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"A", "[", 
     RowBox[{"2", ",", "3"}], "]"}], ",", "A", ",", "2", ",", "3", ",", 
    RowBox[{"A", "[", 
     RowBox[{
      RowBox[{"2", "-", "1"}], ",", 
      RowBox[{"A", "[", 
       RowBox[{"2", ",", 
        RowBox[{"3", "-", "1"}]}], "]"}]}], "]"}], ",", "A", ",", 
    RowBox[{"2", "-", "1"}], ",", "Plus", ",", "2", ",", 
    RowBox[{"\[LeftSkeleton]", "450", "\[RightSkeleton]"}], ",", "7", ",", 
    "1", ",", "8", ",", 
    RowBox[{"A", "[", 
     RowBox[{"0", ",", "8"}], "]"}], ",", 
    RowBox[{"8", "+", "1"}], ",", "Plus", ",", "8", ",", "1", ",", "9"}], 
   "}"}],
  Short]], "Output",
 CellLabel->"Out[58]//Short="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2"],

Cell[TextData[{
 StyleBox["Trace", "Literal"],
 " has advanced features I did not cover here. Refer to ",
 StyleBox["tutorial/TracingEvaluation", "URL"],
 " in the Mathematica documentation for details as well as a description of \
the related functions ",
 StyleBox["TraceDialog", "Literal"],
 " and ",
 StyleBox["TracePrint", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.4729154489800797`*^9, 3.472915449358507*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]Creating a Poor Man",
 "\[CloseCurlyQuote]",
 "s Mathematica Debugger "
}], "Heading1",
 CellTags->"Creating a Poor Man's Mathematica Debugger"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell[TextData[{
 "You tried debugging using ",
 StyleBox["Print", "Literal"],
 ", but your program creates too much output too quickly and it is difficult \
to identify the issue. You want to have more control of the debugging \
process. "
}], "Text",
 CellChangeTimes->{{3.4729154664003687`*^9, 3.4729154762468367`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Mathematica has an alternative print command called ",
 StyleBox["PrintTemporary", "Literal"],
 " that inspired me to create a sort of interactive debugger. ",
 StyleBox["PrintTemporary", "Literal"],
 " works just like ",
 StyleBox["Print", "Literal"],
 " except after the evaluation is complete the output is automatically \
removed. Further, ",
 StyleBox["PrintTemporary", "Literal"],
 " returns a value that can be passed to the function ",
 StyleBox["NotebookDelete", "Literal"],
 " to delete the output at any time. You can get an idea of what ",
 StyleBox["PrintTemporary", "Literal"],
 " does by evaluating the following line:"
}], "Text",
 CellChangeTimes->{{3.472915485615081*^9, 3.472915505055729*^9}, 
   3.472917415860457*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"PrintTemporary", "[", "\"\<test\>\"", "]"}], ";", 
  RowBox[{"Pause", "[", "2", "]"}]}]], "Input",
 CellLabel->"In[59]:="],

Cell[TextData[{
 StyleBox["If you could inject debug code into your ill-behaved programs that \
used ",
  FontTracking->"SemiCondensed"],
 StyleBox["PrintTemporar", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox["y", "Literal"],
 " and then paused until you took some action (like pressing a button), you \
could effectively step though the code with the embedded prints acting like \
breakpoints in a real debugger. This can be done using a relatively small \
amount of code. "
}], "Text",
 CellChangeTimes->{{3.4729174232246113`*^9, 3.472917430127344*^9}, {
  3.4742889003475924`*^9, 3.474288916618711*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pmDebuggerInit", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"$pmStep", "=", "False"}], ";", 
     RowBox[{"$pmStop", "=", "False"}], ";", 
     RowBox[{"CellPrint", "[", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Button", "[", 
           RowBox[{"\"\<Step\>\"", ",", 
            RowBox[{"$pmStep", "=", "True"}]}], "]"}], ",", 
          RowBox[{"Button", "[", 
           RowBox[{"\"\<Stop\>\"", ",", 
            RowBox[{"$pmStop", "=", "True"}]}], "]"}]}], "}"}], "]"}], "]"}], 
      "]"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"pmWait", "[", 
   RowBox[{"x___", ",", "t_"}], "]"}], " ", ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"While", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"$pmStep", "==", "False"}], " ", "&&", " ", 
       RowBox[{"$pmStop", "\[Equal]", " ", "False"}]}], ",", 
      RowBox[{"Pause", "[", " ", "$TimeUnit", "]"}]}], "]"}], ";", 
    RowBox[{"If", "[", 
     RowBox[{"$pmStop", ",", 
      RowBox[{"Abort", "[", "]"}]}], "]"}], ";", 
    RowBox[{"NotebookDelete", "[", "t", "]"}], ";", "x"}], ")"}]}], "\n", 
 RowBox[{
  RowBox[{"pmPrint", "[", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "t", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"$pmStep", "=", "False"}], ";", 
     RowBox[{"t", "=", 
      RowBox[{"PrintTemporary", "[", "\"\<NullSequence!!\>\"", "]"}]}], ";", 
     RowBox[{"pmWait", "[", 
      RowBox[{
       RowBox[{"Unevaluated", "[", 
        RowBox[{"Sequence", "[", "]"}], "]"}], ",", "t"}], "]"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pmPrint", "[", "\"\<\>\"", "]"}], ":=", "  ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "t", "}"}], ",", 
    RowBox[{
     RowBox[{"$pmStep", "=", "False"}], ";", 
     RowBox[{"t", "=", 
      RowBox[{"PrintTemporary", "[", "\"\<NullString!!\>\"", "]"}]}], ";", 
     RowBox[{"pmWait", "[", 
      RowBox[{"\"\<\>\"", ",", "t"}], "]"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pmPrint", "[", "x__", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "t", "}"}], ",", 
    RowBox[{
     RowBox[{"$pmStep", "=", "False"}], ";", 
     RowBox[{"t", "=", 
      RowBox[{"PrintTemporary", "[", "x", "]"}]}], ";", 
     RowBox[{"pmWait", "[", 
      RowBox[{"x", ",", "t"}], "]"}]}]}], "]"}]}]}], "Input",
 CellLabel->"In[60]:="],

Cell[TextData[{
 StyleBox["I explain this code further in the",
  FontTracking->"SemiCondensed"],
 " following ",
 ButtonBox["\[OpenCurlyDoubleQuote]Discussion\[CloseCurlyDoubleQuote] section",
  BaseStyle->"Hyperlink",
  ButtonData->"Discussion 19.5"],
 ". For now, let\[CloseCurlyQuote]s just try ",
 StyleBox["it out. Here I use an ",
  FontTracking->"SemiCondensed"],
 StyleBox["instrumented version of the Ackermann ",
  FontTracking->"Plain"],
 StyleBox["function as a test example. ",
  FontTracking->"SemiCondensed"]
}], "Text",
 CellChangeTimes->{{3.472917441975154*^9, 3.472917502161343*^9}, {
  3.472917668866075*^9, 3.472917668869212*^9}, {3.476464565704343*^9, 
  3.4764645677038116`*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"A", "[", 
      RowBox[{"0", ",", "n_"}], "]"}], " ", ":=", " ", 
     RowBox[{"pmPrint", "[", 
      RowBox[{"n", "+", "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"A", "[", 
      RowBox[{"m_", ",", "0"}], "]"}], " ", ":=", " ", 
     RowBox[{"A", "[", 
      RowBox[{
       RowBox[{"m", "-", "1"}], ",", "1"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"A", "[", 
      RowBox[{"m_", ",", "n_"}], "]"}], ":=", 
     RowBox[{"A", "[", 
      RowBox[{
       RowBox[{"m", "-", "1"}], ",", 
       RowBox[{"A", "[", 
        RowBox[{"m", ",", 
         RowBox[{"n", "-", "1"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"test", "[", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{
       RowBox[{"pmDebuggerInit", "[", "]"}], ";", 
       RowBox[{"A", "[", 
        RowBox[{"4", ",", "1"}], "]"}]}]}], "]"}]}]}]}]], "Input",
 CellLabel->"In[65]:="],

Cell[TextData[{
 "Executing ",
 StyleBox["test[]", "Literal"],
 " creates the debugging controls."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", "]"}]], "Input",
 InitializationCell->False,
 CellLabel->"In[85]:="],

Cell[BoxData[
 DynamicBox[ToBoxes[
   Row[{
     Button["Step", $CellContext`$pmStep = True], 
     Button["Stop", $CellContext`$pmStop = True]}], StandardForm],
  ImageSizeCache->{140., {9.8, 20.2}}]],
 GeneratedCell->True,
 CellAutoOverwrite->True]
}, Open  ]]
}, Open  ]],

Cell[BoxData["3"], "PrintTemporary",
 CellLabel->"During evaluation of In[85]:="],

Cell[CellGroupData[{

Cell["Discussion", "Heading2",
 CellTags->"Discussion 19.5"],

Cell[TextData[{
 "The code in the solution contains two user functions, ",
 StyleBox["pmPrint", "Literal"],
 " and ",
 StyleBox["pmDebuggerInit", "Literal"],
 ". Function ",
 StyleBox["pmPrint", "Literal"],
 " has the same features as ",
 StyleBox["fPrint", "Literal"],
 " from ",
 ButtonBox["Recipe 19.1",
  BaseStyle->"Hyperlink",
  ButtonData->"Printing as the First Recourse to Debugging"],
 ", but it uses ",
 StyleBox["PrintTemporary", "Literal"],
 " rather than ",
 StyleBox["Print", "Literal"],
 ". Further, it calls a function ",
 StyleBox["pmWait", "Literal"],
 ", which loops and pauses unt",
 StyleBox["il a Boolean variable becomes true. These variables are \
initialized in ",
  FontTracking->"Extended"],
 StyleBox["pmDe", "Literal",
  FontTracking->"Extended"],
 StyleBox["buggerInit", "Literal"],
 " and associated with buttons that are used to control progress of the \
debugging session."
}], "Text",
 CellChangeTimes->{{3.472917827355352*^9, 3.472917867084475*^9}, {
  3.473000747767559*^9, 3.473000752126443*^9}}],

Cell["\<\
Often when creating little utilities like this, it\[CloseCurlyQuote]s fun to \
see how far you can extend them without going too far over the top. There are \
a few deficiencies in the solution\[CloseCurlyQuote]s debugging techniques. \
First, if you insert multiple print statements, there is no way to know which \
one created output. Second, it would be nice if you did not always have to \
step one print at a time. Third, it might be nice if you can also dump the \
stack while the program is paused. It turns out that using a bit of \
cleverness can get you all this new functionality using roughly the same \
amount of code. \
\>", "Text",
 CellChangeTimes->{{3.472917886300576*^9, 3.4729179542785273`*^9}, 
   3.474288959619568*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"pmDebuggerInit", ",", "pmWait", ",", "pmPrint"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pmDebuggerInit", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"$pmStep", "=", "1"}], ";", 
     RowBox[{"$pmStop", "=", 
      RowBox[{"Function", "[", "False", "]"}]}], ";", 
     RowBox[{"$pmPrintCells", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"CellPrint", "[", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Button", "[", 
           RowBox[{"\"\<Step\>\"", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"NotebookDelete", "/@", "$pmPrintCells"}], ";", 
              RowBox[{"$pmStep", "=", "1"}]}], ")"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Button", "[", 
           RowBox[{"\"\<Step 10\>\"", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"NotebookDelete", "/@", "$pmPrintCells"}], ";", 
              RowBox[{"$pmStep", "=", "10"}]}], ")"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Button", "[", 
           RowBox[{"\"\<Stack\>\"", ",", 
            RowBox[{"$pmStop", "=", " ", 
             RowBox[{"Function", "[", 
              RowBox[{"StackInhibit", "[", 
               RowBox[{
                RowBox[{"PrependTo", "[", 
                 RowBox[{"$pmPrintCells", ",", 
                  RowBox[{"PrintTemporary", "[", 
                   RowBox[{"Stack", "[", "]"}], "]"}]}], "]"}], ";", 
                RowBox[{"$pmStop", "=", 
                 RowBox[{"Function", "[", "False", "]"}]}], ";", "False"}], 
               "]"}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Button", "[", 
            RowBox[{"\"\<Stack Detail\>\"", ",", 
             RowBox[{"$pmStop", "=", " ", 
              RowBox[{"Function", "[", 
               RowBox[{"StackInhibit", "[", 
                RowBox[{
                 RowBox[{"PrependTo", "[", 
                  RowBox[{"$pmPrintCells", ",", 
                   RowBox[{"PrintTemporary", "[", 
                    RowBox[{"Most", "[", 
                    RowBox[{"Stack", "[", "_", "]"}], "]"}], "]"}]}], "]"}], 
                 ";", 
                 RowBox[{"$pmStop", "=", 
                  RowBox[{"Function", "[", "False", "]"}]}], ";", "False"}], 
                "]"}], "]"}]}]}], "]"}], "\[IndentingNewLine]", 
           RowBox[{"Button", "[", 
            RowBox[{"\"\<Stop\>\"", ",", 
             RowBox[{"$pmStop", "=", 
              RowBox[{"Function", "[", 
               RowBox[{"Abort", "[", "]"}], "]"}]}]}], "]"}]}]}], "}"}], 
        "]"}], "]"}], "]"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"pmWait", "[", "x___", "]"}], " ", ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"While", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"$pmStep", " ", "\[Equal]", " ", "0"}], " ", "&&", " ", 
       RowBox[{
        RowBox[{"$pmStop", "[", "]"}], "\[Equal]", " ", "False"}]}], ",", 
      RowBox[{"Pause", "[", " ", "$TimeUnit", "]"}]}], "]"}], ";", "x"}], 
   ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pmPrint", "[", 
   RowBox[{"x__", ",", 
    RowBox[{"tag_:", "\"\<\>\""}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"StackInhibit", "[", 
     RowBox[{
      RowBox[{"$pmStep", "--"}], ";", 
      RowBox[{"PrependTo", "[", 
       RowBox[{"$pmPrintCells", ",", 
        RowBox[{"PrintTemporary", "[", 
         RowBox[{"Row", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"tag", ",", "x"}], "}"}], ",", "\"\< \>\""}], "]"}], 
         "]"}]}], "]"}], ";", 
      RowBox[{"pmWait", "[", "x", "]"}]}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pmPrint", "[", 
   RowBox[{"tag_:", "\"\<\>\""}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"$pmStep", "--"}], ";", 
     RowBox[{"PrependTo", "[", 
      RowBox[{"$pmPrintCells", ",", 
       RowBox[{"PrintTemporary", "[", 
        RowBox[{"Row", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"tag", ",", "\"\<NullSequence!!\>\""}], "}"}], ",", 
          "\"\< \>\""}], "]"}], "]"}]}], "]"}], ";", 
     RowBox[{"pmWait", "[", "\"\<\>\"", "]"}]}]}], "]"}]}]}], "Input",
 CellLabel->"In[69]:="],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"A", "[", 
    RowBox[{"0", ",", "n_"}], "]"}], " ", ":=", " ", 
   RowBox[{"pmPrint", "[", 
    RowBox[{
     RowBox[{"n", "+", "1"}], ",", "\"\<n+1=\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"A", "[", 
    RowBox[{"m_", ",", "0"}], "]"}], " ", ":=", " ", 
   RowBox[{"A", "[", 
    RowBox[{
     RowBox[{"pmPrint", "[", 
      RowBox[{
       RowBox[{"m", "-", "1"}], ",", "\"\<m-1=\>\""}], "]"}], ",", "1"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"A", "[", 
    RowBox[{"m_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"A", "[", 
    RowBox[{
     RowBox[{"m", "-", "1"}], ",", 
     RowBox[{"A", "[", 
      RowBox[{"m", ",", 
       RowBox[{"n", "-", "1"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"pmDebuggerInit", "[", "]"}], ";", 
     RowBox[{"A", "[", 
      RowBox[{"4", ",", "1"}], "]"}]}]}], "]"}]}]}], "Input",
 CellLabel->"In[74]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", "]"}]], "Input",
 InitializationCell->False,
 CellLabel->"In[95]:="],

Cell[BoxData[
 DynamicBox[ToBoxes[
   Row[{
     Button[
     "Step", Map[
       NotebookDelete, $CellContext`$pmPrintCells]; $CellContext`$pmStep = 1], 
     Button[
     "Step 10", 
      Map[NotebookDelete, $CellContext`$pmPrintCells]; $CellContext`$pmStep = 
       10], 
     Button[
     "Stack", $CellContext`$pmStop = 
      StackInhibit[PrependTo[$CellContext`$pmPrintCells, 
          PrintTemporary[
           Stack[]]]; $CellContext`$pmStop = False& ; False]& ], 
     Button["Stack Detail", $CellContext`$pmStop = 
       StackInhibit[PrependTo[$CellContext`$pmPrintCells, 
           PrintTemporary[
            Most[
             Stack[
              Blank[]]]]]; $CellContext`$pmStop = False& ; False]& ] 
     Button["Stop", $CellContext`$pmStop = Abort[]& ]}], StandardForm],
  ImageSizeCache->{408., {9.8, 20.2}}]],
 GeneratedCell->True,
 CellAutoOverwrite->True]
}, Open  ]],

Cell[BoxData[
 TemplateBox[{"\"n+1=\"","2"},
  "Row",
  DisplayFunction->(RowBox[{#, "\[ThinSpace]", #2}]& ),
  InterpretationFunction->(RowBox[{"Row", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{#, ",", #2}], "}"}], ",", "\" \""}], 
     "]"}]& )]], "PrintTemporary",
 CellLabel->"During evaluation of In[95]:="],

Cell[TextData[{
 "The trick here is to convert ",
 StyleBox["$pmStep", "Literal"],
 " to a counter instead of a Boolean and ",
 StyleBox["$pmStop", "Literal"],
 " to a function that can be changed by the buttons to either ",
 StyleBox["Abort", "Literal"],
 " or ",
 StyleBox["Print", "Literal"],
 " the ",
 StyleBox["Stack", "Literal"],
 ". I also introduce a new variable to collect multiple temporary print cells \
and move their cleanup to the button press for Step or Step 10. Finally, the ",
 StyleBox["pmPrint", "Literal"],
 " is refactored to take an optional tag to display so you can distinguish \
one debug output from another."
}], "Text",
 CellChangeTimes->{{3.472917967393928*^9, 3.472918024232518*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2", "TopOfPage"],

Cell[TextData[{
 "Recipes ",
 ButtonBox["19.1",
  BaseStyle->"Hyperlink",
  ButtonData->"Printing as the First Recourse to Debugging"],
 ", ",
 ButtonBox["19.3",
  BaseStyle->"Hyperlink",
  ButtonData->"Stack Tracing To Debug Recursive Functions"],
 ", and ",
 ButtonBox["19.4",
  BaseStyle->"Hyperlink",
  ButtonData->"Taming Trace"],
 " cover some of the functions used in this recipe in more detail."
}], "Text",
 CellChangeTimes->{{3.473000772475251*^9, 3.473000799322682*^9}, 
   3.474289001705845*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Debugging Built-In Functions with Evaluation and Step Monitors"
}], "Heading1",
 CellTags->"Evaluation and Step Monitors"],

Cell[CellGroupData[{

Cell["Problem", "Heading2", "TopOfPage"],

Cell[TextData[{
 StyleBox["You are using various black-box numerical algorithms like ",
  FontTracking->"SemiCondensed"],
 StyleBox["FindRoot", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[", ",
  FontTracking->"SemiCondensed"],
 StyleBox["NDSolve", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[", ",
  FontTracking->"SemiCondensed"],
 StyleBox["NInte", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox["grate", "Literal"],
 ", and the like, and you are getting puzzling results. You would like to get \
under the covers to gain insight into what is going on."
}], "Text",
 CellChangeTimes->{3.472918065172202*^9, 3.472918325940632*^9, 
  3.47428901326057*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "A classic problem with ",
 StyleBox["FindRoot", "Literal"],
 " (which uses Newton\[CloseCurlyQuote]s met",
 StyleBox["hod by default)",
  FontTracking->"Plain"],
 StyleBox[" is the pos",
  FontTracking->"SemiCondensed"],
 "sibility of getting into a cycle. If you did not know about this \
possibility, you might be confused by the error message generated. Here I \
suppress the message using ",
 StyleBox["Quiet", "Literal"],
 " because I have purposefully cherry-picked a misbehaved function. ",
 StyleBox["FindRoot", "Literal"],
 " has an option ",
 StyleBox["EvaluationMonitor", "Literal"],
 " that lets you hook every call to the supplied function. Here you use ",
 StyleBox["Reap-Sow", "Literal"],
 "  to capture these values for analysis. Note that you must use ",
 StyleBox["RuleDelayed", "Literal"],
 " (",
 StyleBox[":>", "Literal"],
 ") rather than ",
 StyleBox["Rule", "Literal"],
 " (",
 StyleBox["->", "Literal"],
 ") with ",
 StyleBox["EvaluationMonitor", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.472918345849717*^9, 3.4729183581056957`*^9}, {
   3.472918392755857*^9, 3.472918395043095*^9}, 3.474289056674865*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"result", ",", 
     RowBox[{"{", "xValues", "}"}]}], "}"}], " ", "=", 
   RowBox[{"Reap", "[", 
    RowBox[{"Quiet", "[", 
     RowBox[{"FindRoot", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"x", "^", "3"}], "-", 
        RowBox[{"2", "x"}], " ", "+", "2"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0"}], "}"}], ",", 
       RowBox[{"EvaluationMonitor", "\[RuleDelayed]", " ", 
        RowBox[{"Sow", "[", "x", "]"}]}]}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", "xValues", "]"}]}], "Input",
 CellLabel->"In[78]:="],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
kPExjLccdSnSHfcb8/8DWow/pQ==
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, Automatic},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellMargins->{{53, 0}, {4, 6}},
 CellLabel->"Out[79]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2", "TopOfPage"],

Cell[TextData[{
 StyleBox["Sometimes a ",
  FontTracking->"SemiCondensed"],
 StyleBox["StepMonitor", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[" can also be useful for debugging. ",
  FontTracking->"SemiCondensed"],
 "Whereas ",
 StyleBox["EvaluationMonitor", "Literal"],
 " shows each time a function is called, a ",
 StyleBox["StepMonit", "Literal"],
 StyleBox["or", "Literal",
  FontTracking->"Extended"],
 StyleBox[" is called only when the algorithm",
  FontTracking->"Extended"],
 " takes a successful step toward the solution. Stephen Wolfram explains the \
difference best:"
}], "Text",
 CellChangeTimes->{
  3.472918752476548*^9, {3.474289473459217*^9, 3.474289473825918*^9}}],

Cell["\<\
To take a successful step towards an answer, iterative numerical algorithms \
sometimes have to do several evaluations of the functions they have been \
given. Sometimes this is because each step requires, say, estimating a \
derivative from differences between function values, and sometimes it is \
because several attempts are needed to achieve a successful step.\
\>", "BlockQuote",
 CellChangeTimes->{{3.472918781161108*^9, 3.472918792734541*^9}}],

Cell[TextData[{
 "In the solution example, ",
 StyleBox["StepMonitor", "Literal"],
 " is less informative than ",
 StyleBox["EvaluationMonitor", "Literal"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"result", ",", " ", 
     RowBox[{"{", "xValues", "}"}]}], "}"}], " ", "=", " ", 
   RowBox[{"Reap", "[", 
    RowBox[{"Quiet", "[", 
     RowBox[{"FindRoot", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"x", "^", "3"}], " ", "-", " ", 
        RowBox[{"2", " ", "x"}], " ", "+", " ", "2"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"x", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"StepMonitor", " ", "\[RuleDelayed]", " ", 
        RowBox[{"Sow", "[", "x", "]"}]}]}], "]"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"xValues", "//", "InputForm"}]}], "Input",
 CellLabel->"In[80]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.", ",", " ", "0.8", ",", " ", "0.8178125000000002", ",", " ", 
   "0.816037292480469", ",", " ", "0.8169240294396879", ",", " ", "\n", 
   "0.816480444471563", ",", " ", "0.8165081617635014", ",", " ", 
   "0.8164943029060661", ",", " ", "\n", "0.8164960352500287", ",", " ", 
   "0.8164960352543595"}], "}"}]], "Output",
 CellLabel->"Out[81]//InputForm="]
}, Open  ]],

Cell[TextData[{
 "One reason you might use ",
 StyleBox["StepMonitor", "Literal"],
 " during debugging is to get a sense of how much computational effort an \
algorithm is expending to find a solution. One measure of effort would be the \
average number of function calls per step. Here you can see that the effort \
can vary widely for different algorithms and expressions."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"x", ",", "y"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"stepCount", "=", "0"}], ",", 
     RowBox[{"callCount", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"NDSolve", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"y", "'"}], "[", "x", "]"}], "\[Equal]", 
         RowBox[{
          RowBox[{"y", "[", "x", "]"}], 
          RowBox[{"Cos", "[", 
           RowBox[{"x", "+", 
            RowBox[{"y", "[", "x", "]"}]}], "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"y", "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}], ",", "y", 
      ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "30"}], "}"}], ",", 
      RowBox[{"StepMonitor", "\[RuleDelayed]", 
       RowBox[{"stepCount", "++"}]}], ",", 
      RowBox[{"EvaluationMonitor", "\[RuleDelayed]", " ", 
       RowBox[{"callCount", "++"}]}]}], "]"}], ";", 
    RowBox[{"N", "[", 
     RowBox[{"callCount", "/", "stepCount"}], "]"}]}]}], "]"}]}], "Input",
 CellLabel->"In[82]:="],

Cell[BoxData["2.142433234421365`"], "Output",
 CellLabel->"Out[83]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"x", ",", "y"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"stepCount", "=", "0"}], ",", 
     RowBox[{"callCount", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"NDSolve", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"y", "'"}], "[", "x", "]"}], "\[Equal]", 
         RowBox[{
          RowBox[{"y", "[", "x", "]"}], 
          RowBox[{"Cos", "[", 
           RowBox[{"x", "+", 
            RowBox[{"y", "[", "x", "]"}]}], "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"y", "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}], ",", "y", 
      ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "30"}], "}"}], ",", 
      RowBox[{"Method", "->", "\"\<ExplicitRungeKutta\>\""}], ",", 
      RowBox[{"StepMonitor", "\[RuleDelayed]", 
       RowBox[{"stepCount", "++"}]}], ",", 
      RowBox[{"EvaluationMonitor", "\[RuleDelayed]", " ", 
       RowBox[{"callCount", "++"}]}]}], "]"}], ";", 
    RowBox[{"N", "[", 
     RowBox[{"callCount", "/", "stepCount"}], "]"}]}]}], "]"}]}], "Input",
 CellLabel->"In[84]:="],

Cell[BoxData["16.038961038961038`"], "Output",
 CellLabel->"Out[85]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"x", ",", "y"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"stepCount", "=", "0"}], ",", 
     RowBox[{"callCount", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"NDSolve", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"y", "'"}], "[", "x", "]"}], "\[Equal]", 
         RowBox[{
          RowBox[{"y", "[", "x", "]"}], 
          RowBox[{"Cos", "[", 
           RowBox[{"x", "+", 
            RowBox[{"y", "[", "x", "]"}]}], "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"y", "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}], ",", "y", 
      ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "30"}], "}"}], ",", 
      RowBox[{"Method", "->", "\"\<Extrapolation\>\""}], ",", 
      RowBox[{"StepMonitor", "\[RuleDelayed]", 
       RowBox[{"stepCount", "++"}]}], ",", 
      RowBox[{"EvaluationMonitor", "\[RuleDelayed]", " ", 
       RowBox[{"callCount", "++"}]}]}], "]"}], ";", 
    RowBox[{"N", "[", 
     RowBox[{"callCount", "/", "stepCount"}], "]"}]}]}], "]"}]}], "Input",
 CellLabel->"In[86]:="],

Cell[BoxData["49.25`"], "Output",
 CellLabel->"Out[87]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2"],

Cell[TextData[{
 StyleBox["Evaluation", "Literal"],
 " and ",
 StyleBox["StepMonitor", "Literal"],
 " are also useful outside a debug",
 StyleBox["ging context. For exam",
  FontTracking->"SemiCondensed"],
 "ple, they can be used to visualize the behavior of an algorithm for \
educational purposes. See the Wolfram documentation for examples."
}], "Text",
 CellChangeTimes->{{3.472918807870873*^9, 3.472918828015294*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]",
 StyleBox["\[ThickSpace]Visual Debugging with Wolfram Workbench",
  FontTracking->"Plain"]
}], "Heading1",
 CellChangeTimes->{{3.476806784878669*^9, 3.476806785853545*^9}},
 CellTags->"Visual Debugging with Wolfram Workbench"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell[TextData[{
 "You are a Mathematica user longing for the kinds of visual debugging \
environments common in mainstrea",
 StyleBox["m programming environments like Eclipse, Visual Studio, In",
  FontTracking->"Extended"],
 "teliJ, DDD, and others."
}], "Text",
 CellChangeTimes->{{3.472926265830062*^9, 3.472926273726418*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Use Wolfram Workbench, a Mathematica-specific extension to the Eclipse \
platform. When you launch Wolfram Workbench, you must first create a project. \
Use menu File, New, New Project. Give the project a name. I used the name ",
 StyleBox["Debugging", "Literal"],
 " for this example. Workbench automatically creates two files named after \
your project. In this example, I got a ",
 StyleBox["Debugging.m", "Emphasis"],
 " and a ",
 StyleBox["Debugging.nb", "Emphasis"],
 ". The ",
 StyleBox[".m", "Emphasis"],
 " file is where you would enter code that you want to debug. The ",
 StyleBox["Debugging.nb", "Emphasis"],
 " is a normal frontend notebook file. Here you would typically set up your \
test calls."
}], "Text",
 CellChangeTimes->{{3.472926281239401*^9, 3.472926313487899*^9}, {
   3.472926429963356*^9, 3.4729264353394947`*^9}, {3.472926472089362*^9, 
   3.472926500951885*^9}, 3.472926554351034*^9, {3.474289534357992*^9, 
   3.474289544363463*^9}}],

Cell["\<\
A[0,n_] := n+1
A[m_,0] := A[m - 1, 1]
A[m_, n_] := A[m - 1, A[m, n - 1]]\
\>", "Code",
 CellFrame->True,
 CellMargins->{{0, 0}, {2, 4}},
 CellFrameMargins->{{53, 8}, {8, 8}}],

Cell["\<\
Debugging.m\[LongDash]functions being debugged\
\>", "Figure Title",
 CellChangeTimes->{{3.472926569462758*^9, 3.4729265817281313`*^9}, 
   3.473002305390068*^9, {3.4742895552503357`*^9, 3.474289560676409*^9}},
 CellTags->"fDebug1"],

Cell["A[3,2]", "Code",
 CellFrame->True,
 CellMargins->{{0, 0}, {2, 4}},
 CellFrameMargins->{{53, 8}, {8, 8}}],

Cell["\<\
Debugging.nb\[LongDash]place to exercise the functions to be debugged\
\>", "Figure Title",
 CellChangeTimes->{{3.472926610377308*^9, 3.4729266342498083`*^9}},
 CellTags->"fDebug2"],

Cell[TextData[{
 "Once you have these files set up, you can place a breakpoint by \
double-clicking on the left margin of the line of code you want the debugger \
to stop. In ",
 ButtonBox["Figure 19-4",
  BaseStyle->"Hyperlink",
  ButtonData->"fWWBreak"],
 " you see a dot appear in the margin to indicate the successful placement of \
the break-point. You can place as many breakpoints as necessary."
}], "Text",
 CellChangeTimes->{
  3.472926656128377*^9, {3.472926692093543*^9, 3.4729267085637627`*^9}, {
   3.4730020132708807`*^9, 3.473002015679702*^9}, 3.474289592904757*^9, {
   3.474289627584488*^9, 3.474289638831346*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnduxtDqShSu6x5GJaA/wZEzoB17HHqJdkk/0FiBI3SVuJahvncO/9iJB
iEuJrCTJ+r////f//vvz+fzz8/nHv/6m//z9/T/jH9Q4Qy1/fDo1fnq18Ohz
X8sjGo0+rN0JO3bsaDT6BN1FdOdql3377E8uvPqX2/xp2+72/qZu2Lhzee+U
Wx879l+2MzEx7Z++/fnFjv1N9pj/5/iHlp/6N0n/cvMzpZ+rvPWT/WJiYmJi
YmJiYnrGFPHvSnUJu/6m8UHtuGaOY1POzsTExMTEdMXU2nN97Nhbtjt+XS5v
MqZTLPzN1c8s8CtXf9XlmN1dP3kcsGPHjh07duzYsV9rz/idMT+0xs/Uy2pn
cPIzB3u+y7Ht1HJpP7Fjx44dO3bs2LGfa0+yKtQLdxFtTcPMn8FfPtTvbLyz
dPkI57aHHTt27NixY8feqL0fzBvXx6Db6Zzt9MP2PvextsX+XNDvoL/5Sfmb
yutP8Xk4xZ/Gjv2X7Wg0Go1+itZ+llr8rX5672bj6R2cDH+E1qmNk9+2tD/5
mWr02i1p37Sr29Gs8yalv9n/2XXjqv8TQ//HnZ65cDeqrpv+1hzWn3me1rpt
c2zMNPmXf9PfxtZ58vj1Lo9RbZ7/j8Pnb9ufiaN+qcvR7WHHjh07duwVdjT6
S9rEDHWIcFh40sPMwak3/uPGxk/UMO1rDMPW7iDaTbUfanfyZXXbS//nxv+E
GsRG+sXvnHnsbT1xb/ulehq0v2n6bU3G39z5HF33c/hs05+fqbSvKfYDhmEY
hq9hhR17E/bV11z9TOX4lcrxL5XjD8o45OJrLu1Pbf/9bfuxO9vvBuHHbr6m
WvxMNfmZg+1XZvxME98M+pofNfpxzcDxdPxL6VdqqP5j+5ujKotruu2j0Wg0
Go1GP1DH4pq5eGMo/rj6g0v7vh8biWem2h22uKaMB85+XG/FNev9zJmH7iN8
TcNqTMc11Xo8p3jl8Nn8SsO6b2qY5k82NfuZ+m/rfMAwDMMwDL+UjT/oxhur
8yu7sD+o5w2i/RrY7cu45rKA9htlPNP8WHnEr5z+npxUZeVvqmBcM5CvaSbd
H+NPq2Ft08RaZ//WxDGXWKfwM2NxzRD0atZynb/em+3Z45FZf/39+pv7b/Dt
47fHbjDlR/fb59bkSw9D3f5ty2729fdfzfwH71/IrjLr5+xX7b/3eWjw+sN+
oh2NbkRraF+uNN6YnDo/X9O0ZdqvgZuvKe9X031K+47D5m9aCPibtr0T+Zoy
rimnfL7m7GuqKa655o+Owu800H7m0M0xz0hcc72/ffppu97vY375e8k3eD0m
f8ejFxfQnvXv7rf9e1NtHM8SXr82DfP1Piz1HjY9iv3LH9ftuh6s9uf6D8tn
7MH7t+e6++Z1+Y3twjD826xhfEmZP+nmS9p+39/6vf8eeiyuKf3XGtjvowfy
NXv/ebkFbe8ifmZXkq+pCvI1x+Xm5b8H9NcpsdFlmSm+2Y2peIu8D2zz/OV/
Qa/7r89DP+diTEfT/X36wvXv7H83XTfDbds7S6v1GM/zczrX3vp5no6FowvW
b33/Qtq77irtd32eWrje0Gj0+/U05vel74OP2++RT+3Ytli+putrlsRL53YK
45oZf9PWdh2kZL7mJxTXHINsnqWb3MwtP7PbePo7Hk8I3X/me55a+6C2W/X2
PLmb379Swg+T9aGUWMm9f67bzGil7O0pZ3uDimxvDB+vUt6OSdz/Ltm/o/tv
HYN1u9v+awzL8ZGwz6Noaxyt+mByS7q9oJ8j9t87/kP8/NeyqVs7+/Pb77Sa
OK3ROs48fda96zJ+XbsIX2fh86eWnHIzfwgcTwl5fO/Yv/X5tLyOOvtzaz4n
Ltzznduee73I8z0ou/1h8I+nXCJ2nGAYhs9iDePPeXmafUH9yz6frynbnce2
fLumX1v7fr6meQbuPy/vvbF83vAcx1zra4o6m2vbZsrFNddJ1M9cbygiT7M3
f3drzDP2e5sGXWc/a5zvQ8OW46bG9bmf8f/kfcPcf2Qb07tf5p46jt42zfPN
mNbbG9x+jNt5Mf2QfZb3vND+lmi3P3ZcTGW3J9e3jmfB/q/77hzvqd6rPC7C
x5HX59xO750f6RKZz0loO/Ox8I+PgalnK9eXes/x9uJu3XbNuP01ccnUdZmN
azrHR69vrvf189Vtx1j/28nllZ1fafJ1ZP/T+zcc27/OPh/a3ol50r+e1vnT
nXN92Nel317seM6vRNqfadnW/Pmwv7dsx8m5DtfrwDlekeOHHTt27DX2aUzt
a98Lt+ObW1xTWeP71PZgty+3F2tX9isb13Sfoxt/04tvdqOscyR1OK45jlu+
pvBB5fELHOf1XSGTmylqHXnvBa3r2/cBCXN/muIv4v4k7zmWv+L8BtK2zGDr
PmOPaK8fXd32gscvwf72t2Mj7+N+f+P9Wf24zP7K7VjblbaK7caWT20ndFzs
5evXL+HVlzYxW5PTqMQx7Fz/3L8ufbuvY+f509nxPblM+fENP0e4bv/s828g
P8fx61IFzmfF8Qwcl22/c9flvs8nDMNwCWsYny5a39LyA7c4nh/f9P1Btz2N
kvZNv1JxzfFgXHP7/SDjay7t6ykW14x9/xeTFd8cnPfRh098PXEfGJznfJ/I
Lplj4ubC9oPT5ifsh0TtES3nmfhraB/8PvrLussnj8myfbOfc9wmngCc3b+C
/TeYY5f2ulZcU9nr1R7X0HbM/qWOSefsQ0zXHnM9bXmxdj/lezWdc13628/Z
h+h5lvOM37cuk/oekLhu79q/0OfAxMNj+xvaNxclxzO339HtRpZneunUYcd+
r30ao3rb/wvmU0bijytP7QtfU7Qt2wltL9S+aWfzP6Ufu4zfXcDPTOZrqqC/
acU1l/0oimtG/c4tvrnWPlLmffmPv75zDzHjvv2+rGP/mHpM23NI3Y6MA5nz
Mf+9Pb9c8z/7sH3eRtg+90vZ9yexP9b6sn9ifW//A/vhtbesL3MSvTiObGfn
/km767+bZ5rTO/GubVzy+5brxGo3o908wzn/Um3+uXO8tj4W+lmh602en4Bd
7t+Wx7jNW3/Ttbf9tb39c4+Pv1z4ufTeuOaV+ye3P+cEbDHT2P5KbX2+3Os6
s/3t78z775+y4wTDMHwGa7h5kymYOKQX39TtdX5c8yPa9fI1XRbtre2s97+y
fE0L4jm5N1/7l0tM049rjiKuOWzz5fFLTGsegBvfnLb9We3utB7jxceQp0I+
u55zE7e/9bJampytrR1l+atu/qdc1svfiuRvmm3JbVv9EL7g+veYPl6pSW4/
1L/c9uTyKrF/of03mPy+P23y96x8wSk/b1h91z3+oL2d3n4/Wy4buU5y+uix
N/l+oeNnXw/KqhNwNK4Zix1b+bEFx/fu/XO3L6+XPvC90d5un/yc546n9V1s
+XzEPg+xzzcTExPT2dO4jEPuc+4YvLhmL1j6mkvbpXHN3mnXtBN8Pr/Y1/fJ
g36mqOOe9DdlXHNpX/qVa1xTzPfic6M9Xx5fGd+c4qoFz9A/Wz2SwfKf/PfQ
TX7mEJxv+2PGtuaN9f56ax/cOJ+MS/bb+8Kmb+b9YG1zwnTL/VUFjk9eS8zb
XPrSbe25793K7c3rbXY1lu9/KFdQY1D2e7xyffdddO9ZfUCntiPP35G8h9Lj
LbXZ7vw+tvPeWWefT7kL9jna3tUJxufda9/yj+3vR2t8cHCvy/zxvnL/SvbH
9hkT12UnfESxzpqHXXC+U58/u1/xz/ee6wXduHafa6LRN2oNt35mCqF8zbld
J67ZmzFMWf5mDazPSyhfs3Pe81lvHvI9oIC/qX83MhTXXPdj2x8/X7N8suKb
y/PzqeaRWSYU3/yY583+/E6OHZ2Js23LdnL9bjtPZr/ke7/e1G1xu4+7XGQ9
k0f7cfqxbU9Z98/d07J9d3+Lt2eOx7ofgf4E9n8wvqPR4ibeD8Jv7wJ15vvR
O94xbWoEdIHtyOvfOv/meJTq3cdeBc7tEDyn7vVn200cUEX7F78+1Rof3Prj
X885fen+le6PuP7c661zrsvk5yt3vrsl3zT2efjkP99MTExMZ03m3ujGH7sc
99t6a3uJuGZN+167fdiPdd8n936X0mUrT/Oz+pvBuObqb6byNUX/ksdZzf6t
2nvvz7eP/Xz7+tVlsOO10/P6xRccljhV7PlryfbXeo6B7YTjTW0cH+zYsWPH
jr3ELuN5oXqX0Xqaa/uxuKZa45BdoP1PafurfzeItjdf06qT6fwekPL8Sz9P
U0lf09qejGuOAf9ym9b8y+FknWsf+6X2Xo3e823zfrj2C90nAOY5qBefymx/
SGxn+tw0enyas/f2ctixY8eOvQ37HHsM+3/F/mZnngltvqZuXy1xzT1+rNt+
LF9TyefoXef4m13c3xT1jixfc9reuO3XGtcc/bhmdXyT6ZFTNJ9ieSZsPec8
cA3I/IWdeRtMTExMTEytTf0gflfC3OsW7npbf1ztsG5n/b2z3uS0qbUdt73S
9rt+rhvSD6PVtt7gsPiKw/L7PyGtVv3HH4e7+bckrd9pK8nXLHkf3Z3n+v+1
diYmJiYmJiamh0173tmJoQ/4Sme0rS5se5Rt1+ZrevHNiPZiXRmd82vRaDQa
jUaj0efoUB2iq9h9Tq6nj/wdRmNXDhe0H/NDYxqGYRiGYRh+Pnv+pavdfE1l
c4dGo9FoNBqNRu/QevpscU3zvtL0XF8WWh6Vo7Fjx44dO3bs2LFjD9vnGOa4
/D6lyNfs50lZ68MwDMMwDMNwOdvPz7f6mjKuqZed/lVoNBqNRqPRaHS53t5H
knHNkbgmDMMwDMMwfJhj9TXn+vd6uXFZfvqjWH8+n6rlz9J6u3du701aHzuO
3/v19NlsqD/o4/pb422NNtddK/1Bo9E3fv6T+ZpmOd9PNX6JnMx8ybH1azm2
vdByZ/ejZLst8Z7+HtmvzT+9Z7/O6Pfd67V0nZ11vs7o7571jvb/m5/n3PW7
d9z69n6UnJe7xgkYhttjP19TvIfe6eXGadnpX7VpK/61w16rS9szY2BM127/
6Prf0G78wIsnnHy+Sto/Q0vfwNjvPj9Xbe/sz0tKn3W+1vhoRLfa/z2fj7N0
7vrde33def3Etpc7/3ddH2g0uj0dztfMv4deGlc046f9fLbeL059b8/FV6+K
u4T2KxenyB2XM+It7nEO6ZLtxs6bO7+mvVB/avcrdrz3nI/Y9XPGcbryOsvt
b6p/Z8X1YtdZ7DzFjtsZ19tZn4/U9XLFeS4ZL0qOS83nILW/R67Xms//Gdcf
DMPP4S2uqceA8vqa7ngxjRnKHk+kNuu7Ota+a/fHp3B7ue3H2k/ZY+Om279c
f1Lrm+3I7Zv9rO2/PD6ynZLjlTr+sfNnby++ffv+V3783eOT2h/3+NZeH7H+
lS5/dP9Kr+9U/3LHJ3V91Hw+3OvT9Y9Kro/Y9Zf6/Lr9/8bnI/T5rd1+mOuu
X9N++fJln5/c8Q2N/6HPZ2j/zrr+sGPH/hz73vqase+j9ngS8Ul3+MW57aW2
v2d7uX7ktls6X7YfOlZ7+pk63un7Q76d2HIleu/+hNoN9Se236Htl5yXkv0/
6/pOXWep/SrpX+35OnqdlV4PJftZ0v+zPx97P7+113GMrxhncnzGeCz3IzSO
xcaBo+cThuH2eW99zW18sO1yDJPaXb9W57Z39fZj7bv9y/UntT/zssf6J9tJ
9Sd3fEv3z91eSh/dP7m+259U/0Pb33u+So/nUZ27fo/0L3e+9pyPmvZD12fp
5/tIf/d8Pmo+v7Xbj/EV12fs87L3+k2NX7HzE7MfPZ9oNLp9vbe+Zuz7cO57
85nfo1PtH/3enuvHWfEG2f5Z3/dT7eztX+p45vodi2ecsV+1/b/6PJ51vT3x
Oqu9Hvbsz1XX0dHPx9Hx7I7r86zznjsvuc//mf2AYfgZvLe+5jTWKN9ufV9e
5hufwPv+Glg/tT13CrWf2n7N9uT+xPrvzi/tT2r90P7VHi+3PyXnI9e/kvVD
eruPHK+vFzv+uf6G9i93/ZTs/5XXt3s+c9ef6Y/sf2z9UPtnnI/c9eceX7e/
Nft/5HjXfD5in98jn8+S9mLns+b6DF0vJedvT//d9lKf/9jn7cjxRKPRbeu9
9TVh+I083w+/349fYY737/HmX7bRHxiGb/jcH6ivGZpiyx/Vd2/P6NR2r9je
E7V/bK7ZXuxcHD0fd15PZ+lvfR6kjvehfP07+xu7XlsYT542vqT7nj/+3+4/
Go2+V++trwnDMAzDMAzDOd5bX3PT2LFjx44dO3bs2LGH7Xvra8IwDMMwDMNw
jvfW10Sj0Wg0Go1Go3M6V18TAAAAAACAvdjqazrvoWfqa6LRaDQajUaj0TlN
fU0YhmEYhmH4Kt5bXxONRqPRaDQajc5p6mvCMAyfw8MwTH9rbqEfZpL9kizt
LRw/GIbfycm4ZiBfU/89j0uzdu1b+/vsaugOrZ9t/8BUs/1oGwf7v9rFedh7
fLq+O/34HrH3Qz92f9Pnr1/d9Hc39mq4tX/6b90P05f570Gv9d3jEz3fB9tX
3Tj8HW/1t596Gr3jXda+ubZrtj9tU29v2e63rz/381u7/jp/HMPz7+7/YhuE
jqF2fMP+TPt0PRy4f+vP6/w9xeaz+6/W8aCt44d9v722vqa+rgZ9b5hb8exH
2PiZm795vn+9fi6WYxC7P7j22u/9nl+w/C3jCUf3Y9uXfe10fZ/Ud/Hk1/35
O4PSvuXnj+drTLP0+a7uh96e9m91PwbVT9Pmd3annLdvnm+P9T4N3aSNjzn0
9cdZ/fWr73txvRfsz/I9R2L2Pb9zfI/uj7k2ts+71N+5XjTMdSPHo3Va969+
fNvXH/94XbXdof9ceh85chy+fV3suX9P/RbXUmhSw3CoX9nr5UD78Pd5X33N
0dGu3dZdr30GtXJveDDj3TiNC8OwxNmWe2Bp+zVa7oO7Py7cZWu2F2rb+txU
thfSouXq9fXfXbeNxRpaH+nPHt1P/t3iV6p5+/3k623+pvT5ruqP/s/0Y/pO
/Qfjb5pJ25cr9rbjI/WGE9pTSxxznD+X87xhnVfTnn+t55Y329i2O5rjLuKc
Fh/d3yrtYt/67nPq0HTV/uTGNm8PL+qPmYZB7vO2LTn+nLV9NSy/t95f//v2
e46H+/f9/RmrlnfjmPP5C8c3jb22f0o8T4m128L5Q+/Xufqa9tiwj7XLOvmW
C//9vzzXGedJ+5jrmLNM2n7Z91L3sx7+HMp5e+Oasfa/kR+l45ban9T8mXhY
Y5laq+He/kz+Xd+tvqQ8RnN8c55vuLswTrE9L7f7sfm5nfB32/ieuJtFPNP4
mcbPm+ONF5938bxcft5Tek+89W5WZkAbl/HDGQMk7okjztjiQfY4pIS+rD9u
7EttNtO3U/db+JctxjW346+sY9EyK+f8mfkynmnHz/ddr9v14cdLySd+PtfW
1zTXmNGuPaTduKbmwcQ11bhcz90yTgzr84/S9mv09lkfrb9D8Jat2J5y/p6O
mzP/0P6o0vw9X+v1uiUHUf83+aDD7HdqfBZ/9IrjL3Uv/Dvt07nnQ8c3pX36
O5tPuE/bfbF9BPd5+lXH46rzbWnVidiliCuOJo6Yy5dOXO+ly6/bXyalbO1O
0/hw/fXof37r1nc59X3z8Oe/sD8mRq9U3O+9sj/mfiHZ3m489lu9v24cc7mP
rM/ThT5r/2I6PvnXxJ3jSe39O5SXmbL7+Zt17W/XQyBeeuPnH32+rq2vuSff
Y/5+OY8APi/9Gcf5Gbq+r09jQjqO8fl8vKmkP6G8JXk87HF6s5d8r5Ljaapd
2f7e/J2j+XtrPFMf61Gtn/GPnj/M7euY46dLx7n2ngfN6/s/VszSho5vGnuv
+uV9pvP7o9s1k+trTn3tt37WHOcjx+fM8z308zNzHbcczLs4y3mfn1N3c7yz
st35812X36jE9n2elxtHM14Ny/7n45qhY33L/ig7LiPbmfJAnBxxjfrxpH6c
kOPQNC8Q37y6P6H330Pbj42P5df3J3D9bPbRYbP8FZ9bOY65Y1pIl+2nWz/g
SPyw/P5dko8Zim/W9CsWHw3pPZ9nuA3eV1/T/dy4dmfcMHmYow1Xz3NE7lim
fXscKOtPaBwIs79s6f7abW3rDoPythXafr798JHMLT/5S+JZZGf+XsflOdZp
/NDS/rjnoao/y3tBoXjitnfyHZ18PuGe/nRLP+Z3g4RvMNm6ZdqeoZfs39Hj
c/R8Gz0M2/ncrkXj7/1N0999dX9C13LR8uYYun6muQ6Xd+LXGNCSs1nSH9/P
vGF/Mhx7T7B0vJJT6f6YMcxFLL55R3/2no/s8Td+ZsVU8j7AnvuLPb8ctce/
pj++HouXD8YrI8tH45/Z8SkdzyzdPrptfUd9zfk+Ibc6+tr8pZZ4QmH8qDZO
5MY1Q9+7Jdv3i8x+KiX2zxxvV/uf+2079/CWr7m992ueDc/v4gxTfLOm3T3x
usl/W/y7UDxxOu7Lu+HGH/0U5hPW9sf4sTK+Oh+rrf7Skffh98Yzj7LrZ8rr
28Q698Yzj4wH5n2g1d818cvexFzGxR+ub39vPPPYcZ6f8bnjQcjPnPetPC5V
Oz7IcSvESoxtZv6V/VmPjzs/007pdpQeE6Jx8jDn4ppHPre54x/i8uN/b96i
9PNS8coj8cftvZ9we3fuL3wd31Ff07xfbqDGFJZrK5qf5bdfY7fHgdGyp7QZ
G1PtSy6Z1uOxZ/9U4D5Wsf78vHh+r9rEM/slljS9c63fG+pmH+/M4y/t0s90
44karp9p/MGzti/t+j/jSw4mvrvGM+ftj/p4LdNoppO2n7VHz3d8/WGJD0b9
zekefc75NWNK0fqTvy79zN6fb2KZpv+e33ny8XXs2+e9fH13fN2Xr3le/93r
xX7PwkbJ+HbUrhx7mS68/oY6fzP+PsB5+1/Ld1zftfdvP64Yur/X5GvK8cl5
v9y6fgPvn9/4+cd+vv2O+pqDjGsaHm29zlnimle9DxvKF7Luv3r/lD9eFMc1
d4wz23p1+3Ekf++z1Dua8jOXWKZm8174RzxH3/zNc8+Hyb80z6/Xa3Qct9qa
J8UVS9jsq6zpabY7XRud7ZcN3X3xwF3ne8l/ntZfjq+MFwwn1VPdl69pYpvm
bzM/5R/cU3/zSH1N49fn8hLviNe4k3w3Z5p3c3/MdWz6Myp73HW5en917rmI
l+vYpZyU/Pum/Uw+L9u5n8fHkfPyNWP5lXv6FWt3T3twe3xHfc3t2s5AxLWG
YX/+WErP02hprxvrcmY9d9n09mT7ZXrf/ogeV6+vY5rz+z+m7tGwvG89LDHP
e+qZyVpDJq45xzPle0O9eC/o2v7o/9zfDTIxzCmeOWxxzWh886L+bShYfqpV
OljrGt9yvi/IeurH+ud/hjLLD8LP9OKaauv3mscp3w863t+8dlG3fiyeKduv
GU/OOT9+nNXt49392bZ54ud3jW8OVv2jK/enqn/KvQ9/oz9j1fKxfMlYXuWe
/rntJ99/b+h8osv1HfmaMq45WluXM5znp5fW+XM/R9sYEHtfck9cU4n1Z9sY
tPvjz7Xs/V5Qp9837+c8zr4Xfub1/ZF5kiZXdHuuLvzNJd5453Faz6uOCWrf
vFvqBelrRGh1Udx3N4t4pvMhW36PUsftrq+jmWLr+b55xi/fVwpwK78rFN6f
iH/paIM745pGy7Fu/ftAHPHw8Vq2f8Xnda1n0sj1Eb5evt+PFLvxzO36GaL2
XfFoJ4Zpjg/vn7+L76ivKfP9fZj7iTP3onp6SqlVq4QOzc+1b5Zb/VVXD8pm
ZztV+6N8f3jv8THP089qr1Zv/uYcvzR1NNf4Yj//Lvpd/fH03/GZ/MqF+8/H
0sr83tKV/ak6P2E/c4719Fs888T+lXw+sp+fQcY5zfP1TZu45h3n34yRdcuP
02fb5OEYKHc98/fF12943P/C5yfRv93jX0bLOpqt7O944f7WbL/0/h2Ot+S5
tn9uf3K6pfOJLtd31Necasz1cwxj/j67xSvUEq8w9n6p/ydr85zJVr7MWBbX
3HTm+5lSgfZsv1L+Vpu7fO1+HMnXlNzdmHeY4l7N75nrWKZhE8v8Zr/U4k/q
eMmwsKVvOH5V59v67jbPN37bFfHMvfmNwf3s7XjnVhf0vt8N2vX77uJ+644f
If5Gvua3P0fw97nm/h36vR6pj+Rnppj8zHfyHfU1W9JHpyva37s/G/YfD1Nj
86rj/Qrd98K/7Fc/0+gm8zVv1O648O3+fGN/rhpPjuq7t4d+gh6LlnfzJWP8
/f1BP0Hfka8JwzAMwzAM/ybX1tfc1jcaO3bs2LFjx44dO/awvba+JgzDMAzD
MAyX8r76mmg0Go1Go9FodF7n8jUBAAAAAADYi9r6mmg0Go1Go9FodKmura8J
wzAMwznWU69rlS6Tri3s6f637UMD5wmG7+B99TXRaDQajQ5r/bf2pUAc+nDp
42SOW0vnD40+W1NfE4ZhGD6Te+f34UEY+niZ35Jr4bzB8FX8lPqa02/GfXH7
Tdr17/0On5lb7B927Nh/0k5MsxyrX97Q+cOO/Wz7XfU1B+0THVhf/2Z3Sv8M
G/9ymdTiZ369XzAMwwuH4prz79p3f9z93Q+6Vf86en7/G/4BvqO+ph5bNIah
27W+/t1V/bvd8vdXtd7bn0dp4VfOB8P3M42tif6iH6u7fghMyuZBzX+vz/3a
6T+6HR2Ka27jv4Aa1vvDr8L45S2dPzT6bH00X7P7c0r1PeizsJ7Mu3eTq6R9
omGJQU7fZ8vimzpuqf3Jmbu/vsztz35nt/id1/nhn8+xOOwhNn5k/9nimP3c
n78Zws9Uq/3K/uhj8ZXj8AD+6nVyMmsfsp/ejR1X1tN0Sf79My2p5pHj01/7
+YOffT3G4prr32qbp9RvxzfJ14R/gY/W15T3Jzmp0XyPVd40DJ9oe65Wao5h
ztLEWv78Tj2WqcUn7bpke3r8lVNqe0ZPY3ZB/87Xy9/meE2+ZWfHMY3f6cY8
nfZC+2vm5Y5XSl+1/2Y7Mb2nPTld0f/S6+lqfcb+FcU1+y2umeuPdezH+PkN
nZ/Q/txxPkM61v+zz98Z+1d7PV51/abimrNvtcyc4pr9NM4F454/ADtf8zvj
Bxp9tT5aX/OzxjUHi9e45p9fNI0haph46Ou/d8/Py+d4ptbTf4vfOQxLrHOJ
g4bWd+NyJXG6b8UH9HGazo8+Tmoeg9fzpobt/E3xzG6Lf0b2290P2/+MfP/Y
cbzO4LO3c8d+tBJHOqMfUw6dGudvOdPl1tta8ByHqjuPsfMRu05buS7v2N5Z
11Er12MorjkMW97TQpZWqvfWiSH0XeapIF8T/gU+Wl9zuh+JudoHVObvZf7s
Xw4Lp9sz2jw/n9YfZr9yHZeW/wbtby6+Zqo9Lx4x2t/n/TErHJeZjtcylod0
NH5asL+WtvzNTsQvnbF4WW5c4gFue248JhSfCfU3FI+y56ld67vH320vFgcr
XT62/yXnK2SvXT5mz11fUrv939te6HjktPscc3CuN2XZuqrPm5yfuz7dz2du
/T3HK7Z8aH7ocxBq393/0Octdnxi40XseiwZn1J2s71ce247pddXMq6p5nuP
WUaZ94UqnqNv5zKsnwTyNdG/oI/ma07vFU7tzq2a+9PqNi1b036mGsJxxxTL
fE21zNc+pp7UxL3wQyP+9MePR8gx9sr5+78HCH/Te34+br7nFAtI73eMc8vH
jl9uOTlfHoe9242tlzved573I+2FjtfR/u1hE9c0n99Bfo/0Ps/pOhCub1Ky
/7HrJncdXvk53vu5SF33sevS91vLj0/N9XjG9Za7nuJxTXM9zX8Mne0jujqG
nK/p+s2p+bF5ofZdrmkzBvI14V/go/U1p/uT+NyoYVi1y/b9ybSXbl/jM/mb
s2+pJvvsYxqfc35vqHPqIIn1zefdGb9H5Y/xclyX/ZPLy/b95VVw/dT+xe3C
3zS8vo++xTtj65v9dvsnj4e77649dPzkeJtbXx4v9/7rjsf2fSwwrgf2z2oj
sf+h8xVb391uavnc+c9fL/b+5fpXev2VXV+2ff3eOFuX39EbZh9h4WHlvrj9
2P6V2tPnu+z85Np3x4NQ/2PXp3t9u+unrgfXHjs/ufElfj0eG79iy4euH7l+
MK655N0b23w/GJZxTo/v23tCJs4Ze0c95gumbCG/r3RZd8yLrZ/rWwjU18T+
C/aj9TV79/7U9+u9SN6X5qnLthdi7UOa5+gyntn/tdcPvaiHpCa/1F1/Gx+3
+fZ9wd+uOz+2fG7+nv21eRmHnLqa0/gs3k8PrS/32/XzQsclNz+33FXbTZ2/
1PHec95j281dJ0eul9B2jl6Xe1jf24defm4HM1ysn2+j+0xcM3c97Nn/1Pk4
63MstXsdHPlc1J7X2uvdbf+s8WvvuJbK11TLdaSMrzkqMflaBZ6te98rEraY
n2jmhXTt/JLtx0C+JvwLfLS+5uZTbvenGPp1zIi3F9La15z72q/+5iD8ze09
9fD65rMe0mbsdLX1/X207yM1y+/ZX0+H8jeNHj7R9bcxLnw8XLs7P3f8StaX
xyvXfml/So93rL2S9Uv1GddL6Hgdvf7c41Wiey9fM/5Zlu955NovvZ6kPut8
Hvm8utdfavuh5Uo/j7nzF9r+lddjyfKh/ZM6FNfsTVxzWc4859om18+cp1Ae
p/TfSvw/177Xpyz1NWtAvib6F/TRfE03rrnma1pbmbnv6+Oa7u8Dmefps9/Z
T5xrx/+OGbev23HWKWkvt51jbOdvrrmahXHN2PzYfkod2v/Q+jH7Gdvdc7z3
nPdQv3PXyZ7rqPR4pdaLLb/3Out7kU832r6mGm2k4polxz2nS9Y7cvxLlk9d
t6XLl3weQ/007cXOd+l1VXr9lFxXNddXMK4pry+1+JrL83OblaVjcc2YTtnc
ebFla+eX9i0E8jXhX+Cj9TWn+5P1ucnHNVPt5bSp4z7N27H+XXoaX05v3/E3
9ZH38jXb2H/0rLf7fBv9SWnzvdEg5C+stj6Wr9mWbuX4nz0eXDO+nHc8Y3FN
HYvolxp2br5mjLf6JRtyPp7tG8fnlc6P+Zq12wqB+proX9BH62v2nXN/6p06
Kcq25drLcSgfsxVOxcnO48D7Qo3sPxy4Xg/EGe/mfqkzpln7nTn97f4+6fif
3Y8792vPuJb6nmIwxzX1TWZI8tt/U4h8TfgX+Gh9zfm+01v3I597cX9Kt5fS
3cH1X6PV8p2/N7GNxvqHRqN/Wofimi5M3WXLvwzoX/A1NVo6f2j02fpovib8
LV5ymb7eDxiGYZtL4poaup6m9iX7hUP67SBfE/4FPlpfEzt27NixY5d28645
yIP6mth/wX60viYMwzAMS9a+pvktShCHec/12+cLhq/mo/U10Wg0Go0Oae1v
zr8/Bbu8/VZCO+cLjb5Kk68JwzAMwzAMX8VH62ui0Wg0Go1Go9ExfaS+plp/
m3Ke0Gg0+pua8QqNRqPbG3/31tfUNXdmn3Rc/VL072llflPOuT7Q6G/o2PVo
fgMBPAuML2j0c3Tq87onX1P7r6vfAf88K+p8wg2x+/0aP/PZYHyB4edwLL65
+g0V9TV1vNSKb/Xb8u587O+36+tBXh/29eJfP9ixX2m3r0dxfYJHgvEFO/bn
2N3x19j31NcciGvCgodMngYM38nu9bjL11Tv/l3EJ4HxBYafw7HPqx/XHL24
pl52+lfNrNsy9plHS/d92o5+lzb3cnN9uNcL+jd03/d/10Kf5Vx7pe3E1nev
x6yv6fqVw5+efosbtADGFzT6ueOvse/K19TvBbnPU7tN94NtV39j9/Tbtn+T
0tOfTq0fZOzN2nPvn8G/wXoMymFe5tp23Pw+lfM1h8/sX05/az+z27RZpH//
73K3CsYXGH7u+Gt4T33NLa7pxrtMXLO37NrH1NszrP3N1PrxeBr2s+36XJnv
KaHzaKZU+7H8DPRv6ZIxauj7bHvy+7O8PicWOrZ+db6m9iN1HFMZP/MzsR6n
tM+p8DN3Q56/mC133TC+oNF53er4a+x76msOS9zS+B0fxw/Rz9DnPg5L/7q/
Ifsz9l33N30mnVr/DK1xZftv6W/fb/Ebfa6MXV63Zn6sPfKpYM1ybNqmzptX
0k4OqXaK8jVl3PLPt1TLc3O1xDhX7hfbyfh8fsN/dceX3N8hML7A8HPHX8Pr
89GK+ppWvubgxM8GJ19z8OOawxrXDK/vwrWX6Hm98uX36hBa7q+r3XiD+f7i
Xlep9sinQp+pq7+fB8ankPYbWZ6dr7zkaQ4injks8c0EtN8opxJc7Wu24suW
ji/pNhhf0Oinjr/Gvru+ZvS57JavabTqt3xNk7OZWn/qV0KXsEbN8nv5rO3c
1d/g+UpcW/Hn5+L8Uv8OPpEP5wvV1Nd0/M0pjjmNU59l3vw8fWPf73T9uhI/
rxVf8A7kxpccGF9g+Lnjr+FkXHPx8+blpz+m9aa4ZiJeNvknB+JtGjEtEYsv
bv7pvvVLls/FI0Ptu+1N2wksn7LL7cX6G9p+bXxTIxfPDOdrKud68a8f7NhT
9qLv1dF8ocr6mq4fOczvLqqhF+8JLfZIHaSQ3yjnhWKesVhoym9NrePOlxyL
uZbEY0Pt7vGTY+NL2bqML9ixP3X8Nfbd9TWTcTInrjlcE9c080N2jVy8MLZ+
br67HYlcO25/3H6m7KXtxI5XikPXl5unGWPyqeAz+ZZ8TQ215GUaP3LK1+zW
8WqNdyb8TI2UrxnzHe+aX7tebD9Sf5cgNr6UgPEFhp87/hr245pjWX1NE9ca
Zh9H6ilfU2gVeg89sb4Lafdsw8ayPWmvXV/ODy3vtuf2P2WPaY0Su7t/EiX9
CZ+v+LWlv7/k1iefCn2mLv1eHVs/m68p3zcf+/lvw8LfNO8Lmfkx5HzNVNwx
tPyZ81vwNXPjSw6ML2j0c8dfYz9SX9N+nmrna7rvoffLe+hD13nvobvrT/0K
2Nf5jg4tr2E/Py9f35s/hPvjtl9ij+lQf0N2d/9q++PqUJ5+aF6qPerfwWdy
+H1Kf4qtX1Vf0zwnt/zNOd5p+ZuJd9Fr4pqxdd7qa5aOLykwvsDwc8dfw7vr
aybiZSZf0+jge+iJ9TVi8c7Qcu58+Uw5tVzp/Nj2Q/HGXPuyX6F4Zs4eaie1
fuj4SnZrj5j5Mt7gnk+XqX+HbklX19c07wc5/ub2bvriZxbma5bkX7bsa9b+
nUKstpE7vqTA+IJGP0cn8zV1fGpPfc1IvGzN11z0YL2HLuprRtaf+hWxuwjl
Tdp+oh8fzK0vt++2a/Ur8Zx9z/bl/qfs0eXc7cbimYJl/S3XLutzxdYnXxNu
jWt+D12Zd82tvE3xXvpQ9k556h2bmneDUra97wa5bZe0V/N3CnJ88W3b+JIC
4wsMP4dPr6+ZiHOZfM2YvXXWuKr9qe1G9vMsJp8K3ZKu+j10GauUvmZIN4TS
Z/NH22sBjC9o9HP0JfU1ree0z9YSV27v6va/oal/B7fEVfU1XYTimI34miVx
0DPaaw2MLzD8HL6ivuY69SP6hzX177C3ZK/O15RoxK8EGxhfsGN/jv3s+prb
c9R0/Av7++3kU8EtcU2+JmgfjC8w/By+or5maOoj87G/104+FbolXZWvCZoH
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
aMpvTa3jzpcci7nuiccC8GsgXxMAAF6Ur1lYX7NfnoG7vpKe5lzO0rim3t4c
tzRTToeQ8jVjvuNd82vXAwDYoL4mAACknnOXfY8+lK/5hfqafcS/NdvPxTW7
fvYzRzW/H6R9SL2mdlFT3O30NVNxx9DyZ87H1wTgGKivCQD4dVybr9lmfc1+
MHEFOQ0r5+Kak884vXfej93fxvTig95+kOepS3SqJq4ZWwdfE4A2Qb4mAAD8
Xn3NKW4p/cth8zPnZ+iZuGa3PT83vqQSfqWrU36mRi7HMmTD1wTgGSBfEwAA
XpSveUN9TY3ub/smnjnVM1Lzu+0h/SkoLJ97x6bm3aCUbe+7QW7bpf0GAFBf
EwAANHLvn/tj2xnxTbPu/fU1z4DxN3PcKkqfzR9tD4BfB/U1AQC/jmvzNRN6
wTfqa/4qSuKgZ7QHANhAviYAAMTjmuH8TGuOmP+c+poAAHAXnpCvmfpds5Qt
tY6ZQvoozmzranyjn/J4f+NYfXv7LSG27793TF6Ur1lYXxMAAO7CE+prhu57
R/2FkK9Zu/4R+9X49vZzcPv3DX/zm9v/NnKfn187Hhrx59xl36MP5Wt+ob7m
lZD3j3Ma7M9tDwBwK1qvr3mVT5fzNXP34Zyfm/NjY+u7/Yrt5xn9S/nYodhv
6fZLkPNtSvevZF9qt1/Sdu3xzf1d2n7p9VGK1Hq/5G9em6/ZZn3NZqE6Ww+d
Pw8A8Ci0nq9Zci884uuU3rdr4z4hH6G0/ZRfclb/Svvi9qF0ndrtHj3+Z27f
6JQfnppX0tbR9lPXRyly6/2Sryn9wXi+Zip/83n1Na/Eobjm8Nl8Sx3PDPia
asD3BOBJaD1f8xu+ptG52FpNv0O+Qip2VfL3kf6llitZN7f92vVr2y/xv49u
P7Vuat6Z31X2Xh8lwNeUeFG+ZmF9zWZhfEs9Gb/zj1Xf/U2f2Q4AeBRar695
1f3u7Lja0fZLlv1WXPOMdVLLl/T9Cl9zr/1qX7Om/SO+Zg6/5Wum4pnrEkl9
KF/zofU1Y6iOa8q4pfYnp9++FP7mn3+pDPfX1BaiZhEA16H1+pot+JolccMa
fbavuad/qfm1vtTeuOaR9p/ka9bGnXPr42uej2vzNRN6gTv+luVrhv1b3dYj
45pT7HKJWy7xzOlZ+eJfmrim5hz2/JbP1b4mviz4ZTw5X3Mv3OeSseeUoWVS
7extP7Ws+/cZ/UttP2YvPYYlSG2zdv/c9Y5sP2QvPX65bZSc+9z6qetlz3HI
4Zd8TY18vuYY1Pbzceprzn3ZufFhi2OOIo65Pj+Xz9WnKfx++p7fKccXBOA6
tJ6vGe4LAM/C067hp/X3OF6Urzk8uL7m5F8aX3OOa6qhH4e+s+Kd1vtDAcR+
T13+XfM76SXt1Py2eu1vuMeWkRqAlvHU+poAtIxc3LJ1PLHPRxF/zl32PfpQ
vuaeuOYD6muW8izEO0Frvma/+ptqkO8LpettpnzNmO941/za9WL7kfobgNbQ
en1NAAC4Gtfma1JfMwkl3vux/EwT17Sn1R9NIOdrpuKOoeXPnI+vCX4Rredr
AgDA9aC+5pnYna9p6mmO/RK7tP1OK/aZQE1cM7YOviYA5+EJ+ZoAAHAtXpSv
+fj6mp+l7lEn/Ez5fvry/LwiX7Mk/7JlX7P2bwBaQ+v1NQEA4A7k3j/3x7Yz
4ptm3R+vr7muKN//WZ6ny/eBCuu4596xqXk3KGXb+26Q23ZJezV/A9AaWq+v
CQAAV+PafM2EXrAvXzPs3z4uX1NiEP6SiWeuv1fp6MZQ+mz+aHsAPBHkawIA
QDyuGc7PtOaI+dTXnPty0sZDfmVDvmZJHPSM9gB4OsjXBACAF+VrPrm+pgt+
+xyAV+AJ9TUBAOBqxJ9zl32PPpSv+dL6mgAAoEF9TQDAr+PafM3fq6/5rd8C
0L9lqZ8/6/pIE6NXDcA3Qb4mAABQX/NbMPtey6H7hfarul5t06DQ+nsJ+Z/g
yyBfEwAAXpSv2UB9zaq4phPbMPOWP4LvAm2+ubPa0C1+1mD7XD+udXwTgG+C
+poAAJCKZ65LJPWhfM2X1deshXWslfnNoMXPtHxN6VMn4ppufM+dfsxOXBN8
G9TXBAD8Oq7N10zoBW+rr1kT19TLzsubYzQ49dvnvMP599KHrf1QXLPvbB8r
E++Tdo2UPbf+t+2p/pOvCb4N8jUBACAe1wznZ1pzxHzqa9ZijVFO07D8FqX5
3SDxe0H6dyvFvqbimi6i8UChp+UuzJ/8ZvvENcG3Qb4mAAC8KF+zgfqate+h
b3Hdfo1lzvHMOaapeZ3/53/m8jU1pM/l6lB+o71MW/mWJTrVf+Ka4NugviYA
AKSec5d9jz6Ur/my+po1sP1G+fx8nobO/P1Z8zdL4pq2L2bPkwjNc+eXtJOb
Lzm0Ts62Z5tmIq4Jvg3qawIAfh3X5mv+bn3NEl5ztpTtT86/f24m4X+Orn+6
weRrakw+lpPP+Fnjf8NqN8sau4wTfpx4oVzfXr68/drtWz7jzvWJa4Jvg3xN
AACgvuY3seZrjovPOS6T8DfX/M2xLF8zls8YQijfUS4v8x+PLl/bnhXX3Lk+
cU3wbZCvCQAAyuF96zeRr9lAfc0auLGNNWdTxDfX94PU/L56bb5m58T/SvId
Y8sbvXf52vbc/Ms961NfE3wbrdXXdD//aDQafbXexrlQPHMdoZL6UL7mD9fX
tGOUSviZjr8p6mzW5mtKPf3txv/cddx4oduWG19020m0X7v9o/3XE3FN8G20
Vl/Tvhc4U2P1cbFjx/4O+7X5mgm94G31NWth7785Vv2anznFM6ca72X1NV1s
53rw7MYWWucTWD69Tnx5Y5fru/mgLuT2Tf9j66f6T74m+DZay9eUnw93fJCf
L+zYsWM/y76Nc/n4ZswvvSdf8331NaO/dz7MvuWmhyn+2+rvoWuU5FcebW+P
Jq4Jvo3W8jXvHh/QaDT6VfmaDdTXrILw6c07QkpMKe01dfPvoUtIuz//WHtH
+0tcE3wbrdXXvGN8QKPR6Fi+pv+cu+x79KF8zR+ur3kmvLgm0zQR1wTfRmv1
NeXnIzQvZA8tk2r36ulb2/3G9Av7yPT+6dp8zd+rr/kt6HxN7VfpON7E6FUD
8E20nq+pIevTSvvUf2t5e76ZQvVvXXuo/aP2WP/u2v4Z9tjxl2i5/9ixl9il
PxjP10zlb1JfEwAAYmg5X9Podb6ZHLubfxVa3pqXyd+SfbH6Vbh+rn81609t
RPoXPHYn719o+1flr6PR39Kvytd8WH1NAMD70XJ9zal/gt18q22+suyh5ed5
dflbsv3a9VP9q1nfbuPc/LSS/ctt/6r+odHfyteMvX/uj21nxDfNur9bXxMA
8H60XF/T6HV+QfwyON/Mc+MZ7uTG6w6sn+pf6foxe/TYnbR/pefHa+ek/cOO
/W77tfmaqfeOZvx6fU0AwLvRcr6m1U9xXwjVt5V2d3k3/lZSf89uo379VP9a
qC9Yun/z/Hj7OXur+48du7Rv41w+vhnzS+/J13xffU0AwPvRar7m+ndEa5bL
y3uHtWxm/fkYqOzyofVzOta/o/ma5+Snle1fbvtX9Q+NvlO/Kl/zafU1AQCv
R4v1Na3+BbSZXB3KR7TXK8unLN3+U/M1a/Yvtv0QWsq/Q6P35mv6z7nLvkcf
ytekviYA4MVoub5mbqpd3l33yPpX94+Jiem+6dp8TeprAgB+Gy3na5opVb9y
3Y+APbX+ts759fvcfrVQPxA7duxxu/QH4/maqfxN6msCAEAMreZrynsBGo1G
X6lfla9JfU0AQGNoub5mS/lcRmePZ2P9RaPReb2Nc6F45jpCJfWhfE3qawIA
XoyW62t6kxuPwI4dO/YT7Nfma6beO5pBfU0AwJvxhHxNNx6BHTt27Gfat3Eu
H9+M+aX35GuK99CprwkAeAjI10Sj0b+uX5WvSX1NAEBj2FNfM4zfyNdEo9Hv
09s4Nwaec5d9jz6Ur0l9TQDAi1FdX3NZZB6n58kagq/M12RiYmK6YLo2X5P6
mgCA30ZNvqbGML0b2U9sJqOXpXf3xc3XNLiivuZRu3cchd2d30L9wNTxa/H4
ltpT/b+q/aecX+zldukPxvM1U/mb1NcEAIAYavM19Xi9+Znj+rebX7+7P3r8
F/lUcx+dOMQgbM7yd+h1u8Juzfty/2p0i8e3LL9OXsPfab/l44OuPd8vytek
viYAoDHU1Neclu/7P99UTZP2L7e/e7P07r64+Zrz9qQfNwTt27T12bXPf5+T
3xXqT6j9UP9qtNwXd/sh7Gm/xeNbo0PH5672j55fdDvajD8hFiNUUlNfEwAA
wqitryn9Sx3PlH6nXH93fwL38nV+QXzRzJfreu3EJjfeEbGH2pmPZVn/Srfv
HZPK9Uvab/H41tivPD659o+eX+zt2KmvCQAA12F3vqbwN6/M1wzd0117Kt40
/20vf7Q+n9sfN/6V698Z2w+ey8r2v3V8z+q/u/2zjm9p+1edX+z32834k2I5
TtmQy1FfEwAAXNTma87LxN9DPzNf05tvpky+nFx+3sf08r+ar9nq8T0r3/Tq
9ls/v+hy/ap8TeprAgAaQ6v1Nae+7cyH3Obb8cbY8jG9HqNE+3v6d3T7Z+gW
ju8d+ZRHj1+u/bv3F32NNuPP8oetqa8JAACHUF1fM5h/5Nt396dXWR2/18fX
jS2fmlLLh/pds37p9o+2kev7N4/vWfsQO05H+nN1+0xtTdTXBACA6/CE30NP
1X9M2XPrp+zr8TnQ/pX9u8P+5P6fcf7efHyw23bpD1JfEwAAzsWTfw/dWy+z
fI222tyRz7lnf1rTVx7fq/WR8/cr5xe96Vfla1JfEwDQGGrqa94V19ymdvK5
0Gj0e/U2zoXimesIldSH8jWprwkAeDFq62uG85F8vbs/1r3Amdx4xA77t7eP
HTv29uzX5mum3juaQX1NAMCb8YR8TTcegR07duxn2rdxLh/fjPml9+RrivfQ
qa8JAHgInpyviUaj0eRrUl8TANA29tTXJF8TjUa/SW/j3Bh4zl32PfpQvib1
NQEAL0aL9TWZmJiY7pyuzdekviYA4LfxhHzNFurvYceO/b126Q/G8zVT+ZvU
1wQAgBhaztfc+ujEIRz7up5jf6qOHY9W+vem85PqP8fnO8c/d/1f8fl4Vb4m
9TUBAI2h9fqaUx+Fdu857vJv0k/Yv6eeH+szwPFp8vjnjs+Zx28b50LxzHWE
SupD+ZrU1wQAvBgt19c0ep0fiG9Y945BWe1I+7yvyrnXKG/9M+xuH2L9z7Uf
2r/a9a02AvE069jv7N/Tzk+0jye33+rxOev6vPr4567/o58POV2br5l672hG
Ml+zp74mAODZaDlfc+pf4J7i2kPxDrmu284d9fvkdt34Vmn7sf2rWX9u4/z9
e/r5sf2V3zs+Z1yfVx//3PV/9PMh7Wb8SbFBzC+9J1+T+poAgOeh9XzN0L3a
tafiHfM+ppe/pl7fmNQl7V3V3+Sx39G/u8/PWf13t3/29dDy9Xvk+rzr+Of2
99zjYY9j9agdH8NxzVPyNamvCQBoDC3X17T6Oc0ry9eSy8tlYstfoedtpeM3
T8/XfPL5CW3/l47PGdfnt/NZzz4e8efcZd+jD+VrUl8TAPBitFpfU/4dvq+E
57nzU23mJrdPteuW9LWmjT3rH23jyP5dfX6u2I87z//R4/Pt6/OO47933drp
2nxN6msCAH4bLeZrWv0LaDdfS9bPi60bXl556+faL1m/tP9Xbd/N1zy7PmEr
5+eIPYS7z//R43N1/1o//nv3n/qaAABwL1rO11ynm/MZ3feBv1V/8Nvb/+X+
33H+j7TfwvX57evnzP1/Vb4m9TUBAI2h9fqaKW3tR8HyR/LZzm4/pf39unf7
Z+krz8/V+o7zf+T4fPP6vFrnrv8rPh9m/AmxGKGS+lC+JvU1AQAvRsv1Nb3J
jUdgx44d+wn2a/M1U+8dzaC+JgDgzWgxX/PK+n7Z4/Hy7WPHjt23b+NcPr4Z
80vvydekviYA4HloLV8TAADux4vyNamvCQBoDK3V1wQAgG8g/py77Hv0oXxN
6msCAF6M1uprAgDA3bg2X5P6mgCA30Zr+ZoAAHA/qK8JAABXgXxNAAB4Ub4m
9TUBAI2htfqaAADwDeTeP/fHtjPim2Zd6msCAN6L1uprAgDA3bg2XzP13tEM
6msCAN4M8jUBACAe1wznZ1pzxHzqawIAgAvyNQEA4EX5mtTXBAA0BuprAgBA
6jl32ffoQ/ma1NcEALwY1NcEAPw6rs3XpL4mAOC3Qb4mAABQXxMAAK4C+ZoA
APCifE3qawIAGgP1NQEAIBXPXJdI6kP5mtTXBAC8GNTXBAD8Oq7N10y9dzSD
+poAgDeDfE0AAIjHNcP5mdYcMZ/6mgAA4IJ8TQAAeFG+JvU1AQCNgfqaAACQ
es5d9j36UL4m9TUBAC8G9TUBAL+Oo99za8fHqnxN6msCAB4O8jUBAEC+Ex7K
18y9R059TQAAiIF8TQAAiOVrxnTuPaIv5mtSXxMA0BiorwkAABJpP9KNd5q/
D+VrUl8TAPBiUF8TAPDr8OONaY7GM2v1AuprAgDeDPI1AQBgQ2k888y4JvU1
AQBvBvmaAADgj1/2d2ffp5TLN5WvSX1NAEBjoL4mAAAYqNWfNDmU0o90p9Py
NamvCQB4MaivCQD4dYTik7nJXj6cbxkbH6vyNamvCQB4OMjXBACA7dm162+a
sdGOc34rX5P6mgCA54F8TQAAiI1f4Xhm0/ma1NcEADQG6msCAIBB6Pl47Ln5
ifma1NcEALwY1NcEAPw69sYny/I1E3oB9TUBAG8G+ZoAAGDgxx3T+u58Tepr
AgCeB/I1AQCgLA8zF/dsIl+T+poAgMZAfU0AANg//sTinVX5mtTXBAC8GNTX
BAD8Ovz3gNw6RzEuyc+kviYA4LdxRb7mMY49r8KOHTv2q+138wzqawIA3ozr
8jX36aOQ43e4XTQa/V69F/eMb7HxjvqaAIA344r6mse/59vjcjo+YccHfPv0
R6I97NixP9o+jgl7bLzIzb83rkl9TQDAm3FVfc3dOorwfWWM+KXu8mg0Gu2O
F2bebeNbZLyjviYA4M14Tr7mzGby7fYyuXZgGH4HG4TsZvLtcv4gdOv5mtTX
BAA8D+3na27z7XtH2f0HAPAL8MeR1Hhhjzdx+13jHfU1AQBvxhX1NY9+z4/H
J8J1RqR/mbqvoNHoN+rR0rXjRgtxTeprAgDejKvqa+62i23KbW/3ivR9x28H
APB2pPxSOX7Evp/eNr5FxinqawIA3ozW8zVNX/z7hK/lOkvPrfbQaPT7tPk7
NH4Ynic5jjw1X5P6mgCA5+EJ+ZrbvSLuR9r3DQDALyE2jrhjR2g597uqtN81
3lFfEwDwZrRYX7MsLuEvl/p7mWMr7Nixv8YeHzfCz89bimtSXxMA8Ga0Wl8z
FA8ou2+49ycAwNtROl5Iu1z3tvEtMk5RXxMA8Ga0m68Zz9+MLS+XsdF2PAY7
duxH7PMyteNFS3FN6msCAN6MdvM169a37xsAgF+C/1yjbLzY/r5nfIuNd9TX
BAC8Ge3X18zFO928p1DMY7VmjgZ27Nifaq8bL9qKa1JfEwDwZrRWXzPtK+aw
xScAAL+C/Z95b9y5eHzz7AuorwkAeDPazNc075sPa1/036aPYZ17Xwg7duxv
tc9T7XgxBNpvPV+T+poAgOehPF8TAADAFaC+JgDgzSiprwkAAOA6UF8TAPBm
pPI1t+dOMAzD8JUsx1/jP1JfEwDwBsTyNWEYhuHvMvU1AQBvQCxf0x2/0Gg0
Gn2vpr4mAOANiNXXhGEYhr/L1NcEALwBsXxNM361kMcEwzD8Vt78S3/8pb4m
AOANSOVr2uPgd3nuCzgTLZ1fGP5VTn0Oqa8JAHgDcvU1jXbHszu1/v4PrsHm
w3/v/KLRv65j4+3R+prr1I/+POzYsWO/2a7HJ2u8CsQ5v/u9H1yBUDwbPomJ
G8OF7I6/ho/W1zQTGo1Gt6BXf06MV1K749mdmrjmdfDiKQ2c77foaV5D/UG3
q2Pj7d76mtN3yIXRaDS6Je2OVy1839es+yJhxuGu17U99JhrWDnaZr28Nc47
7f2ibil+/T4emujHnvGgjX5/Lt9O3/eBqfPm1bXjr59rJzbe7qmviUaj0U/R
xr9roT+xuGY36DFXj+HDOqV0t+bSA4PNj2/r+nuDnq/d89szvkjp+nvej/72
8VNDN/Gw8FXbm/2/NIahz7ZX1M7fMrXj7Z58TRiG4adwLH/oG+yPwzM+iw+p
Z6vFPvPosV7u04fjo/NSfvut2+14iW13Yymx9luKX3+bzbEo4aJ2T44P2v5g
5XqF53m4OK45P4vQ+YRq5V5vU2972qdximfOvqaa+Mr4ZomPWB/XjE+x9WPn
Z099TVtjx44de7v2Nd51Yvufz2fX+qm45uRrBq029DjfWlxzOh4HMMdbZsh7
ZuzvcBvSrxibuf6+YTeTtE/szJfLpdo3657Zv97yM8vW3+o45rdv/Nmrjv/k
W6qZ//5ffMyZ5+3PfqU7Df3nlO27dukH6s9TTOfaL46PRtaPnZ899TUNy9yI
UL4EduzYsd9pj41TUmu/yJ1S41yIZ9+qPv6g+yLH33UcXuOaanlGvjwr7/rp
7204V1ZcM3bfcPfPtbt81G58zb3ru/c3GeOU81Ltk6/pXGfi2jfHRmpjL2u3
bLnB2U6ah60/Ffsl20h9/s38q46ziWvK+Kb+bA6DiGv++ZXTs/NpX7vFz/z+
9ZHio/FRd7w1vKe+5nbtgSMw953Q8UWj0fU6lJ/l+nfGvsXi6re3+ad7+udD
xyn7Pj2mmtZy+ZpHY4x7cMY2U/c4GfeML8N4arTx36ZpMDzYWm2+QGl7ue27
02bV8b/5u8KghuL2/PaH6OfZ1cafrelv6fGY/l3yL+25GxvM/uUwc6Y/oe/B
d18/pXHN2PrR8XZnfU1wDq783gXDv8il9TVD8Ux3jI/Nl3bZTmx9w9FxWORr
mvhILL6pnz1u+Zr2OO/GF0P2rX+j12d3/dzya/8z9lh/XB26z1nP/RLrx+Ip
v8ipeKY7v6jdivuUaXd6pmz5tcP8PHdhM79+v+y4pvf+uWMv6a9SdfHV+Rj2
o7kMVx7DPKolDjjk8yWPPG85g4/GNc+urwnOgZ9P4h9vNBpdrtfxKaLN8p5f
FrGvfpSwm+fSMr6Za29cxuFxuwMtUGtcU22rbfcrR/txze1v6d+5djeO6+2f
1Ya/fKh92/eO20P9Cekh4muWrO/58Y1cj9/Q1hTxM+VU0l7J9mV72/U7/2Xy
M20/s27/8vmam5Z+51n7Z7ffzZ9Xs58Ob9BzjM+by5e0x5fa43OGPpaveX59
zfUoqu3IdksekZlMPTgLSjlS/bSduCYMn8tufCuaP5SJaxp7Ks7ptpfL40zm
axofYNyGiU1vy+vl3PqaazuJvEnpF0udmh+Kc4a05FScNMWpe5z7fnqIyde0
r7P12nfifyura/I1Jcz5CdUXmM7Zjv0qjV9fXV/Timuu++RqM2Pe/8G8k97I
dRLi+/I18/U1Y3HNNV9drKXfrwRxtFD/C31cD8OwxKa2uhd72tOfw3747v50
/b58Kvm+4+C8/yg5115ufWOPre/6c6X5miVaxvGm8xV4Tmz7oXb/7PyjbWw0
z8oHUzdlCOhh07Ov6Y6tSvR59Oyl8cvcfoe2F7O7/YtpNx/TnH+JXHyTfM1N
m8+v8bmCrDZfoLS93PanaQxjW97V5fvXUn3NrV5mDnr5xectGP++rc8ef9dx
ZE++5iDi0uvhnGOYeraa5cTG/xwW7bJc35Z++2+0E9d8HhsfQ47VXbd93+4W
f3Nv+/o7n1nf1Gqba7eppb6GWupqXLN/Xb8vHnBmfbcj7bjxrWj+UCAumdKa
c/ma7nLu/Fhcc32ftZv509nvuK5azA+1Y/cnPT8X15Tru35pbH4uDhpjt7ZR
bn6Iyde0rzN5TFJc1G7hctv1PVowcjtfozV+Vu1XID8zVa/iquM8hOKaDs9/
bf7u0Lcf1zzKZ9bXTMU1pyOrxpVNXlG3PlfX42a/6ifDrT8sIetZpXBl/S/s
19j19R+6Hxu7qX9xZPsmvqlnbXXb5sn2N8/fPxPXrF2/1EfMbT9XH26NjybO
j2zf1lv/Q/mVoee/ofd93Hyq0Hqh/k1xFqNjdyil1vrQsp6KtOfWD/ZnzL/X
I3Vo/dh8t73Qeqn+W+OlY5fnP7X/tl8xBo//r9g3P2602Zkvl0u1v40H6e1b
7UUQ7NfO/Q/FMe86/pOvmdzTaalxFEtZ7283fP0csSfzNSvra5raXdZ2xiWe
o+y6prH3JUPrn22PPcc6q/1QnWHlzY/8LtV6vRLXfBorZcc19bXeDdvvVG+/
V31sOya+qWdN2xo3ljHOmnbnNtPLdcuz29r+hn8/19cl7eRQky/UUrzL9Yck
6/yL9Xt4hkPrbxxu/+128jXt60xe+4fjmgfzNUN6Omc79i9VX9ebd+FxlnFN
b/+m4+XnuZSMf0/nM+trpuKaOj9Tvhd0JF/T/36cXz6kS9evRSifyMs7ytSF
I1/zeXr63IjvMf2UW2eemy+1Eld/bt/2TNxS5m9KyN+rqG1ff86HRP+MLzPl
nI7q9OOX02fXdyutx3eHtt9Dh89k8jWv0/O1W3J9102t7N8erccgM0229bO9
5WZO9sp89afrs+tr1vZDvp9etHwmXz20vpunH8rbP1vn350sOS9tfB+By9hc
W+bv6b2gbsmvHM6Ja+o4qX5G0Kstvjk9JxjmemTd8vto3Y74o2YT33RjAHoy
9Ru3PJd7j+/Z9d1ainfF8jXt5bDvsbcUv34dc5+CC/na+poqq00uu7kH2/WQ
7OX9OKSy5qfil26eVcweep/SzWMq3b9YvmbJ+tTXfKaWcU3z7o58D73v1Zqr
vKf9qT39jGCJXcr45meav/ibMj5Z0f68D9vzdD1Jf/Obx/fs+m6l9fju0Hu+
p6PLNPU1r9PTvIb6g25Xn11fUznt5FjnGX2WfKPc8rn3KPfUiduzXun+xX7r
omR94prPY3mNXLUd7UfqkmOf9Tn5uMY3+2W+tu+Nn5pYZii++e3j+3v5mrHl
sdfYW4pfv4+/Py7Az+Br6msa+wwrTzOYr2kvH9P++4ujNT/13mRq+ZJ4aPj9
yXh/U/mYJb93Qb7m8/T0uUm9d6avC/3ucNd7XLq9tc6RGldfc3qevsQ3t/fR
9+1PL56bm/xN6Wt+8/gWxTVPqK/5DZ36vI+Z9bGn7eRrotHf15fV15T336Xm
kZmt/3bzM10eA/Ot+3hgvmtPxSdr7KX9Mxx6NyhWfzjWfgtxJLiO5bUUW274
8yvXz4m+VhZ/s3Q7sqbm0sRa32HL39xfZ3POU7f9zfl3uPP1L69m+731+BQ9
P4H6mqn3Ve+2f/v4vpVbOb/Ysf+6PfT5PFZfU1lsfM3p3rjMnXPWlD1fcKid
Udnv9WgurQe39TMR14zYY+2H+qch/Ur5fplfCym8/nwOqK/5NLu+/lP1NY2/
M1/os5+p+qF6+4NVv31cY5zu++l79s/4dHKMsOshtXv8S86PtNv6+/3Djh07
9rfa3fHX2PfW13Tvs5q1XynrTmuLiWvKfE3JoXYMy2fart195u3ON+uHWLYf
ai/WH5dl/UDXbtcTjLczn5c24gJwnvX10elrV3Bs+ekaqYxnujw/25a/GzSM
pl6R/H2hPe1v1/CwXsMl9Tdb58H5Xu1qGIZh+BqOjbfH6mvadu07ThVM1TaZ
miyh5WF9Dr6fH4cu19NnxvuOE1heiXimsQ/n55Nd8fvpufqbrWszPsX0t/uH
RqPRb9Wx8fZofU3Jpn7m9n6QX08TDp2XNr6PwOXf27SfmYqX6XzNodvs03Pq
7pr42tH4ZoifHN9sub4mDMPwm/ma+pqOfbSXw563U1/znTr1HnoL/XuzTudr
fr9/NTr2nuSdOvX77k/ov1L+79d/uz9o9Ft1Ml/zcH1Nhd6piWvC8Lmcytd0
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
Rf8Xx7JqKg==
    "], {{0, 548}, {667, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{442., Automatic},
  ImageSizeRaw->{667, 548},
  PlotRange->{{0, 667}, {0, 548}}]], "Figure",
 Editable->True,
 CellFrame->True,
 CellChangeTimes->{{3.47300267185842*^9, 3.4730026791320353`*^9}},
 Magnification->0.8],

Cell[TextData[{
 "Wolfram Workbench showing breakpoints on ",
 StyleBox["A[m_,0]", "Literal"]
}], "Figure Title",
 CellChangeTimes->{{3.47292671644529*^9, 3.472926718764077*^9}},
 CellTags->"fWWBreak"],

Cell[TextData[{
 "Now right-click on the ",
 StyleBox["Debugging.nb", "Emphasis"],
 " file in the Package Explorer and select Debug As... Mathematica. You will \
be prompted to switch to the Debug perspective, which is recommended. ",
 ButtonBox["Figure 19-5",
  BaseStyle->"Hyperlink",
  ButtonData->"fWWDebugPerspective"],
 " shows what this perspective looks like. It will also launch the frontend \
with ",
 StyleBox["Debugging.nb", "Emphasis"],
 " active. Here you can use normal Shift-Enter evaluation to execute an \
expression. When a breakpoint is hit, you can switch back to the Workbench to \
continue debugging. Here you can inspect the call stack, see the value of \
variables, and set further breakpoints. You can step over or into further \
functions using F5 (set), F6 (step over) and F7 (step return). In short, you \
can perform all the operations you\[CloseCurlyQuote]d expect from a modern \
symbolic debugger."
}], "Text",
 CellChangeTimes->{{3.472926735796381*^9, 3.472926831583102*^9}, {
  3.4730020484228153`*^9, 3.473002049595969*^9}, {3.474289671665305*^9, 
  3.474289682289649*^9}, {3.476465363341378*^9, 3.476465363938113*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsndu1rDCOhmt1TyITA5l0CP3A66wJx5F0Es6J3gaMZeMrd6q+/yyOSggb
2xij/ZdQ/ev//v2///58Pv/8fP7x/3/bf/4+/4/Sw9D//afULP/0T6eHT69n
Oaxl3yoHdHT00/Vww44de70dHR39Mr1L6Bvk4r8m5Hju8Hx/W6ec7EK5dSuV
x44d+3Y7Gxvb9u3u+xc79jfbS1tYPqUnpPRLFz/3b4v7tdKv1qvyu/rBxsbG
xsbGxsb201voT9bqNdLzby1XG8Yh9CWZ2kp2NjY2Nja2J25Pi5PAjv1N9tIW
+JGluNeUnpPCv1382go/dvGPQ5myh+ULfceOHTt27NixY8f+TXYd2Cv92Ba/
1hz753xOfq3y94cydZ5WWdtO7NixY8eOHTt27N9lz0qd0GfZJfTY9uffro6P
tbPI59Yen5Cl82HHjh07duzYsWMf+c9eDYcg9r6VqVsfUrdo/yzN+Y7A2O6o
b6sy/q1etad63A/x17Fjx77djo6Ojo7+rbrx6/Ts3xn/seudHHMJFORH6FoL
/7ab/Vo9rOqtqd/Wa+oxUmvt+bfm/S5Tue7/FNX/yc7snGU36G6WQtdyf/eZ
9hnd1G3Hxm6jP/u3/Z1s2SfHrw/lkNRt/MSgPn/n/oxyXT4hk+fDjh07duzY
L7Sjo79Et5yooUDVLEddTTK69dZfddL6pQa2fgOlXL2qVK9K1zv6zqbuuf1T
5X+KnisdZT9+tv7usPi9oe78YLMp49/adnub9W83xiWYdqqP2/78Wm18W9EP
JBKJRCLfKTV27I+0L77t4tdq3//sdeB36sD/1J7/OQT+pynv+8068JN14C/H
6zc+Zug3j37q7DDrwK9d87mh7vhb1X3Wvu1HD2veNjK+gT8r/VgD3X98/3bQ
dbxtWD86Ojo6Ojo6OnpRT/G2JT41xq8u/udc/9pvDnjbPs0DL/WqtN88+qcL
MVzj38bjFnzf1ko95HlbvYznyMeqj/NjrdQTn6wtX6snv9Z89q4HEolEIpFI
JPIQaf3PkE9tjo/t4v6n2adE/S3w64/wtgsfO/uzWov9az92/Dw6xXqKt7X7
YzEJsXhbu5n2WP9dq6VOyyVP/rTlaWcuV/i1Kd42hB6G9XHdulxYPmUvlT/S
vuqLHprK66Uv17Y/ed6Lx2+L3WLMW9e7+60P9Nr+xeaT1kN0/xv7F73+Ol++
ZD+r/8u8fPD8w/6DdnT0h+oGxneMxsH2qfhXy6cGW7eOt7V12fpbEMbbLs/T
zudtLV/rIRJ/4GGOtdUr3lZu5XjbybfVI2+7xP8Ows9d2mO43W7idBO87fJc
/lPGd/y0P541f6dMx6uq48+Usi39fOFX/m1l+avbPbZzud73jmOLtPNFze9z
KhXXzXE1/Qvnk1e/vTde3L8t8+7OeXnHeZFIJPKN0sD6rjL+NR5P+1du0YdA
T/O20l9ugZ8vQfK2kp/t/ffFJIy9W/u1Yb6E6LtkHytL8bbDTOas3xv7O5E8
67SN/G03xP4eDp9fNsXZ4msFx5fKl44/U1/aYsavl37HsKn8pe0fr7e6dfy2
6DqYL3ZGrHVdVV84n+6eX0f3L6av5l2j/ar76QnzDR0dHf2puoHn22bzFQyB
XxvoiXhbyQOP+/py/bZdZd627N/6uvRrt8TbDlFpYxNsbK2Lr+2cHD+neZfY
88t7Vovn+/JMj5S3/FbKntKl72CgGnjW1XgsdavI+ZR3vqWtkfIle0rXXlnt
ldfar19pv31hveHxMs9d2MawneH4T8e466NCXW0b708/LPme7Xxx19PXDY++
zKdwjBPzMUTY/6Xv0XFx+fvseIfjqQP9yv7J70eW/s3z1u5Rum5elu5PPfj3
mbzeYbpulZhnpXFCIpHIX5cG1n9MxtmqNW+7kqa+Ls3bWjmtyeW8trZdrv51
vK2NKVjH1/bRZ4Geedolv63Ic7vUbbcSb7tsIn/t4hSKONvefu4WTjf+e8Gu
nd3CGbp9pv+Sp1rxoEH5lX8bqd87fv6sxjwZ8hm/7m+NvpT/9JHzOx9AaeGj
DPHyHl+XqF/qFkqO01z3ct5EP109/hjZ/CGLvXdlVXA9StfX5oGW5aWeKl+j
y/7Yc0l9rH+8/rppPq30YHzG8dTTPLXlzXXuxTh5x4tzTuM7rMb3qv5ZH7MT
dZj+ebxw0N/R7s3bofp806uv/nyRc9zeH9JvduOkPR+4eH9ix44d+w/ax2dB
X46z9fMW+PG2HysX3zb0m/2YhGy+BbXmbT853rZP56/14P2Og/Vvc7ztMDje
Vvi8cjwj47q8W2Zja0Xur9V7ZEv5hD8on7XC/5zsOb8s8PdKdqGsv3/O9Dsj
w/pqzifjXON2PY1Vwm51v58JW6KfuXrD45PjmYhDTbarsnyNdP7VzJEKrtON
sc+bb5kv6eusl3YE9Gxh/Ovm3Zn9k+e3mPzadH+XY4Qv3X5/rsdlOp/jn1vH
CYlEIn9ZGkj/M5pfVvidkqdc87c53nYIeNuQv/Xrt+3K8bZDI287BLyt+30y
69vO9Zstxdsm+CS5efytCvIlqE+6nHx+9f53lLHvhb3nW6R8vd09W1XIC336
bFvHY3J9mct777CL8637EvJjcb8vaReKElzrxIeV+9mix84j21i6viW9dczl
nFm+Z58LSr569bdUZXti7QvHR+6zfqaFHP/a8b6yf7FbTH5XUJqXKbTcf6X7
rXac2NhO3Trs2J9tNwj502g8bER+pBzrE75t7+qW9RjU1G/rifrNs33iXQO/
tire1vdvPd527kcVb5v0cx1/u+QC0/2cz+GzLh8++z7z+1fyed0FPN/H5idT
m/yyUA/f89ODH7cYa294/jCOexrTOW5RxhWEPJWsp8jnlXX5/f50Tr282x/G
NA6ynx6XqoaQ8w3tqzHTIodAxfUt6VF+347T3L7QLtsUxqFOfdWb2xNrXzg+
pXIt43t1/+Q8UiJPSSzu1cbgy/Z79TXen944RHiI0F46HolEIn9ZGoRxrzms
+dt8vO1H1LuKt43G8071L/Usz7dIvK3NTZvia0Ucwmr/zNfGedtB8LbK7Zfj
l9msv7/ib8dzfxZ7uC1j3Dm/Sc+6Oa8Xzyd9xUh5yW+F8ZIhZxnymTaesstw
06XNwjy3Q37Ujy8M423X5XVQXtpX8YfCOPok5nzi+a+FrZv9DtlPV886vjLU
/fOo5TydqCvWp2j8akTfO/ZL/oDI+Mux8OeTHuM9a9sXjk9unnnxzRXje3X/
cu3p1drun1c13Z+h7r0XN98fqfshprOxsbGxuW2Y189O8Kg5rHjbXkjp2851
x3jbUhyv166xrjDeYX4O2HwHMb+2Jr/tire19Qs/duFtxf4VnzT4++X4Sv7W
PK36ckzC0gU9n1/wgOF72JbTteV9uy0/2aWfIf+CGf3HyLW2z+h0/9K6V88g
3scRY7Z6X34sL/uivTqW+JDe5hdY9/nT+T6HP55DvJ+D7WeGR4zoufOYNrr3
nMpxFDG99T0yq3v5AsQ97efGWs8nFc4XGzqudLJ94fjYuqWfJ+MFWsb37P7V
9GfxUQe3vkXn5Tx3S/enPF+ox/JH1MZX7Jkv6OhVevg9MDr6g3WDFt42Fm87
1Rvwtr1de0UehMb8th+v/ki8bSfiC/pOPPTEe2PB7+uOML+Da8qFvO3SD9ef
dbxt/ebxt3M8wpgDzB4T428/7nvMTvh6q62zPKFal+/XfKXbXL+6Xi/nM/7B
8t6M0eVzvrHfS/+9OAMVvP8faU/Q1qX9EX51mX92DDrHw47v4GuhB+/j2352
QfzC0j4vziKtK+v7R84T3her61urb906veJ/4/NhKMyXoA+x9oXjI6/Ppw/a
o6vH95L+1fZHzr9gvkXv0dz9mb3ewf0Zu58SOhsbGxvbtFnfRb7PJWWKVw15
23Gz/qeoO8xb2xS/u8i43+z5tav3ymL+rYyz/Sz+bZS3XfzbXLyt3Up+r578
ab3VZynXv9c+cqvDmnMcxyXz/fBV7WuxL3/i2N+r0j7fJvnokPNtOf/6PMNy
njyf9uzxw44dO3bs2N9sl3xlLN9sLq+tV2+Btw3r/2TqX9U7yrXfvMTLevlq
nR+7ymfbfVZ8rQ59287vzyreNrIt8bPqYL1U/4H2kc8cfNjvWxf+6Mb2tdhl
vMLSFz2seFoJGV9ce/4+cx45X542Pj9r7/3jsGPHjh37d9onbrXOr036ofNz
3IuJVfN7ULO91W8O60/lSdCdn6/W92+7lX+7yK5b+7Z2bDz+NhJvu5m/ffqm
h+U74+X71Bf3ScQzrONKDuznAfErbGxsbGxsbMds4+9djlyTdr7ALLve1z+h
Hkj7e0uu7vm95N6vr2us3xy3/G6nqNucUM2+qZp/Xyym60X/k59AdtNv40Z/
vzLnr9TkSwj3hX9ftNrZ2NjY2NjY2NiKWyk3Qi1sLO3Rdeth8PzaM9o91tkJ
WRNvu+JvE/qKEyzoJT8aHR0dHR0dHR39nXosL9dZMhpvK3jbxa4DWVF/yu9N
6UgkEolEIpFIZKvsEnKxh/G22pcdOjo6Ojo6Ojo6+gt0s30cb2vfbxvjJLwf
DtCBjh07duzYsWPHjh37M+xLvO1nfof+I3zf3h6HRCKRSCQSiUQ+X/rxCP1g
4xEkb2uOHf/X6Ojo6Ojo6Ojo6M/V3ftrkrcd4G2RSCQSiUQika+TjrcN4m1V
Kt62Tv98Pk3HH6Wb8155PvRnzwf08/Txmj6oPTGd9QAdHR399/R8vK09bu0X
m2dGuNn9UqbKt8rU+WLHHdkOey65P9Rr5dXltozrmed5Snu3lDtqHp09zjX9
Temt7bq7HzXX5eh1CIlEIpHPl+t4W5EnoTPHDeOx4//a6R4fssHeqtfWZ59l
Kb31/M6PdvYVX3VA/3L6Weez9Z7d/iPnw9HX96r2h+WPvj9yemn+bp1fV86f
1PlK1/+q+YGOjo6O/hw9Hm9bzpNQy5va58tevirHv5T44xzPW3vesD/SHtZf
w4uleLxUfTXHtcrc9UjVn+tvrn1H8Zax9rTMu9pxzLX/yHaX5ssZ17k0P3Pn
bZ23Nf3dM19rrveR8w+JRCKRz5fudxza8tuGz4rxGaL956PUbflQT9Uf2tfP
23h9pfOn6k/Zw/qMXZ5flvf9K2e3eskent8vNyTPnypf2z95/ba2rzQ+0u7r
ddc/vB6x6xP6Oanzh+Naun6x9teOb03/U9c31b4958/dH7Xzt3Z+yvbX3D+l
8Y2tObH7M9ffvfMPO3bs2LE/3741v22KR/KfjwkfeIMfXjpf7vxbzherP+S3
Yv1LtSNVvqa+2PFn8FChn5jqV037aq/TluuRG+8avdTPmvYf1e7c+NWMa+s8
zt0fpfNu3Z+SW+dnql+xdSa1Duy9nkgkEol8rtya31byPdIunyVSD8u36qXz
nXV+WT7koxb+KbCnzh/js2rqSx2/Zzxjeup8sf61ti+8fqnrWdJT17NUv9RT
493S/tr25s5f0nPza+v5c/fH0fOzJLfOz9z9Xmvfez3R0dHR0Z+rb81vm+I9
zuJLSuerPf/e8+b4vb183Fb+bg+fd0X77pwHMb21P2fNo63zZO/1vXJ+HsmX
5q5L6zqw93oikUgk8rlya37b8dmg13aPD5r3W39wxddEyufOF26x+nPnbzlf
2B+pL/xRpF2yfE6PlcvVl9LD9rX0LzWeufpj7ZPtT5WP1X/E9cjVFxvfsL0t
/d8z3qn2xc4XjmtqPm253jV67XjVzMeSvqf9YX2p+yl3v+0ZT3R0dHT0Z+pb
89sij5N7+Tgk443MS3haJBKJ/B25J79tlEtNHL9Xv/p8Vk+d1+OfdvbnzPYf
qaevwXXtyc2D2vJ3jF9uHp19/ty5j5rPV+j5MSyP/93tR0dHR0e/Rt+a3xaJ
RCKRSCQSiXya3Jrf1unYsWPHjh07duzYsT/DvjW/LRKJRCKRSCQS+TS5Nb8t
Ojo6Ojo6Ojo6+tP0Un5bAAAAAAAA3oJknoRCflt0dHR0dHR0dHT0p+nkt0Ui
kUgkEolEfovcmt8WHR0dHR0dHR0d/Wk6+W2RSCTy+dJsSqnl81PaIfVQyu3u
8UMikb8jXX7bCG8bibc1n826ZfXQ7urfZteq21W+WP+OreX8yTp2tn+xi+uw
dXy6vjt8fPfYe9UP3d/2+WtXN37uhl6rS9tnPpt22LZMn5Upde/4JK93Xfnx
vu3V3/bXv16J+Xxi+/+un+r7v3b3f/f136b75vrX603t/aHmc07y9OtTad+6
fi77hsGVuaH90r7Mq6BtIZ6yvmA/1+4/59rLT38PqZU8uv1n+i/Yn2NvzW9r
5oWyz4qD/Wzr1zr/9tj6vXk9uHtRQurSPpVrP09Y31G8y3QdbF+21dP1fVa/
So5+5J8/q7TxZT9/cppjRkof8+x2mPMZf9q0Q+l+3Jyf2x1y3e643uMYG79W
6WWz/u1p7f4br0FPvqVt/+Rrbul323qz+LICavw77r7rt6c/sfWkdT06Uso2
+PNyWOzjFuhntic2XmedV6u/Nar/PGI+heNw77z4W6/7XszTunJ2Dmkxn2Lb
1nbZuZDS3f31jOuIPEZuy287BHpo9/WuNz6KXmRv5d82tuTvP/MsVGrmEY0f
IfnbQv0tuuxD2J8Q4bEt54vVHa5De/sjam4ubz53nfsbwsDoe9qzRe9Hf3L2
Y/V0/n70LZ1/K33Ms9pj/tl2TP7YsPi3djP2ecZeNj5Sd2grPz0bnH8r/dxe
z/z43PdD2jv7tX8fxnvcSLOpzddvqD9+9qXHzX42cryu/WD5XCmvv54N/Zn1
ddn1d/7hunJW+0vrZogz22M23489+XzyGXXx/d96fe5rz1B9fMjTGqT4W/m3
fUt75N+FuXqfcv3Qj9FL+W2n4/dJ4yKPvuwszeNOjfNsmLbxWajnNs3bvI4c
cf61tPPc3Yux+1Lu28rbpuq/4+9Ew8sa/9XIzyjVwtUaXatr2zP6k323+K5y
jCb+tp99Lp87PaM9Lv7Ab4fzqzvhXz/j79Li+M5/I5pYhO7vj9W+M3KKSzB+
7cRR9/P63s/6znlp/dqRw5l8SuPXGr9SXfG9wHx9YutJSt/CJ18tw+9Rw/VF
wq1dJ82r1bpozzkstun+Prc9ZpPxvc4+BG097n4a5l49lbf1r8sz2lWa1zrC
y0q+VvK5266bq1/6s7L+u8cBebxszW/r1pFJD+0xPeRtO8sfjb7UsKwb03qh
Run83XL9Lbq8/+XnGFbHNpxPB5/HcQv27+qPjsQ9VJY35bo5htT8G31eNfm5
Bp/Z/z1j/KXeC39y8rH862H4W2kfP6/ir45pj98W328I4xPOGo8jr7fuLQc/
TN+TzHG2C3cbjKuN/9jVP8HXmvXF+rUTb9pP9sb+t643WvK2dtN6vU9sC598
wfXcsn4u64mnr31bfUH7ZXskz5bDWe2xbbDfQYTrR+x9Nrk2N/VX+LVGjn83
zs8p+7yy+lXjH24pPuWq9ap1fEP+tGSPx9/W15/jha8YH/Rr9db8ttvi37rx
tHo+vS/n9gzDFJMw8jufhX9J1fv5fFZbTXt8niHwNQMp7TV/B9v1pVSvrH9r
XNjeeNuFrzVjPehlzfiY/Wqq33Cqny4fp7j1Ohi5vC/mcbI+DH9r7eP354W4
ya3tMfXaLfRtx7b2rp0t47xnfLZe7+nvQseXju3v3HtkI2dr39cL5GdDXOoY
OzK/M2bjWuX5x7jbxnHbvN4svK2KyGFe/8S2vHN25XWs74/PSw7+fq8uN1fr
1pMwn8G+9wly6+pZ7bHH+75Ked117a18fhnOxc6bYP7ocP94/32y9cXmUuu4
y+ud02ufW+vxb5vXto6WeNswvja37qX43dp1MxbPW3N+5Hvltvy24X0U2oP1
xPI1g49Qn/a4Z1Gpfv85U9ce2Yf8+rc+tra/fl2urOQWcu0o1x8fydLxo3/W
u78ZOvt5WacnLtf6vbXtCa9DU3tmvyrGl7reyXe6+lPa4/w737cdx0N18+Zi
Emr6t3d8tl5vbf1LsRmb5W+neAT5d4WL+agZX+9+Um6uLPO8n7nbFF/b3P+h
vj3axkHoIfRrbc6EKc5WjI3qq+rfst7s7896zZBS8rep41rrL86vxLxM8bdX
tafletSub46vrd+m7x/z5w//RmoZn1bUjI8/9tvWp9b5neRjo+0T/G7TeNXF
8ZbOj/4+/Yr8ttPzT551WOv2k56fM5U8Tyt/EvILkheJSTte1X//Lv2z4x3q
63VArilXSBdv6/gq+1309O6WGvnblnq38FijLzX7kzG+dBz3OXeB9X9recXW
9lgfT/LH01i5fGR78jVs5fm23W/doAP/zum2v2rx2Z1f2xZvq4RfG943fT/n
SdjI126WSvrVLt530M6HHefVwi/L+/FZ19FbV/TUVn/8136t/XxWe0K+NpTh
+trennb+LFl/5ry1PJ2Nq43/vRSX5m/Lmna38LW14x+TteN/5ryJrx9hXECq
Xdv51djxe+N3ke+QV+S3tfkPLPSQwzwXVSrec11/i93dv4u5Sh/3FeqPrSe5
bRmPLf3T63Wupfz0/fv03r/la/s5H+iYE2B8/2jyKY8cf2mXfm3IlxqEfq31
P486v7Sbf9Z3VZa/Xvja6fyDGa95G+x20PmL9uT1XpcP4wKm7927cb957qol
TtDq3aLXts/cny5vrd0nn1mp+Nq2/q/Xm8L9raYYiMW/Xfxa8V7b3G4l5OnX
L9mfyvm5rBnu+WwRW3/ObP+0+d//L/xXhLu94v4Ix8eVi+tuPS/X3+rfWt72
zPGX+3PSe9acPL/j50uXj8fbhvd/a7ytm5+p52MYZ3vV+GC/1n5FflsleVsr
B19f9sy87Vn5KGN/99rnjZWrd76Glril+nVHnn9LP/bE237m/F9jfO3M1Rpp
8xZ8RFxCV8lDtEobP2vjAZY5Ogwut+1BvGmNtH2NfU8/zo3O9/NVd17ehj3X
e/RVbb4rPcfAevGv9rs9+0yZ43JbrvPot051jHG28v5RauJtD+t3S3zq7NvO
/Rzm34tQ2ThcG0dx1XXclt825Mbt+hHKLevJln4M4lzRdfXC9sjzyDblv49r
6O/8nrO9X4webrq/Ju9trD/274rYOFwxr6dztcXbSi429nwN7Vvibf37pe68
yO+QV+S3Dd93SELwdkryc4X6W/RpGzx91QxvXRjG4/1j8+eT9dfp2/ojWtxc
vusnf8TlAVNzPgA1c7rXxB/J3FuWt5342iAedHmP7Nz2mH/h75JZjnbka5Xj
bZP87Untcyjcb/3sd858reMvQz5T8Lp9fb5O59e6dq392yPv36H6+ImflX6t
/B7Itjnwby2Xe8F8b+2P1d0aEY9DkPrW9aS1PfI8sbwNqXadev/q8Dl3XP3W
v7X31XXzpU0Pn1/Xt2eoPj4V73p0fltZ/4ovftj1Qz9GvyK/reRtB+/sckfw
ffSpvyMUznu3FsTfS97G22pRfrINUft6PT5Xrn6PrDP5EPopDrfvhV97fntk
nKuN9XVxCsK/nfnUK8dpua7jd/f9xNOO37UrT2/iOy+QlrdVvcs1q6W/J/Tt
fG14B+s5V4K6Jo9t7npF4g2899si8iredlN/xLqyjLZdRwLdfj67XZK3tbps
66Jv5EmPGK8zzivzVN49L67s9xnzR/KmMRnat8THhvkQprGBt/0FeUV+W9Xn
eFv7fAn2JuNt9+nuvh+CdcDXY/tL9dvjFv841Jd4RO3ZN/VHr/3vreNj4xOO
qq9Vd/7txM/aPLYLf2r82iUe6/r26b/xGf3YWfafj6dr+3tuZ7an4fqozuaH
9v3ZkM/UIV9b0x4d92un530n/Npj+r9lvYnpfhyukPN4pOP7j19/tvZnehbX
v090Zn/cuiU+33V/Ztt3fP1n5l/fo4f9fvL5w3y2Vne/txfXW9sXxueW9CvH
C/1c/Yr8tl7+S/tOh4j308Ju4vQmeQ6PEst/IO/JGG/r9Hz9srzTfT/W6rHj
W/uxJ95Wyu7CuNGc7PWUB8FwtVZarvbOdunZfx3fu5qlp18wfq3Xe4oB7EY/
V83vj8X09vaEf4e6eIcz+Nqt8anR6zivMx6v27v34a6YT1v6k14vhqi84n6J
x9vee58i75Ut8bYyPtjdn2plP3peMU9/R16R3/ZJ+t7tjPq39sdh+3jYHLdn
jfdX6H0v/Nl+8Wut/rR42+/Th4e159r+bF2nrlxPrzof+hv0oXh8GO/q8bNC
f0Z/0N+oX5HfFolEIpFIJBKJvEK25rd15a2OHTt27NixY8eOHfsz7K35bZFI
JBKJRCKRyKfKbflt0dHR0dHR0dHR0Z+nl+JtAQAAAAAAeAta89uio6Ojo6Oj
o6OjP1VvzW97pjTb+Fv082ZywfZ9oH+Bfcy/fuG4IpFIJBKJRP6K3Jbf9njd
fDY+36/A9PfM8URHR0dHR0dH/0X9KfltexX+3tF3w/Tb/kbZFeOLRCKRSCQS
+QvyKfltf4mztbD+/Obx6z/DoD6T3FIeO3bs2C+wT79z3K3kU9qHHTv277Jf
ld9WGR8sY6/hbbu+Lx7zJmziba0/O2969muPuk5IJBJ5tFz5sePnP/+27x7R
PiQS+V3yivy2el7X7PoWO76Gt+26ztf7LnHkO+D8+cz4CT92RMSvtbat1wcd
3aDrVWTTvlR6+rz8Xfac9qM/Vzc8bQjj2/4ZIn7v/e1FR0d/t7433rb7c4LN
M+8zS7PZ3ADmEMPXTr6tHmWKvy3xtiZ/gvFtlTju7b5tkre1fmv/cTxtP43b
YJ4Hi1+rF3vpOu2Rn8+59b9ZmrF5QjuOkMZn7cccHsMizTZOyb//xiP1tHJ8
enV7e5HvmY+qt/zGlCNm2q1Gnxf+FolEHi335reVz0O5mSPU7NOGm1KfVX0x
3tb4riYOwfi0o+wn/3n0c/ve83PPwPScOA+peNtZmbbRl+18ntb6uSGnG1wf
037nl052uy92/CDK5fTcfNij2/Ok9C31ye2M9ofje+b45PQj+lfF2/aOty21
xxv7IX19Y9cn1p8rrmdMT7X/6Ot3RP9a5+NV8zfG23r483NbrofcnnD/oaOj
P0vfm9/2s/C2ypMLb/vnh40+7vzdk+rbeVvry5rjlFaen2tgfN9Pl+dwY8/a
Es72bWO87bjGm09mnMbv7OZngp5t9vqNfG3n+N3I9XF9FdfLex4k/t4J7Ffx
tkef54p+PIUnO6Id4zs+epj+qhqnW+/rQuZ4ttQ4p65Hap4+ZV5ecb6j5tFT
5mMoQ952Wvum54Pu08+Fu+5rJBL5brk3v+34/BN7tfmeyX6e90/rlpplvL5S
vG03+som3q8zLZ/+jfrE45q6LL8bQ+in1vitV/G2q/Hw/NtO8LNB3+bjhkS8
Wsg3xfinGP8R49v8fXpTedm+WH0pnq/2+FT/w/bmysf6V3t8yr7+m2rdn9C+
t77YeJR0FcT4qGC+ac/WJeurvR6peWn7U1t+y3iljo/tj90HsfrD/sfut9T4
xPqbm4+xfrXMV/l3Ra6+sJ6t80uJ54SF6j4JPV9faTxbrnfu+tVcz5r1b+v9
iI6Ovl3fG29rnofjp7la+zxc3LT5bOPf5yMPFK8nxtvaeISp3okPluXMNvG4
qhif4NaZ+L71epTmesO6asrE0CuVGV/h367iEQbn6+o+Ud5/fsVk6fhwf+1x
cr99Fu45b6qclPI8ufPJZ/mR+/fUFxuvve3bIi1vO847PXj+yPp+zsdHhr5Q
Tf9T86Y0D8+4nnvvi9y8T83LtZ9UPz4t8/GI+dY6v3rB207zZ+I7pr/P57hb
NcXdWh7XyNx6sWcebF3XSuvZUeOFRCL3yb35bcfn4eCglVr0UPrPQ1vfVH+O
t5Xxtnoub3xaPW/qz7/rdvi2KV/1qP0plPPbCv/WyiVfguNzU+VDfsHal3bp
GF/j271+BOXDsrHybv0fVs+F8G8A/zkQGddI/7w6Mv0P2xNte6R/cvxix8v6
5PlDe+z8sfEtta9cX/z+is8v3778nTpZ59+HVpOPO0u1yL66/lT/au356113
fUr1y+NT8z81P8P5HZbPzYfQnro+qfmVqr9kL82f0vGx+ZNrf8jb6sS7GOHm
/FtXf3idw/bF7KFf2nL9aq9/7vyl8cGOHfux9r35bfvwedj3y7NPPgeVzdmd
qqfkm47+rZp9WlPOxPT2o19r9n1mjjcVdxvzM/M+2vm+bV1+23lcgry2o98r
8ifEyrt1tcyT1ewvHXfWeWPn8Z8zdbyMPC52fO68qeNT9bXsj52ndL6W/tRK
NfJl8r5VdvlY7m+r9w3vtZf6V9v/3PXYO14xPZwHe+6L1uvaOt/D+vfMx5Zx
qpWStzW71JL3Rc2zS0X1WBzulnmQu65716cjxgeJRB4r9+a3dT6sex6m0C/x
fOv6ivG2/ZT/y8bdTnyt829lXEIsN1jJt43hbN+2Kr/t+CESf2v1OadarLw7
v29ftze+Pzx+S3m71tfUX9ueYQj4o4ieq6+mfK0ufYCcPRwPeXxsvPbUV5xP
Cb1fxdvm3u/sq+uvnU9SP+p61o5X7nyl+VkzX2PHl86fuz/OnI81x8f6l9PV
/F6ihR7nWuDXRqTuu1V9uflT096t61/p+h85Xujo6Pv0vfG2IW+7xNt6Z5lk
n4ifGuup4G210hM/26uFr53iEbpxf7Z8xu88yodt9W3bfpfMj79dYm0redvU
futH+P5EHb8Rlk/Zjzhv6jyx/Vvs4TjVHp9qT00/a8YrVy51fN18WkvznYtd
HvTg+7Z68JHjbWvGvaTXlNsz/jXH5+Zt7fE192OsndLnjPW3dl7Vzp+aebVn
fvXzdwLTHFOreNuULPG2W+ZBatxz1yN33ty6tOU+RCKR++Xe/LbjWjU41PC2
sfpK8bYSNj7B+rklv3Yss1qf0/aaMilb6TwS8XjbnB74t2bkV/G2LfWhn627
59sz2pPT7d+pFrm/N819f3d73zT+41rw4Ppq9aPGc+RjFz+2H3y/1ulqFW/7
rPmFjo7+TH1vftu+C56HgZ+ptW9L1tPwOwz298m0rPyBKPm2bbytlZH3yx7y
dxJyLffwqFfLfo5Z70d+rSvqd7f3TeN/dDuu7NcZPOSY70vPfuyyrfUpL9j9
1w+JRL5L7s1v28/fM8nn31r24nkYr68UbysR8rhPQi1na1AdbxvqeuY4esvd
NJZHR0dHv1kff9dnjFWw21p/UnvR0dHfo++Ntz1K1vK2T/ZrW5HPb1uSk397
1fVBIpFIJBKJfIPcm9/2KLuy+34Iqpjf9rrxx44dO3bs2LFj/wb73vy2R8nx
N8a1aPeXw8baXjW+SCQSiUQikb8g9+a3PVo3/u30e0jfK32/9trxRUdHR0dH
R0f/Zv0p8bZIJBKJRCKRSOReuTe/LTo6Ojo6Ojo6OvpT9D35bfXyW7vTho6O
jo6e1llP0dHR0c9fT7fmt7W/IQDaMI3bejzR0dG/X0/d/6yn14D1N5Kf52Ht
Q0ev1XP385Z4W61Yh/eg9PcGEon8Xhne//i11+LX199f7z/yu6RO5Pnfkt9W
4dvuwjJ+Oj6+vo4dO/Zvsof3P+vptfj19ffX+4/9u+z+fHb2Lflt5Vq8nCfQ
7e+Hpey/rCv+bkYif1aG93/Neop+nP7r6++v9x/5XTI1n7fkt63hGbq+z+q/
DOKd0NGv1/u/NUipvihL9dXWkyof3v/wttfi19ffX+u/kXZ7Qnvu1GvWrX72
1d66nlr7pnhbEb9r4eqdPn+6zttneVxRIln+2+2p+BAkEnme7Cv+vp6OObee
8P538Y8Sz12/3m7/9fX3p/o/31uW27Pb5A+dvN6o7eXHXAB6+p0npfP6ketg
zfr3uPW0mrct57eN8QyGlzX+6yL/jjGfTdku8HPfDNXLv0d8jPv7vnit8vFO
6OjoZ+g1a6jq+2J9kk/o+4BfkOtDonxNvK15ZnVdvL1m//RM+z2w/u7Xf6n/
5nPMrx2POfH8k8/mzrulvNG02+30Qegb60/dPy39rfVJW9ZTFayn/Yb11Nq3
5Le1f/N45xnceaxPO/nO/eTvzuNg+NyJw42X36p/Pp9D60vp8nrK6xbuz9VH
vBMSeb2Ua6XbutW+mnpKyNUTj7f11wfrv6bWj5z9an1ae9d2s//o871t/bVj
84T5n5p/3yrdvTUsfZZ+7pnnN36t4W2NNLq5V6VeKj/e2+NcnnK59mNOV53V
t6yH4T3Tvp6u189wfW1pRwot66mVW/LbluLDRt92MHW4+3rSe7c2z/xuDGY9
kFsNao/bi/DvHRmfYlHLGzzhuYSOjt6mN/O/ifUztZ6a55XlArr52WWP63o1
7+/n52QZ4drYulaWjk/Zz1iTz1p/Y8+cI+ZLyu9v0UvtaW3v7z1/hsXvsJ9L
W0v9WnXTtoyv82ONtN+xtLR/8pmGxcd1R01SB/rWv3Nb4mtvXU+virf14sMm
aeMR7DGf2b915dS4SU431e/w7/2av//dOnr+dSnHqxTm7Y/83YxEfqM8Oj7M
xT8O4z7pt/YzD2D5gH5ex53/q2eeoF/kWIuob8t62qKn6jvCr4vpZ6y/Ib96
FN96BW/rxr/u+F95/rhrPghurwxXtnY8O1NI+Ld2ndg+zmN7h+n+H/doOZvX
ei0f/ER59PsLy31xSH5bN2dc3K07n9KTn6uEf5sqb7D+e197+9acbvzvbleX
juppfji8B9Z6Ll6lVJ78gtixv9deyzOkypfibY1/2ot9lq91x+nJ5+3q1psc
b5teM9cyd7y/XwfldNSeqq/Un+GE9Xc8v7j+Vrd+o7Sn+N1VX7Tv99u+h+Ml
54dXh/bHcTXO0fO69sfqj82/p91fR9mltJvUU6ipf+Fq/zal3PfPkr+1f5+O
uvGHzPwsxp+6thpt4mOD9oXtnY972vjX2tvW03X5o/PbxuaPlca3/Sz87OTP
9uM1V2MbjW87xt32XbS8vB/9dWH9/cvR+3P9kjJ2PWT8V07+SrwTEvmN8ox4
W7k+jL5tirftfd52PD7D21qZWveklH6cPC62HofH5/aX7Kn25OTR62/c39RR
PSwXu87Sjw2PC3nW9XjE97eWq51/3yqnvtrNf58snBcWvj0th0VXK13N/u10
j6qJvzX3pZplRfsX3rafedulfXG5Jd72KfK6eNuW/Lb+vLC6zYtg426XeATz
N46ISzDH+xyuvw7L+lN/8/prdvx4WX/p+Fh/Qj13LXw+IV7+9+Kd0NG/Rz86
PixcT+0zcRjXx1S8rYrE28bXG4PcehhfS1350vdjqeNTfGO4v6b9/vgcv/56
/Obg+43y+sX74vod+scpfjem14xjzi7rC/sj7b/0/HE+YPgeWRrWnqt/5Gv7
zywNb/s3psbPUe49eXd/6omvHXnb9Hv4Xv2mnYOLt/30hnvsx/veSKkPw/Z4
2yfoj4q31Wnedph9WsszGP5WzXytiU0wXK2LV4iXb+FtQ/tQOL60f0i0K3Ud
3LvV/r5c/34qvyAS+WUy/15wOd9CNr+t1kv+r9j3YzV2qVsZW/difOqQ2C/t
sf3y/DneNtY+z8dNtN/Ks9bfFB/bytOmyl/J20p7rL2/8PwJ/Vg93zer+TAM
K92Vq5NTvK3ja906cWy8bU6+Pd5213p6Sn5bvZL2/YZFn+MTxr83+n7hI1Ll
DUq8gTw+XDv27s+1a5xzq7wZ834V3x+Tv5RfEB0d3dfT8bZ6kX5+W+1Jl99W
R+0pmVtXpX70/tJ5hwesvzG/fdBpvz3Ua8qvxiOxP3V8ke+NzLfY3xW/8vxZ
9jei+X6e+dvQ7sfb9pXxtpM+bkM83jYGF2/7nPG/az1d7o+N+W3D+ZOSn+4z
Hh/yxjkZ+/4qZZf3eWx/rr7SeWLS/zvCt0tbrp5fiXdCIpFrWYq3PUumvg+L
fY+eKpf73j22vsbKSXtsvc7Js9bf+PMjztPGjouPQ5zPjR0Xs8t6/fHUKz11
PWrm37dKuan5+lvudtkf5gU7MP+tyf+1Pd52arONt7XQUhH6m+Ntj15Pl/tj
V35bXZQhj/tUWcsbHCF/Kd4JHR3d10vxtshz5d3rb8ij3D3/7r4fruiv/Wx9
odh+u53SnsZ4W9dWvczeHN4cb3vWfN6X39aNZ0x2hb+fS+XPtpd5g3PO/yv5
BZFI5Frm8tv6Uif2Y99jv3v9TfGpd82/b5XTNmTmx+DsF/1eWaus+T0y1fB7
Z98oz8lvG9jRq/RfyS+IHTv2tb0Ub3v3+vTt+q+vv7/SfyNbtqe1H3ud/Zz8
tqF9SOzHLu2/Eu+ERCLXshxvmyqP/Qj7r6+/v95/5HfJU/Lb6rjd6tjz4xce
j46O/v16Kt72KevTt9t/ff399f6jf5d+Tn7blD89YM/YfyG/IBKJrLv/0+8v
pOrBvsf+6+vvr/cf+V3yzPy2oX3RsUftE4eukEjkj8pwPXjS+vTt9idcfyQS
ec56au/3ffltn+G3I5FI5FtkuH6yniKRSOQ2mVo/9+S3tXpoR0dHR0eP6+H6
yXqKjo6Ovk1PrZ/H5LdFIpFIZI1M57dNlRuwY8eO/Uvt+2Rq/dyV31bH7b6O
HTt27NitPVw/U+tpKLFjx479u+3t66u/fjr7sfltkcjvktN9c387kN9zPYi3
RSKRyGNkfbxtfX5bq4d2dKfbsQ7tzvas9qL7eur6oXM9turE26I/RXf7ntEe
9N/Q5bxLHT9sXE+t/Zz8tkj7t4SV/viJ/V/AQ3235Ppsnf920+KzzNsi7Xdc
j633X9/3VVv6vEG87ar/Q6Ed2LEfZVeR45/UPuxfaVexebdNnpLfVsft6HrZ
DKR/azb5d4Y87knt/1bdG/OG45/S/rfoR+QnPPt6hLKlvFL9kMLk16bL18bb
/n3Ktxc79p129/n4+j+fz+39w/5Me2zelda/2vV0mX/ktz1F+nzt4PG48vpu
iR/Uuv8r9/n7e6UbVP8ZdbO/+3vedn13aPv9dqf3N7XflO26Qf/5AGqUXVzf
MM9y7UltW+vzjuvF9RBSqzR/1yb7aP3LefRR54ldr+k8T7ivanjWcH6mpZtf
W+bx4sMK5PhaK/fG2xqfYfIb3P5QRyJrpP99bnne5fTS8Uikk8fxtuS3vUd3
+5zd7t9av/E1vP2z3vX9OGeMNH7unvbLdsfbLPvU2H7jf5vPZh5lpPFvW9sv
2xg93torx7+mf5PfF4MWfuf2+TT6YGM9/tjb48a+LH50e/11/dOin3ffT3X3
Wyu2tEfyt87XLYznznhb69tKe6hv7Q/6b+mx51PqeMvDpvTS8U/oL/ozdH+d
nj8Xyqfs5Le9T8otxXfG4nKT9Y1+zlR+EH6P8WeV4XTN97y6n3ncbXzewvPP
kLytnEebxqOfONnB+OLGf41JMx59t7HdcR5Ozl1dPd47eFtbVrX3Q55//NtF
T9c6dh6zf1jmxUH8rfJ54mldUdX8bSm+NrS3jEfN/RbGATmewN1/do6k5kut
LMXXru/fffltrR8r/VnJ21rfN7RLvje0x8vFz19qH/Y32Wv4Mzc/YvMwNr/i
8zQsp6PlnjU+2M+wt3xfUJLkt73ePo2729bPW/+4MI4hVb/1L4b5OW/5NOPH
Wr92ktNm9ve6b2r/sm8Y3DGJ/c3jY/zXOS4h6d9ae+P4h+Masy/fYVRc3039
m3V7XRa+c8P8mjh5/7qH5Zf5MGif3908f5U47xBIHfQnNX+2xtvWX9+W/oX3
miu3/fpute/Nb2v5MBnPOH6OlJP+RVg+ZZf7Y+cvtQ/7e+zeel5RPvZ3VWl+
LvxtZv7G9CeMD/Zz7HLe7V1fyW97rYy9P2al46u099nqpfqV5W219Q0cb2u2
PiFdnEJd++W8SvG2m+Jt51ha8wfU6L923SyFbmNyN4z7ch4d58NDvba+5n7O
12UPb+vHA+w/rkZOXPDsn/59Vn07b3vmfbW93BCdH1f344h4W6tLHlbaYzxt
qXys3F3XGXnl/TRUHx+bT7H5I+dZireNzbm7xwN5kTyQtyW/7bW6+SzHS14D
u6X0Uv3Kcmrz989KxNv2cyxCVFbGAy5zJNIf2b4h0GvHx+NlzUQL/Nsh4G1b
6q9pTyj31re6PmPMRef5m05v7M98rf14W98u4wYmvUseX9d+P7726Hhb/31K
1bSebLkesTVxT/uP7H9ML5Vf8bVDwL+K40N7qfwd44F+n+721R1fmk9SL/Gz
xOP+ri7nXer4YeN6au3ktz1HlvzZlKyp38Xbztyt5W37iaM1fqyU9t2y1vbL
ORjqy/Fbedt+8mH1p4vLOTahqd7EOMauQ329W/JAdIONF5FSbYgfHtueKTf5
myo43z5+1bbfnndLnoRYfK2cVyl5+PXw4tvDfCX3rA9789vGeDCfT3PlW3hb
eX7iH3/F3p7ftpQvoYW3jdfzpPHBfor9yHjb1jwJ5LfdrY/jrrVnN5+TfG1l
/S6+Moy37RZ/dnyX7E/38iU0tN/OEU8P+zOs+1dVv8fbdnGZjLdNt3fVxsj1
aL2em/o33m++f+vexzp+vvnx16oQD1tfn61n2/xZx9UO8357vP8eWeTv7wOu
hzw+vC/vWh/25reNva+eeq8n/d7ZVD79PlD6/KX2YX+P3X2uLx+bH+t4lvX3
A7H5FXvv8Unjg/0ce2zelda/2vV0mafkt71MyrHbw9sq8Z7PpE/rwsTbdqP8
7Mxze2q87cfG2yb8Whtv+6nnOWN/L5SOqx+HbeM48Z5zboOT55flb4+Lt93O
M+8Zz+J4b5lvOq9fLffG2yKRx96Pw+3tQP6aJL/tt+jyGpRkqT6Tn0mtfh9g
WHjao9orYXS7hftb6x/jDsxnVchv2xCPNbYtkYdidX5d396a/vV/5x233kj/
eB38HWLs03Emf4WK1pfTc+Vb42G73m/3cn9H4mvlefud939u/Vhy2yXt7fNt
mR87yh+p7423RUc/Spfr+RPag/4bupx31j4Uyqfsh8bbwjM0SbOl8iTIffbz
3e01MsWDbuGZV+NhcpWZ76D+Jt8ouy6u9/V5HcJxPm48ytfD5Dbt/trcdf24
5Y4fj5mP7xv7d0T5dbtdfd71D/hf2b+957XzSOaYldduz/XIzc/UvDhn3mTm
adDP1vy22LFjx/499n2S/Lb32s0mfdiU3X5+Wvt/1b6+Hs9q39vtdl2y8bil
8qX7Qwdb+fzh8ef3Px9ve876j0Qikd8kh1GS3/YJ0o5dzH4lb4Ssl0/h0b9V
+n/v/cb1yMfbOl8fiUQikXGZWk+tJL8tOnpat/fKU9rz6/o3XI9cvK2/KXR0
dHT0qB5fT+16S35bJDIn388Tfpd8//UI108ZfwsAAKAG6/VTSvLboqOjo1+n
l/LbAnAlNPMO3IKd8y6xftr5TH5bJBKJvE7m4m0BuB7MO/BGxNdTK/fmtzXf
r4W/P4REIpFIX8bWz5h+NcbcxQr/5nfBtQc3YOd6l14/J7k3v+2t0P295wcA
/AT2+p2p9dPyA3etp+Z3OJTW829y4OOACevfxwXgaOxdb9brp8fbHpDf9hLo
bq2H+wAA4GSYZU9b+bcp7T5LfeUqJtbPW9bTYeJrjV87bjN3i3/7gwjmXejP
4t+Cc7BzrYmun3rxV/fmt70KevyN+9mXNVJ9Vr7t9PumAABwLOx6OfIEg/Rv
deDXat+/VZIfeE68rfm9ZevTmlNbv7br4W9/D/nrjW8LnonWeNst+W0vgJp5
WhOHYD//+bfGn9XGz8WvBQCcDOvXDkPA34ZSbMuxD4m37Ua+dvbD5z5ZP3eK
T6jjb8PvrfkO+62IX2uuJzgXD4y3rYwP03Mc1/R9l5rXTKcX13LByy68rXZ+
7ejb9kKegLff2zXtPzq2StbztvUx1tYz25+qm3i3Z8HxtnH/dcXXiv0GE38b
jw+7+v2FTvCzVn7+pPlspdlKCO/z2GfwfnA9wTMRf3+hmCehIb9tCr3Kr48l
+3Qy68eKOIR5m/xax9+WIP2F2vv17Pv6CfWX4qta468kj3M29ra1VN+WOvae
76pzg3Ys/uzg+7Z9r5Lxt7Zcav28I9529G+V82+7Xjf5tQb4tt+BEsfE9QTn
4Ix4Wzef9+a3zWGK5fKPkX6yqo3rmjla48eO/uzfpjvD1XYLb+v83/Q7Zlv8
nrff1/i2+LZgP5bvvyLxtf3oD/ajXPO3a972CfG2BtaPDXnbWuDbfgt4lwy8
Eefmt83hEN52POHM1y5xtibGth9UL+ITFpnOC1byW2Kcborrzd3/uTKxGLVc
mZJtyzlL49Ki58Ym19dS+do4viPbGjs+LJe7NrF9peNL14fnyrMQ8ra99Q+F
fxvytwaTz/uMeFuJib/VI29by9da4Nt+C9bzrvTMAGA3dq53d+a37WeuInx+
m03rynwzoz9rYxH6RY6crZq2VN6EEDnfIeUTXbW/tVyqH1vK14xLzvcrlZH2
3FpZOkep71vbmvN1S2X37M8dm9LBPQh52zVfOyT420i87YPy2xq08rUW+LYA
gO3Yu97dl9+2T/jT9vxZ3laLONvRZ+0D/zbwbSvy3ZZ8uBiHhm97rG8bO09u
zK/wbWPtybX7qDmTOzalg3sh42s9nnZY75e8rYu3fU5+WwBGMO/ALTgj3vaa
/La9sn613NQiq/MoCl5WB36tibf1/NsMWnjbVBl82+N825o23+Hbbi275Xh8
23fAff/l4mlT8bXSr7XvFDwx3haACcw78Ebcl9925GWlP6uU599Wx9uOJ539
28HxttE424Z426N8nyP2b/FN97S/tK+m7FN826POlTrfWXNgS7vBvZDvkXn5
EobZvx2GVR6wYXhuvC0A+LbgHjww3vaq/LYWxndd8iHM8bYyL1jl7zbEvj9O
2WvKpGwt+2t9rFR9sc9hvbk+x8qW6gz3pdrVWv5M37bU1pxeOwdq6sz1tbYf
4Hq4eFvfb5V8bWr/WK4yv638/TMkEolEpuR9+W0PgxLP9xVPW/ce2V1o9Se3
1rcH+E/PBdfmWTBLXpi/Nu3vuiVyWnLj6yfxtuBOaOYduAU7511i/bTz+cz8
tqdBRZ73D/rN3RaOb099R+Hs+kE7uCbPguQLJr91liqv62X9ja+fj1hPwY+D
eQfeiPvy256Gh3K0AIDvxdb1Tun8+nn7egp+HMw7cAN2rnfp9VPwtifltwUA
gG+A5F/HXAhKz+8N5KXNk5CLD7s7vy0AAFyPvevdffltz4TpDwAAvAaJ9fMJ
6yn4YTDvwC04I972mvy2T4XNQfnp/Hxhqu+HrvuMEgAALMJ4W/cemc7K2Hu9
xNuCZ4F5B96I+/LbnoktvK3xZc1XhEba35Uw6Lvuz9ft/vxaE8erR1396X1H
XC8AwMeyKoqvs3Soi83tI94WPBHMO3AHHhhv+9L4sM/M1doYOAvj1yplf8/X
cLb9qJv9AACwrKN67bvm84Kt8yTk8tsCAACowRfkt51PJX/3IZQ1TRl9237y
4S2mOATjwxp/tp84WzX5txN/e1x8wtvzOb29/QDsxeK/DoF/O8T8Wp+3Ta2f
xNuCO8H3BeAenBFv6+bzW/Lbln6ft+n3ewVMfO30+w9zDIKeYhKm3z/rJnsE
Nb/3FStzJt5ePwBPheNtU/G2CV2teVvibcGzwLwDb8R35LcN4wha7ctxvc/H
6pmrNbEII2/bz7ytnvhcreK87ZbfRn27b/j29gOwFyueVu5L8LcGk89LvC14
Iph34AbsXO++Jb+t42V9P9u2o8jrdh/xvpgapdFNX2y8rZ43w9mW4m1jfp7c
F+N0U1xvzk/OlQn3S1nz22i53wNuaT8A347aeNuYHMup+Pr55vcXAABgO/au
d9+R39bysqF/ZbaJl7ZtVVGp+tlvHdz7Ylo5/3bJi6Am/7eUJyHn26Z81av2
t5ZL9WNreQC+FS3xtnaz5VLrJ/G24FYw78AtOCPe9n35bfuAd/bzTeZ5W+99
MRmToP18ti35bUu+bY5XjR1/5H58WwCOhfxdsqZ4W1GOeFvwTDDvwBvxHflt
lchHq+cHi5S5eFsbT2veDbNxBtO+af+WPLYtvG2qDL4tAO8C8bbg+8C8A3fg
gfG2N8SH9bNvbmPVJl9dLT57FW+ru4C3tfEHjqcdxyDIExZDKUY2Znuyb7un
/QB8O8hvCwAATwL5bQ2WeFs1xdkavlZH3hdTWi/+bQ6l96pa38VqfX8rF/NQ
8mFT9cU+h/Xm+gzAt6Ml3nZzftuAfwj5COzYsWP/eXti/Xxbftu9cHkSPqNP
a/Mk9HP+WuPTGh/Z/m6ZkU9DbQzB3voAAD7Ibwu+F8w78EZ8R37boxDmt7Uw
PG3fq8f1qYbnPaI+AEAZK542JTXxtuAtYN6BG7BzvfuW/LYAAHAXQt52zd+G
0h03liO/LQAACOxd774jvy0AANyNFW8b0fPxtuS3BQ8D8w7cgp3zLrp+vi+/
7ZlQmRwLAABAflvwvWDegTfiO/LbAgDA3SDeFnwfmHfgDjww3vbL4sP0wbyt
zadb8/tmAIDng/y2AADwJHxHfts3oJ/zik2/76sX3eYZAwC8G/vjbSvy2wJw
Ifi+ANyDM+Jt3Xz+lfy2EjaX7fi7Dyb31/z7D1aqjfe68WOVsr/vazjbftTD
34c4C0/J6/WUdgBwFMhvC74XzDvwRpDfNkTu93lr7DEsv+s7+rNzDl01+bex
fLoSufy1OdT+Bu7Vv5Wbq5/8uuDNIN4WfB+Yd+AG7FzvyG+7huVQ4tAL19KC
0a/V5jd9u9GXNddtlGraP/m9cVzp217hUz7FxwbgKITxtuX8tpl4W/LbAgB+
HnvXO/LbhjiDtx3mMZ7GVTneVpffK7M+Xkraz6G/G+6TesyfjfmSNcen6i2V
T/WzdBwAT8X+eFvy24KHgXkHbsEZ8ba/nd+2V7NfH/hsZtNjLK4/ZgvnvXDf
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
+3Lv+Sx/a3br0T7LYVj8XN1Yv/HrTLnc8Za3bW1v9L6P3P+l+mp521T5Q+Nt
U7ztyNE6ntb6tNavNbztYGUGZh7JrQZnrxFP8Z3DeRDjaUtzhfgpJBL5JNn2
/ea6fDreVk//60nK98js1i3PufXxJX39nCofH9Nry7fqtc+LXH2//n6G2SRv
a+ZW16mFLzyCt+1nvtbytyHMO4+91rOtrX7z3UOfiae18ba2f1ePb31cU+r6
JHjbo/Pben7tZ45F+Ezxtf3H+b+W0w3fOxvWfmSNX/kU3/MK5OZC3d9A5LfF
jh37c+z1vG28fD6/rQ5qiuvS7606PvBHQz1Wfjomrbe0t1YvPy/y5clvK3nb
Kc62n98/NByu5W331G/jaq1/a2MTzHtPk187LL7tpvbP/K0a296L7/En3lZu
V49vW7ztuvxV+W215G71zNcqw1F3a7834teObYr4qXJfjNNNcb05PzlXJtwv
ZYpTruGbY/Vu8ctT8bY1+PX4KSQS+Sx5Fm876XXS+rSf3vJxLt42PD7kX8P9
OX429VwJ7eH7S6n9NTL1vKgp/+vPCzv29rOa58bI1878rZHdjnwHnalDT3xi
yN9+TJ46E/ughx38sJrrVMs1Ha/rA353bi9ve0l+W8nFLvG2/cjZGv9Wq8Ce
QM63TfmqV+1vLZfqR+5zDWI8R4tva2CvZ3h90dHR0a/Uz4m31UENed08A7s5
TqF0fIpv9Z8H6+P9dX59fMleOn9Kr3texMv/+vNi9JPE3xNnnG+M2539VxuS
YPlbw9cu/O0ck9Bav/VlLX8r/du7x/dR8bZhnL7uHF/r+bVu0zbHrUrHIliU
fNscrxo7/sj9T/Bt98Yk/Hr8FBKJfJY8Ld521Id5vx930NXE2wblrX1Zr8P6
w+dBYn/q+Bq+1/uuL9E+2f6a50Wu/K+/n2E2ydtG52/354cavzGQ1fNfOf/W
XglDLVr+1sYjbIm3tfeX8297Lz7h7vHdHW97VX5bmxdhMP7ttGnh3zrf9hje
NlXmW31bFcyDLe+Ska8QHR39SXoqv0LfZ/ItiPLx/LbzcUKOfmywd83TlqXP
m673h/ba/bXlamX4LFDZ50W8Hp4X6/y2oV33annHfpzP5v2szHxdlR+G2Yd1
vK3N5eHib52v3dr+JQZh/izjb+8e31x+FXn/p8pfnt+2nzhc59d+XP4vy9lW
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
9z2Mz9seFW9rMH5fPjjfa23/rDxpo/fG/1KTr21kP382MnZ8q96JBll7yO/l
2lerx9aeI9rv6n/m+LboZ45Pqf691xcd/W36uM/6tUMgw/3a520nnzf+vCnr
5vOx8ba10sL4rR/Pn13ry/eXBbT4tjXHtWArV4xvC67GKfG2kfy24zm0i69d
/NoT422lDHmEFG+W4hPl/j2yzNvm23fE+fO8bW09vrxqfI9qf2rcj5S5+om3
Rf6WnD5YfzXcwv1fydtm+Fr7uQb4tgDU4ML8tvMhqTwJw851Rgtp33Wy/OLa
Ho93lPyh5RfD/Xtk7LyxuMxsPOYD5FPHt0Um42EvqP/p1xeJPFqOn/W8yc+B
no+3HVbPm5I+fTwmv+1WmFMZnraf/dgpLs/F2xp/t+ZdstTf9tYWHlv63Ap8
W/AahP5osD68Mb/tx3t/Xwf6JB1vpr39a15Rr/b7Ukf3Oz5Rr/aH5fO8bbz+
reevLZ+zP2F8j7DnxueI8SvVf3b/sGN/jn2S6/wIhXjbOQb17bytQT/HJYT5
bSdft52zDfcd6dumjsG3Be/BdfltW+KjtvVkzSem+MVYvKON/1ziQft4PGgo
h8j+XDyl/Hs7Fn9bKl97/lS8Z035lP0p47vHHo5/iTd/Wv3Ysb/RPu7T8zYU
pH5mvO1emFN+5u8sbbxta+6v1D58WwAcTom3zfC2tX9nb+1Hmj/w5ZnxjtKv
3FrP2+Mx39z+I67fN48PEtkupw8hP6sXPSXncl/A256NI/3Ho31RfFtwPa7L
bzt49Q/LwheLj9rWE78aHe4Xdu89pA3lc/ZiHGemfLZdB7XvCvuZ43u2fc/1
K9m/5fpix95qt7Zxk58D/cn5bZ+MMP625fhY/O7Wcx9VJwC7sPxdfG5+2+t4
WyuHhMSOHTt27Nfapw8yv23qOPMZ3hYAsA/X5be9It72TL30d+nZ50dHR0d/
qz7um31WPQyLD2seF6GU/q3Bt8TbAgCuwSnxtpH8tlfxtgAAAJ6FMN42ydsO
vl8LbwsA2IYL89vq+PFHxdsCAAB4LrbyttoWGLY9T+7ObwsAuBihPxqsD0fn
t4W3BQCA30I63tY+b4ZFerztF+W3BQBcie/JbwsAAOC5IN4WAHAFTom3hbcF
AAAwIxlvu9id9ONtp/3wtgCANnxPflsJ+1tZaft35t17S7++4fqc2bZvGJ+z
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
jrdt0z2+Vgd/nwXHhecjvy06Ojr6cbqNqV3HIzg5xd72dfVpXTy/WvICDL6c
xPKcUkp5fq19duXPP8V1er97NscnyPwM7vnvZK5/476q/qff71FBP7c8zyxf
V+PPWN/2rPlj/fgQ631mz9xXFcbbPut+MEjlV5Dz8Or8tiH/2PeTjzzysYvs
A93JPsyTkOFnU+97WT08PlZ+7K/kbVV8f8qe41vDONsxvlYl9mf43xbetqQb
WYq3DY+T+8lvi0QikcdJZdbeJd527dfaeFtVmdfmv+3dAZaqOtOF4TMn5+Sc
mBNz8l7UCIRAAgJG+3nX8t+9KRLA+62/61SX5Zp+2/F8hObVF9C9LpfLKJe4
hLpn7vr3zys9Phf2yDOfPXWvem5732f499z2VlC3Ley3DbXMx1Xut/HQp2+e
B7r/u+XvkKGXN5W/pPKb0+u2kQ/vfTjSFMyX/Xbdfb7tqM92Tpvpq2hdXz8d
kjo+rN8O1wefWj93PN4vtW5Jh//eiOPD+W9L+6ztt417EsJ5Q9+dH/fTpNbF
19Nvy/M8v58PM77uScnSfNvLcf22sS5/z2nm+s/vCehezatW2/lmMG/18Tms
bvn1mU9fd+u3bV/PMUeI7/H77DVvbDCP66z//TQFf7sPfbYvVzBf9tv9EfNt
x39Xb0f5bPj3zOWS9tPPkc3t97d8Td9Lpt+WUkp31Oesr3v99t9TE/7ek1C0
b1nd9jHjtRm8nv0D7Xv9tv381O7vsP9u10uo4zajzz7Fc7T267d91oNvY1J+
6++zx9+jl/OZ4I/830+qbts/YPd+Depiz8P573/7fj1ivm1pPZOW61K/7W30
3+/4uPm24uLi4vXG2zY+f/3+uTkJi9d/fY6s+70V5iU8/KMPd9AHMfie2Ots
v+3gmQruf9hfEWboLvna/vutiYfvoHjNDAj5bPj3TTP+frDmOji3gvs/Kr73
fNtP1zd/1avbUkopLdFP/7545FqX1/dh3fV66T9ftnn/en4P0rr1iPm2Xvu/
lvptz/b6bXme5+v14Xd5Lfezl++frY774ev1e8+3nf49vY28+Jb4p/8dPlR1
W0oprVnr+X2xq1b0e5DWrXvPt71m6o/i2+L5ftvzvPm2PM/zPM/X6veeb/vK
x0I98uWjfE18VXz4WdZ29LlWnud5nud5fuhTeerW+bah7kgppZRSSunZ2uWj
o3rubVC3Xdtv2zTT+mP8EhcXFxcXFxcXFz8ovvd825A3p+LL/RHi4uLi4uLi
4uLi2+Ihtw112zi+eb7tK2eeximllFJKKT1CQ/22vN+2bL7tsG4bx4/0//79
O+16j2ud+3y1+O7Za7ofnud5nuf5ji7/3L3ftu3rtiHXTJ13hJZcrzsnPi8c
y61b8kfpUdcNz5x6P/Z4nymllFJKz9ZX78DaOQlN2XzbUX2vTZ+/py+53iuX
G8T7/G5+/zieO38v/6oP77h//Pxnr+d5nud5nj/Cp/tt+/i7823n6nupeuFc
fXKpvhgfj89N3d9w35Qu3d9w3zX3tbR+y7o15889f+q/y9L6uefNXY9SSiml
9Cxd32+7br5tSf9rqEvG/avx8dz59/uNrpe6frx+ab+S+9tyv8P68qT++8bz
596PpestvX9xf+0wz85dj+d5nud5/ix/SL/tYL5tSd02VY8c+tLjYd8lH6+b
qxuvub/UfeXW73HdpbrsXD15ad3S+7d0PHc9SimllNKz9Oj5tqN63zP+qjc+
j4/rkO3r/El9Mlo/qT+2037b3PWn9dP195dbH8fbdtyv+snnL13f3+/4/lP7
j/30fx/i4uLi4uLi4kfFj55vW1I3/GTddo/72LI+Vbc96/nXHC+p25bsSyml
lFJ6hh4933b69+rH+anj9+sljqfro9Pzgx/eT+xT+4X4mvuLz19aPxfPPU9q
v9zzh3jq+qnnza1/5/z4ejzP8zzP80f7o+fbpuKUUkoppZQeoUfPt03FeZ7n
eZ7nef4If/R821ScUkoppZTSI/To+bZdf8Jjb0oppZRSSo/Vc+bbAgAAAMv0
eej29WfMtwUAAADW0KWVbdD/X82CDjlnvi0AAACwTMg/730At2F+275y3Ec+
247z26Zfd8Z8WwAAAKCUkNfeIm1jHbzCOUfPt5XbAgAAoIS+bpvOX+f7E0J9
9fj5tnJbAAAArOGVx97GOe312kzy21Td9sj5tnJbAAAAlPDqb03013Z57eV6
veuk3zau2x4431ZuCwAAgDXEddtHXtuM8tu4ftvRPD9LZr4tAAAAPk1ftx33
IQzrtWO/0G974HzbuVdAXPydOAAA+C3GeW3T12lvqXx3Wrc13xYAAACfph3U
X4f5baq/dlS3bd7ptzXfFgAAAMcxmft1m2o8B+x2O7Df1nxbAAAArCTut81r
e//ZfFsAAADUSmp+bS7PDevMtwUAAEANtIM8NNRlQz/tkm/juq35tgAAAKiA
vj92HaEvwXxbAAAA1MCw/nqfhdBpM9ZrMz0e5iS07fHzbQEAAICzOHq+LQAA
AFBC3G/bf46sXdThuqPn2wIAAABreWWZg/aAyZzbwSucc/R8WwAAAKCE6Xzb
uH4bzwXr67f3dSfMtwUAAADWMPk+soT/1HzbQDcvIbyC/xaG9772vresOYJa
3v8a3gsAAFAnwzkJy9/b0E58WHf0fNuOOJ9J5XtH5zzv7j9cvyW//SQl7z8A
AEAtTOq0t3z9tqN5fpbsyPm29z0yeVRcF02dvxSP65HxOSX758jl4rn7m7u3
+P5TPrV2zXOUnLf2/c89f+7+11x/63MDAIDvIu63jV/z38Ob6Lc9eL5tSe40
R8n5uZxnz7pt7HP3V1KnXrP/O70RpTXztc+3FF9zrbljqfwfAAD8Jlv7bUPd
9hPzbdf2JJTUBXPr3yGXey7dX2nutrR/bv1a1tx/6pzUfiV18Xdy29waAADw
3cz32077a0e+eaffdp/5tmtylS25T8kea1ibe+auXVtu+876NXG5LQAAyDHb
bxvrWf220XzbM/4mvzbX2vI3/a17rX3+XN13bU9C7vrv5uZn9SSU7A8AAL6X
b5lvG/KQ3N+sS//mPfRxbOv+S6zdu+Q+l/aIf557/jX3n7v+0nuYe39L3v+1
e8zFcs8BAAC+n2+Yb4t9kdcBAIBf41vm2+J9SmrHAAAAv0Dt820BAACAHN80
3xYAAAAo4Rvn2wIAAABD+rrt9823BQAAAFKM6rSZcz4x3xYAAADIMddve89V
79o+9eGHfQn3dSfNtwUAAABKGdZtX8eic8y3BQAAQM3Mzbe912ubqH7bfH6+
rRmtD/768wMAACyRqtu+YtE5n5pvm/oe1W9i7/v9tucHAAA4mu39tufOty3J
45ZqusNjW+K5/eN4fM/x2r33BwAAQM/Wftuz5tvm8ri5XDD2cb5ZGs/tn9tr
bo899wcAAPjrzM237ftt23S/7cnzbffKbbf6VN01l/uW3OM7+8ttAQAA0ky+
h2x4LPKfmG9bQ2679vprztnj+QAAAP46c/22c9+z+8n5tmtzz0/ntkfurycB
AABgnlR9dq5e+8n5tls/i5X6HNYan9p/6Rpzeeea+y99BgAAADyYm287rdO2
Ex/WnTnfFgAAAMhRXb9tYr4tAAAAsERpv+20nhvVbQ+ebwsAAACUsrXf9qz5
tgAAAECO+X7baX/tyJ883xYAAAAopbp+21bdFgAAAOv4pvm2AAAAQAlr+m3D
K6w7c74tAAAAMIf5tgAAAPg1quu3jebb5r7va29y3y0GAACA+vim+bZn55Ry
WAAAgO/kG+bb5nLNYW03de6aeOp6JWvjn3P7y58BAAD2o6/b1j/fdikPnMsl
t8a39CTEa7buDwAAgPfJ9yGM53+FNWfNt30ntw1+rnZbsn7t8a37AwAAYBv3
v/+3bf7E5NrH+rPm276TO74b33JcbgsAAPAZulrstWl7/f+16NtQlT1vvu2e
uW2ubru1J2Hr9QEAAPA+bZSHxhqfNzjyOn7GfNtUP0Gu5yAm91muNfHStblz
AAAAsDfbehICZ8y3/UXktgAAAPsS97nGeelcvXa4/qz5tt9Orq4MAACAPdlW
vz1rvi0AAACwRL7fdrn/dlu/7bb5tgAAAECeCvttE/NtAQAAgCXW1msX+20P
nm8LAAAAlLNnv+3+820BAACAJb5lvi0AAABQRoX9tn9gvi0AAAD25Vfm274z
O7a2ebM13QsAAMD38t3zbePvt12DfBIAAOD7+aX5tnF+mvJztd3gl+Jx7ry0
/9Ka0vjc9XPn5M7L7T08DgAA8NeoZb7tUm47lwsOfy7JjUv3T+WtS/Gl65Ts
uWb/3N5zuS4AAEDt9PXXRyb6yCv/z1Pb21Mj3zx83x5bz3zbXO6Zes2tze2X
2n9pfcn+a49v3T+3t9otAAD4dh557fPntvez2vbraplvuzb3W1qb269kf7kt
AADAubz6W7v67K3PW+PXpH47WFfLfNvc3+hza9fmsp/oSVi6n5L9l46X7AsA
APANLNVnkz7qSfj0fNu5XoOlc+b6S0v2iH9OrZ3LN0viJXuvvX7qnpf2ntsD
AACgVvq6bTp/ndZro7ptU8d82xrZ0gdx5vUBAAB+lWF99nJtkn0Jl+s1Ubet
Z77tp8nVjktqy0deHwAA4NcZ9ds+89fr/7nt5XId1Wk7fz/+zG+7eu19XVPP
fFsAAACgY1y3DXlsM853n74Z1G3DZ8lqmG8LAACAv82o33ZYp732ddpRvfbV
f5vot/3wfFsAAACgIzUPYa5eO6zbzvfbnj/fFgAAAH+bdlB/jecgDD8/lvp+
srCulvm2AAAAQMdkLsLgWJgPlqrbHtZvu3K+LQAAADBft53/PjLzbQEAAFA7
TTuu3U7z3F4DZ863XfrerjW8O/v1nfUl9/3p2bSfvP6nZ/SaDQwAwHfTPuuw
W3jUcM+fb3tU7nFWTvOp3Kn2nC31XcA13MfR6wAAwP6Ez4d1NdnrUP9/zfnA
0fNtw36UUkoppZTmNZ1flupXzLcN+/cHxMXFxcXFxcXFq4q/R5xPbvVnzbdN
5+Pp9dM4pZRSSimtXW+3pfhc/nd7rR0ff6Nu+7H5tu2Mj4+XrhcXFxcXFxcX
F/9sPHd+SR48jZf6s+bbfubfB+Li4uLi4uLi4p+PNwvn9z8H/46eMd+2f86x
D88w9z7EzzzYged5nud5nq/KxzziuXxvkhcnfVscP2e+bap/tnmdO32udnTe
0vNTSimllNK6NfS+zuV14eeHP7vfdst82+l5/f1P199u4+cEAADAtxDnbmX5
3zTf3eaPnm/7eqo2fq7Semx8Xzee53me53m+Yj+voX47PN7/HPw7esZ82/65
x/eee/7UewYAAICaifO50vwvPY92rT9nvm2u33Z+3tnrOcNOlfx7hOd5nud5
nh/7OU332/b5YzgWH9+iZ8y37Z9/en7/HNP3IfXeAQAAoF7ivG8u34vzx1y8
1Nc/3zZsEue4PM/zPM/zfE0+l8+l4/3Pu9VtT5tvO/e8aY1/BgAAQN2src9O
6pnx+lF+mo+fM9/2ljxvTsd16+V+27l/L4iLi4uLi4uLi58b31Zv7ffYrW57
+HzbbajZAgAAfAfv523jfHKrP3q+bV+HbUY6/Lxcyvs+MkoppZTS79PHqyzf
G9ZW+33qnm8bXjzP8zzP8zx/lj9qvm2Yl8DzPM/zPM/zZ/m959t2tWZKKaWU
Uko/paP+gjf6bSmllFJKKa1Rt8y3HXtxcXFxcXFxcXHxOuJb5ttSSimllFJa
o26Zb8vzPM/zPM/zNXr9tpRSSiml9Fd0y3xbnud5nud5nq/Rb5lvSyml9Aht
Zr9nh1L6d7V7jeddHXSd5lLF876rW+bb8jzP8/v7x++vazX3w/N8Hb7La0Nu
e9T1urz2/vMrv63n+dd6/baUUlqT3n+s4D4opfVoz5b1l2tzf12bx8/X+8/N
K97ls03z775/c/339fVb823FxcXFxcXFxX833uW0XUrXadPp/8e7n7v4o17b
Tl6j+m3lzxfHzbellNJaVL8tpXSq3eudfttQtx3Wb7vabYg3Xd322tVtm7s2
3163Nd+W53m+Cv/4HaPfluf5sX+73/b5/1eGdP+WHp5/r9+2zSCvref513r9
tpRSWpMGPn0flNJ6tGfL+rZN5Lb3fHd83rfXa4Oab8vzPM/zPP+7fq5uW8v9
7e3Nt6WU0lpUvy2ldKrd651+20cee3usf8iz/6mO59tbzbfleZ6vwz9+f+m3
5Xl+7N/tt20K+m1ret53vX5bSimtSe8/VnAflNJ6tGfL+vvfg17rH/rTdVvz
bcXFxcXFxcXFfzb+6me43V7a9z99/v72jptvSymltah+W0rpVLvXO/22TfPo
t70feepP123Nt+V5nq/CP34H6bfleX7s3++37XLb5rXP3Tf6bSmllJ6hgU/f
B6W0Hu2p437qVvNteZ7neZ7n+V/x5ttSSimllNJfUfNteZ7neZ7n+V/xs/22
l0Hee5RexMXFxcXFxcXFxfeMd6+Q107n207Xtcv75eLx/fA8z/M8z/P8rr4d
9NtSSimllFL6C3qt5D4opZRSSil9X/8DDLerLA==
    "], {{0, 625}, {695, 0}}, {0, 
    255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{Automatic, 392.46402877697415`},
  ImageSizeRaw->{695, 625},
  PlotRange->{{0, 695}, {0, 625}}]], "Figure",
 Editable->True,
 CellFrame->True,
 CellChangeTimes->{3.4730025877017384`*^9},
 Magnification->0.77]
}, Open  ]],

Cell["Wolfram Workbench in Debug perspective", "Figure Title",
 CellChangeTimes->{3.47428975525968*^9},
 CellTags->"fWWDebugPerspective"],

Cell[CellGroupData[{

Cell["Discussion", "Heading2",
 CellMargins->{{0, 36}, {0, 10}}],

Cell[TextData[{
 "Many old-time Mathematica users feel that it is sacrilegious (or perhaps \
just frustrating) to leave the comfortable Mathematica frontend just to \
debug. If you don\[CloseCurlyQuote]t have such a prejudice, your willingness \
will be rewarded. There is nothing like debugging within a real debugging \
environment! If you are a Java or C programmer who is used to such luxuries, \
the Eclipse-based Workbench environment is a must-have. Eclipse ",
 StyleBox["\[InvisibleSpace]",
  FontSize->0],
 "is an open source framework for building integrated software development \
environments (IDEs) that first gained popularity with Java developers. \
Wolfram used Eclipse to build an alternative development environment for ",
 StyleBox["Mathematica as an alter",
  FontTracking->"SemiCondensed"],
 "native to the traditional frontend. However, you don\[CloseCurlyQuote]t \
need to abandon the traditional Mathematica interface to use Workbench to \
debug. In this section, I refer to",
 " ",
 StyleBox["\[InvisibleSpace]",
  FontSize->0],
 "Eclipse when speaking about generic features that are true about all",
 StyleBox[" Eclipse IDEs",
  FontTracking->"SemiCondensed"],
 " and Workbench when speaking about features of Workbench in particular."
}], "Text",
 CellChangeTimes->{{3.472926856306859*^9, 3.472926993387142*^9}, {
   3.474289712140543*^9, 3.47428972751549*^9}, 3.47429015524552*^9, {
   3.474389345715393*^9, 3.474389370331891*^9}, {3.4768068918233633`*^9, 
   3.4768068920174828`*^9}, {3.4855297431709137`*^9, 3.4855297652685413`*^9}}],

Cell[TextData[{
 "If you have never used more traditional languages, such as Java, C, C++ and \
C#, then you are likely to find working in Workbench somewhat foreign. To \
avoid being frustrated, you should keep a few ideas in mind. First, because \
Workbench is built on top of Eclipse and Eclipse was built outside of \
Wolfram, you should not expect Workbench to have the same look and feel as \
the traditional frontend. You should approach it as you would approach any \
new piece of software\[LongDash]with an open mind and no preconceptions. For \
example, you should not expect to debug code that is written using all the \
fancy mathematical typesetting features available in a notebook. If you \
developed code solely using the ",
 StyleBox[".nb", "Emphasis"],
 " format, you should save your code as a ",
 StyleBox[".m", "Emphasis"],
 ", which is a pure text format. This is not to say you \
can\[CloseCurlyQuote]t launch notebooks from Eclipse (the solution shows this \
is possible) but rather you should make all code that you wish to debug \
available in text format. "
}], "Text",
 CellChangeTimes->{{3.472927006321673*^9, 3.472927070507614*^9}, {
  3.4729271079309397`*^9, 3.4729271126479483`*^9}}],

Cell["\<\
Another important concept of Eclipse is that it wants to manage all the \
source code under a project. Projects in Eclipse typically correspond to \
directories under a specific root directory you choose when Eclipse is \
installed. It is possible to specify other directories outside this \
hierarchy, but you will not automatically pick up files that happen to be in \
an existing location. You can use File, Import for that purpose.\
\>", "Text",
 CellChangeTimes->{{3.4729271272012*^9, 3.4729271642324257`*^9}}],

Cell[TextData[{
 "In addition to source code\[Dash]level breakpoints, Workbench supports \
message breakpoints that break when a function emits any error message and \
symbol breakpoints that provide a convenient way to place a breakpoint on an \
overloaded function name. For example, a symbol breakpoint can be used to put \
a break on all three variants of the Ackermann function ",
 StyleBox["A", "Literal"],
 ". The three types of breakpoints are accessible from the Breakpoints tab \
shown in ",
 ButtonBox["Figure 19-6",
  BaseStyle->"Hyperlink",
  ButtonData->"fWWBreakpointsTab"],
 ". The message break is set using ",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJylVMENwzAItNRO0A06gzfpCHnw7TzeiZ0oYLBxajtSGwmRC/YdnJO83sfz
SCndOB4WdyIkuRBr/hVLrs/+y413qDmmESOs6ysdzCMujDl2fU3nLUn1FTPn
gG2982770X25ziL3pXIhcF9Q8dKfNkvoR7ly4DEOqe/8UW1bC95Hblj6IcuX
/pTc5wqc6gekruW94tz/2JPOKtoFqECfr2vB9P3xve5x97py4an+5Q+ad+Gc
JAMngMqfM3IYxhOe+ePnQ2A8cS+1Z6LlePv+cMga0XXPI5Z1jqffC/bzkj5U
z3xp2NY3vDovwyv9r/rF/8W9uMJX/5WdfsQfUy4YWg==
     "], {{0, 18}, {18, 0}}, {0, 
     255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{18, 18},
   PlotRange->{{0, 18}, {0, 18}}]], "Input"],
 ", and  ",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJylVMERAyEIdCapIB2kBjtJCffgm3rsiZ6IiKvoGW8yeTAMiMuycvd6H88j
hHDL9qh2F2FhZvnbDzmpsUyx1sX9+Qo/xSkOBWfHp+GK66M4rX/s5nhYLxnu
z/hC2p+sVu8rn2xJ8znH6pf6yDi/1hYM6tySYcDPep50yAYv0EVzVHmA14U+
uGu9Y5nRMBSPim/nTrfTnI4HsDgZToycTbpu7N510KrOr7pw1afoTXmWKJRD
w6Fpn9y+QJf2zh2LKyci4wNe6r/qM+zLiAU+6mER8qz2B+/mMBQPfFDX9HL7
03hNb97M8UH9lk/hAV5u/4QLH72Lcx8vv695n2ps/XnQaacPT7vg9TB9O+av
/5+r8w9GSRiN
     "], {{0, 18}, {18, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{18, 18},
   PlotRange->{{0, 18}, {0, 18}}]], "Input"],
 " is used for symbol breakpoints. There are also buttons for clearing \
selected breakpoints, ",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJwLyk9STGJgYGAGYiEoZvn//8z/UUw6njlzJhiTKoeuLi0tDat6mBhMnlgz
kPm4xMkxi1gz8JlFqhkwDFKP7ieYGClxhs0MGE2qW3C5hxizsJmBi08ofAnF
NbIaYsMFVzwS6zd8+YLUOKM3BgDrb0gq
     "], {{0, 18}, {18, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{18, 18},
   PlotRange->{{0, 18}, {0, 18}}]], "Input"],
 ", or all breakpoints, ",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzVlMENgCAMRUl0Bu+u5AgeuDoPO7ETKrGG1M+3EC+a/AMtfa2/xmVb59U5
NxyaLo0pxfSt5PkvN4SQhe6zHONKHapnOQs3xpilOSjXOi9i25ncX+GU6vVX
5L2/2eXMZ9y2Rz6vsNDOyl5Pdt1fxJQzilu/B8ZAZ8bVLOmFvKgzsb/o7hnT
PSXW+39AvqL3auFamBZ/GVN7oc8t85b1upblLP6y/dRz79w+/ZO7A0B7feU=

     "], {{0, 22}, {22, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{22, 22},
   PlotRange->{{0, 22}, {0, 22}}]], "Input"],
 ", and you can uncheck a breakpoint in the list to temporarily disable it."
}], "Text",
 CellChangeTimes->{{3.472927192180442*^9, 3.4729272322346478`*^9}, {
  3.472930020478642*^9, 3.472930114272244*^9}, {3.473002083266574*^9, 
  3.473002084477829*^9}, {3.474289797705027*^9, 3.474289855627718*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnV22qjC2Rr2jbkduG+hJNaEefL3t4a36UV2gT5YRozE7P2uFIGE55xjf
cIsYAofDdGGEf/7/v/7vX5fL5R/3/Pty+Z//3B//93ZbboQQQgghhBBCCCGE
EEIIIYSQ4zPPMyGEEHLaSDx3tGt7OvtyXciAsbSfEULGS+kYY+n4g+fGj6X9
jRAyXnLHGEvHHlw3fiztb4SQ8YLryAixtL8RQsbL77juRgaOpf2NEPLO9XoV
Ze92ftl1y7Lcput8m6br49E9P/qY/6uxtL8RQt5Z/VNG6rot7fyq61bPXW/z
/dH9PT+f4zt9ws9UmtdwHSH209N1Fuq6y+Wimq5JynWujpvn1XGvzGudd7Q7
fBxH90HqunCfrU3HdYT8Tnqew6zRw3Wxc7QOqs3/dddN9+17d1scN73FSSEj
ua7WRo9lxPvge9/9nIbrCCGtOYvratnbdZPz20fmtOuuqXnLcZSet6ZXO99Y
Rmk/dK/V3o/rCCGljOA697dP/Hr8WJq/1E7ufaXp4brEx9bX93VzeP7y+px+
S45b0boufpyif6r4PfH01N8x0jZy75NOa/WdxHO4jhBSyzfHpqS8VZon5yxJ
myVXSvsSrkvq+JrzWWncSs51IfH0mhNz7owfJV6VtCGZ3qu2w3WEkB4ZwXWp
mkxaB2pcl3tfzXc51+WTH7fSUtflnBi+npoez/Mt18XTWj3n4RwmIWRrjnad
tN7aOl0ytkVzDrOYKT9uZavrWt4fvq5dlvT1VJ9yr9U8lxubgusIIa359m8O
amNUvuW6lNe6uU45bsXR4rrafOF0zbw9XFd7Lee60Gm56biOEPLtbHWdn9bj
HGbL2JTauBS/LhrX1cat5GogT8kVqflybdTmKb2u8W68zFTbNdf5aF7DdYSQ
b2WU35LvvY7TfXU0SY5bUbaxRxxH92GPWNrfCCHjBdedK46j+4DrCCFnC64j
I8TS/kYIGS+4jowQS/sbIWS84DoyQiztb4SQ8YLryAixtL8RQsZLyXWWcvSx
nNRdRwgheybnuqOPf4QQQkiP4DpCCCHWI3Hd0edZCSGEkJbgOkIIIdaD6wgh
v5hlSR/ziM1thuuI1dTGXOVe25xl2m+99mz7x3Lm47ZqPefLI7++zXAdsZjS
GGPJ+GNxYvfM099pA7btrmF+va/75XFTi2DbuHtRTNPjcWv70hy1j5z5uC1e
x4fjboe6zl8//9rps2Xr/etwHRkhvWswN78/lqZ+XxO/1tx3dwzx/nGPCR8t
c6Ofdmjbuc3dm8o9Xp/bwU13fvO5Lyh6ru/72m4dqesul/W+yT33Oelx+3E/
L2G0fXjcL0wY9fo9PffYzoZc99hfC/cmz92nFdeRo+P2sevjPoH5Gsy/rmkz
57tunnPxPvJx7nHnjK7Tw0PNntup7cs0PxIfO53THu0t11fc862uK9dzN1Vd
19t3GtdJWmx1naht5XrHbvPnMVPZY5vF+0Lsusc+8NyHW2v7lO9K9yPHdeTI
xJ4Ln+ema9oO3RZmk+fC2ir20fL00Rw8jtL2PZf7McfntZ2e5y2d3+b5eQ5z
Xn3Xej5zPZY9DhpFtMe5t++SrSn7qHPd1utypPfR/m1r/TVf5fN3c928nj9w
2fJ5MPRdyXMuuI4cnZLXWj3n498X13bx/wu1+9zx5JHp/fisvR511/Vdg6m3
yZ5tp7bR9HbpWsfdEtN0bb7qtqfv4lqupa7z8b6b/X2U75lf50w1fdS7TtJy
q+t6tr36a37FPc9lj20W7wt7ue6x/2a+n4uD68gISfltq+fCui7Xfjifejmx
k67OP5eXj9b6K/ieTTOupNC2+/vjdWXb8fiTd103RXXdJK7r/DZ+PQY1Xam+
07vOvef28p372ztP67tW14WsY3s+2eK6Gqq23X7i1nGZ1U7bus3ifSPpumff
trpOGlxHRon/fBafx5R8ZotT81zpPKl4Od43y9tp7v/tfPeRa+ahD+eMlvGT
hbY/6j1F27nxJ+745b+viyOp6STjULzvPj9n3Jpc57329t3qjOnqnSprq5fr
4mmjuO7R/tN3KdctDefBNa5bx/quWV0XLvv93TCuI7+WlOfU/nkm/J6u9v1f
U133/O7s8/u09f/tErtO67lK20tYyynaLo0/8b7z82jGYYrPq4V1X/M5zNvr
uBn6ztd2K7K2fsF1j2VkzlW+x6fI9yG96+Y/nluXjevIbyb8XUyqrtP6Lm7H
TetyntR7KDVuZAnqoafrwrS27dpyWdtdHm2tmyN6XmhbOv6k5fd1kt/Q+Tqu
V13n64XYdyvSfre5zvktF7+O0j7EruvZdnX9g9/eScez9PpN4vI8d7mOw/zO
7xxxHTk6Kc/lnmvbjffrnudJ47or9J13nfeUf97SdtiWa9u70/tO4tI9xp+E
ib+vC+tq77UULa4Lv5/z+RyfKe1ze13nX/V1XZitdV3pHS2uk/7eQOK7nl6a
3Tn5L9V0LriOHJnQNbXv1VrHqMTLKj2q203VeIHr/Hxq1wVtv94bt/08fylp
WzP+JPW7BG1iz/Uch+kIx2C6hONV5H20fw5T/fu5yvxnvtYMriNHp+Sbrd/b
5drp4rv5sp/rgrazrlO2LR1/sl5XZf3Neev2rtVznvZrhCVbU/lOfd2UnVy3
Zv/v65K/N3iOhZSO1ex3DnP7b8m1wXVkhJQ809tztfOl4rbDz8DheJLbX/80
uS5+78a2w/EmqfEn4TUy/XXEWrf5HtdNkUbqO+1xO+ejeFqTj3Z0XXaZDb9J
6OY6xqYQsktK14WtXTNWnISf1ONTkn0vu03r0dz4E3+NzB7H097Xw9wjLa6T
RtuXPdvO7wf53yP02mb59X277lvf2eE68ispuWyz51yC8f/hmBSf9n73dd03
wn0Oxs+3rpuS2z/82BTOYRJCyH75ddf92jbDdYSQX8yZj9tsM31wHSGEEOvB
dYQQQqxH4zrNWCFCCCFklOjqOgAAgPOB6wAAwDq4DgAArDOK68LruEoDAAAg
YSTXla+r8Hf+Gq9roU/X1z1A9uRyuezaPgAAtDG661Ke8/OXWD13Xe/HsSwf
zyU4b4WRvmdPcCkAQBsjuy723DRPH/PX2pvn5eN+ju659Nxn7BWJZ3ARAMCY
jOq6lOdUrpvW+3rEmZ73sq+R8lY4LVXz5WrBkjdL74mnh4+5mlNSj6baxdMA
YJm9XLe2J38MXRc6be3jpHfd/fWk6xrrunBazl3fmq59X249Sn8DAFhitLpu
vZbL22spz/n5S7y+n5vD85e67+ty0+LaCdcBAIzN3nWduB9Xv/xPv6U8956/
0ocN4zA1dV3uPbgOAGAMRqrrPvuV91xq/t7UvmNLvTay67R/AwBYYqy6Lu5b
2nO5+XtSG+OhGZtSeq11bErctqQ9zd8AAJYYta7rPf8ZkJ4b3doeAMCvMXJd
13P+UZHUgT3aAwD4ZUaq67geJgAA7MEorgMAANiLUc5hAgAA7AV1HQAAWIe6
DgAArDNKXcfYFAAA2ItR6joL92q1yq/8fkGynprfdNSuKXdW+F0LnJGR6roR
79VamzYStWu9bGl37zZalqFZX42bWubJ7S+595xx/4o5U18BRq7rjr5X69mO
RdJrP29tdw9afjPfe35cp+NMfQUYta4b5V6tpWtRaq55Ip0WT5fMH/e5tg4t
fU+12dKGZt1ar5nWuv0ldWLOW6W/S+85w/5Vmg5wFrhXa5rasUj7GV67POn0
eFrpGJZ7b+24njsOt/S/x3bTHGO12087Tzytl+tG2b9KbeM6OBOj1XUj3qtV
Up/E0+O2pG4qHXNqdYfmOCb5bF9bJ+myNK9LqM2r2a6lad9wXek9I+xfubZz
6wUwKiN9XzfqvVqlx6/4/aVjUs/P16l+StrUvj+3TTT939t1W7ZB6zwlT0ja
OcP+Jfm8AzAyI9V1n/0a616t8fStNcDWY5HmWN2rJuvRf82xVuO03PRvuC43
T8u6nXH/AjgDY9V1cd+OvVdrbXr8OV4zLZ6em1/SjuR9pXlrbUhqmVrbkmOq
pN/S9S1Nz/VzJNel+qeZFk9v3b9K+xyugzMxal3Xe/6zMurxZNR+7Y219d6y
Pta2Bdhm5Lqu5/xnola/jcDIfduTM/zb1Ni6Dha2AfweI9V1XA8TAAD2YJS6
DgAAYC9w3SfuvMwyTzz+2CMA2GaUc5ij4I5703UhPxS+dwKwD3XdJ+64d/Sx
l3w31HUA9hmlrhtlbAp13e+Fug7APqPUdaPcq3Wvum7t837zf7Nve/XhqH5Q
1wHYZ6S6boR7tYZ13d9lHuu6nv3p7bpaG6XXe65LbpuV5qGuA7DPyHXdEfdq
9XXd2kbfY24P1+3hiN7rejbXUdcB2GfUuu6oe7X6um5dRv247J9/rsvfY+zf
9f17PI7n1yw7fr11Wan10bSRe1+urVJ7pWVoHVqaj7oOwD7cq/WT8Pu6z/Zk
vim5o/a+0nSJR2p9zLmgtg6a/mrWR9rfsA3pumlcR10HYJ/R6rqj79WaG4e5
LlPntz1cJ20jpuTLeJ6RXZdrY4vrqOsA7DOS60a4V2tuHOa6zPO4TuOU2vqc
0XU5UvNS1wHYZyzXhf065l6tkrqu9jz1d25+6fQtrtMsa2t/NevTw3W5djXz
UtcB2GdU1619+/69WsNxmJ/Lkx+fU3+X2ktNzy2zZd5aG7V5NP2tbZdcXyX9
l75XOy91HYB9RnZdz/mlSK6bsi5fdi7trPmFdfShrgOwD677RHLdlHX5xx+j
cV2fUNcB2Gck13E9THJEqOsA7DOK60bh6Puo8cj96wCgP7gOAACsg+sAAMA6
uA4AAKyD6wAAwDq4DgAArIPrAADAOrgOAACsg+sAAMA6uA4AAKyD6wAAwDq4
DgAArIPrAADAOrgOAACsg+sAAMA6uA4AAKyD6wAAwDq4DgAArIPrAADAOrgO
AACsg+sAAMA6uA4AAKyD6wAAwDq4DgAArIPrAADAOrgOAACsg+sAAMA6uA4A
AKyD6wAAwDq4DgAArIPrAADAOrgOAACsg+sAAMA6uA4AAKyD6wAAwDq4DgAA
rIPrAADAOrgOAACsg+sAAMA6uA4AAKyD6wAAwDq4DgAArIPrAADAOrgOAACs
g+sAAMA6uA4AAKyD6wAAwDq4DgAArIPrAADAOrgOAACsg+sAAMA6uA4AAKyD
6wAAwDoa1xFCCCFnDq4jhBBiPSXXEUIIIVYSe+6/bS0tzQ==
    "], {{0, 160}, {443, 
    0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{443, 160},
  PlotRange->{{0, 443}, {0, 160}}]], "Figure",
 Editable->True,
 CellFrame->True,
 Magnification->0.66]
}, Open  ]],

Cell["\<\
Breakpoints tab has toolbar buttons for setting various types of breakpoints\
\>", "Figure Title",
 CellChangeTimes->{{3.4729301236120462`*^9, 3.472930136607061*^9}},
 CellTags->"fWWBreakpointsTab"],

Cell["See Also", "Heading2"],

Cell[TextData[{
 "If you are new to Eclipse, you should definitely check out the series of \
screencasts on Wolfram Workbench at ",
 StyleBox[ButtonBox["http://bit.ly/2srUoj",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/2srUoj"], None},
  ButtonNote->"http://bit.ly/2srUoj"], "URL"],
 "."
}], "Text",
 CellChangeTimes->{{3.476465718298671*^9, 3.4764657188130817`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Writing Unit Tests to Help Ensure Correctness of Your Code"
}], "Heading1",
 CellTags->"Writing Unit Tests"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["\<\
You want to write unit tests to help uncover bugs in a library of functions. \
Perhaps you are familiar with the unit-testing frameworks that exist in other \
languages, and you would like the equivalent for Mathematica.\
\>", "Text",
 CellChangeTimes->{3.472994673766244*^9, 3.472994709954472*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Wolfram Workbench is nicely integrated with ",
 StyleBox["MUnit", "Literal"],
 ", a unit-testing framework for Mathematica. You create a unit test in a \
special file with extension ",
 StyleBox[".mt.", "Emphasis"],
 " The easiest way to create such a file is to right-click on your project \
and select New,",
 " ",
 "Mathematica Test File (you should make sure you are in",
 StyleBox[" ", "Emphasis"],
 "Mathematica Development Perspective, or you w",
 StyleBox["ill have to navigate into t",
  FontTracking->"Plain"],
 StyleBox["he Other submenu to get to this feature). ",
  FontTracking->"SemiCondensed"]
}], "Text",
 CellChangeTimes->{{3.472994724261256*^9, 3.4729947573466873`*^9}, {
   3.472994789251006*^9, 3.4729948064869003`*^9}, {3.472994896423644*^9, 
   3.472994938504031*^9}, 3.472994977526116*^9, {3.473002788035871*^9, 
   3.473002819745521*^9}, {3.474290569829211*^9, 3.474290580249892*^9}, {
   3.485529766524303*^9, 3.485529768091648*^9}}],

Cell["\<\
The most convenient way to create your first test case is to type Test and \
then hit Ctrl-Space to trigger code assist, which automatically creates the \
test boilerplate. \
\>", "Text",
 CellChangeTimes->{{3.472994989009527*^9, 3.472994993792981*^9}}],

Cell["\<\
(*Mathematica test file for Ackermann*)
Test[
\tA[0,0]
\t,
\t1
\t,
\tTestID->\"Test2-20090508-O1L1K5\"
]

Test[
\tA[1,0]
\t,
\t2
\t,
\tTestID->\"Test2-20090508-N4W7U7\"
]

Test[
\tA[0,1]
\t,
\t2
\t,
\tTestID->\"Test2-20090508-F5F9A7\"
]

(*This test will fail!*)
Test[
\tA[1,2]
\t,
\t3
\t,
\tTestID->\"Test2-20090508-L7N0S2\"
]\
\>", "Code",
 CellChangeTimes->{{3.472995023805973*^9, 3.472995029780949*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "You can execute your unit tests at any time by saving the test file, \
right-clicking on it in the package explorer, and selecting Run As, \
Mathematica Test. This will generate a Test Report, as shown in ",
 ButtonBox["Figure 19-7",
  BaseStyle->"Hyperlink",
  ButtonData->"fWWTestReport"],
 ". The report shows which tests passed and which failed. Unique ",
 StyleBox["TestID", "Literal"],
 "s are essential to this function, and Workbench has a feature that will \
help fix and duplicate IDs. Simply right-click on the file, select the Source \
menu, and then select Fix Test IDs. "
}], "Text",
 CellChangeTimes->{{3.472995046024585*^9, 3.4729951007888603`*^9}, {
  3.472995142569624*^9, 3.472995164181923*^9}, {3.4730021660111732`*^9, 
  3.473002167895393*^9}, {3.47429062837147*^9, 3.474290635891653*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
OnTYmem/YRmzCVTziNqct1bZr0ftrI1Xa0pbgWqLdjU6bSr5HJUDzsuFxh+l
W60Vom4e8+Rq91M53aPvhT5KJ1TTrmt/ZZwt7bQv+eqpJeFq8czO8zqh7ajT
WmfdaR+orU+0u3ZI+b63DBTXP3lZfh/9t9tVRlkuzwfk385dm1nCUuTX0zov
9Sqs3fYWuTlZm1jB7Y1UmL7X7WZisae7B/rV/jQ0uk3l7YFaznv2mkPtAu1j
e6DL3PfXFFlXVK+oZG7Fy0DlLM/ccPrVRL9mvi9Ee62eIdqV7N29xM7RnIur
EG2plw9iPtm0rk9raVsF1CHWMefR/v7+1BHMc1LacPlq0WbnGllbXbFtp9/v
DM1Zt/qQ1vUZqezKF3evkpdlrnYzXayuXu9qLpf6AamfoLYqXGtG3cwkS1Sk
np66Kb/MWl6Yk0dtTlEjkwekP0agflyF7AQ6Xwun3kJBdejgO6dA+9ge6FKB
oczp+K31Zyxj1CNg6ovt9XzutVlPwm6LqU1ofd0o1z75x8yZ4zam+r3CXsh+
qT/bT/y0zaDVS9PWj3/M5UeLax0+vwOYv12NVuG0lekf+eM8ThuIZUJz1p2y
Anv7TOdJPvqx3903QOGCpy2L9tFbPin9A9I/QW2+ZjXMzUy0RCXq6a/bVsi2
sZkfVtTmZDYx4dKRu2X2l+Cy24BAixQy2dD3CLOfQwdprvZsCwn0szjUYU9y
bviuTgipPHL37Sb8JgrUX8giUK9DtwuHugMESuoJAiWEVJ7p6OsomvnpnNbo
9y+axKTeSKErUchyCHdzqD0fM8uNFBpNoP8Q6O3DwS5CSMVpp9P639Vownyn
6zC3e1WNzyVJLWT7cVw7XbA43xjBGps6J3t23VITBEoIIeTEqBcKymm7XSGS
e8hrdMZtIbNqoh/CVQT6VTu/169wQggh5Ox896+d2d+JSJKm23vWfsyZEEII
eW6SBEoIIYSQr3IV7thd7aYDxoQQQgixZ70TkfI0FgRKCCGEhIJACSGEkIQg
UEIIISQh+QL9fD5H1e2wkp8a1thTVy+fLCEVRi7Qz55+bdQ5TdssU3s3eS5a
gfLJjxhTuAaKlHZOHYRjpn1qpdaGpzLma8kcj66VZxYIlJAKEyVQewl5AhW+
e5pAS1X+nBKKFHjcikr41M5ZOUd/uUpeRQiUkBslR6DaV/eEvoN1ZFc/N6GL
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
V8txq9HsgQZXglU6GhK1aaNFTWstwS9Q634vQaBpqUqgxiNrLagmElqpuEBP
m0qI9UP0fLKlBHrojuK9Au33O/xm2LlNO/nm8xve6dfACD/BasVXKr5D4pGr
NGGNVSXQb9NrEa4Ey4S9PsQTdWTXa3kJnrj2e67xHy9QCVaBmv1BdYg6WnB8
zzhmBVxVspZmLdasoeddD9rn6PlYe5tA1basvlDdau6izTE90/r/NHcmCHQ9
SzWenxq/T259B9sVpNraC655z8fq/0DVD8sczTXQrIx1hPwEBBqzSl0r1rW8
1nf9C+4av8h6cArUuxIkRtuwDjHfdWnRnMpVvtChHnu+QaCSq3A/3h7ox2Yc
60DXW64h6p/KZm+fyvWWdbh/Kmu1TY4QqGsEbYg5XDKt9q454XsFOp2ZUk5U
Nd18qK1VTl0ZZZr7ec9HVmqIZExrJT0bW2bsm03SKjVr6F9ez+K4FvwIdW7r
QbeVYCWkdSp7Q6/CTmXf219YR0ag1rkUOQeqDbQqz1OIy1zmjMzCrcOjBGqt
lXVBXOQfwrU26n1l7CO49jDatFF7IdeWVm2KCXTexWmXeXTLRZJpAg1+EDlD
JGNaK2m+KBXLRVmpq9SsoXV9+hfZv+DFF19dD7o6BStBKFAVrfPo6mn6i+2T
BMoh3D7+KlzTKX4rmQODFrPOxVMBV7FmgZJZS+alUuQiIrNRu7To3wnE7lcf
I9Co6/fCh3CVboJ9X2dM4hKoZ7RXCDRjlbrWmHUcvxCvFejOpN6VENsD1cbp
xR3SfIH693tnCjS57S9bQoRALRWYeqDLa6MHGtieXVu4dWdifTdhP2Dd5q1m
Md8qYhbzE1R0aR/i/yzM79jBipVan88QaGykvwPVf7KnnKrzngMNboelhgg/
aMmLI9Zt5ir1rFiz5pI9j/niZIF+1dOgxkqYDRslUKsrg7Z1eTNNoJsuzSEn
CDR/+ywoUOMq3MD2rA7c0IZYN3vP+NYSXPOKKt9arNniPO9aY/224/kKZH4W
Wv0968S6sFHrU76YNWztB0V8Fa5tR+co0/phWVe19TMVfnzbkI9jy3dNG3xx
xLrNXKXWGrpWizaCfMHNj6zUenDa07YS/LYyRbn1N80/td6oilCgagkegc4E
B75HoDWkyMZ8RIsomOM2pIILXsPWfsL6dwp0frFd+NFbbkB3QswPVP4RX9IK
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
XfVU
    "], {{0, 648}, {619, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{619, 648},
  PlotRange->{{0, 619}, {0, 648}}]], "Figure",
 Editable->True,
 CellFrame->True,
 TextAlignment->Center],

Cell["\<\
Test report generated after running the tests defined in the solution\
\>", "Figure Title",
 CellChangeTimes->{{3.4729951705532503`*^9, 3.472995192310945*^9}},
 CellTags->"fWWTestReport"],

Cell[TextData[{
 "Functions like Ackermann that return scalar values are easy to inspect in \
the failed tests section to investigate the difference between the expected \
and actual output. In ",
 ButtonBox["Figure 19-7",
  BaseStyle->"Hyperlink",
  ButtonData->"fWWTestReport"],
 ", you can see that the expected output is 6, but the actual output is 4. In \
this case, it is the test function that is wrong, because the correct output \
is 4. The more typical circumstance is that the function is wrong, but in \
either case you can quickly see that something is awry. With more complex \
outputs, it can be difficult to find the difference. A useful feature of \
Workbench is Failure Compare. Simply right-click on the failure test ID and \
select Failure Compare. This will open a dialog with a side-by-side tree view \
of the expected and actual expression (see ",
 ButtonBox["Figure 19-8)",
  BaseStyle->"Hyperlink",
  ButtonData->"fFailureComparator"],
 ". You can expand the tree to inspect the branches that indicate differences \
(the X). "
}], "Text",
 CellChangeTimes->{
  3.472995954870541*^9, {3.472995993973119*^9, 3.472996140313047*^9}, {
   3.47300219321179*^9, 3.473002207832692*^9}, {3.474290664343667*^9, 
   3.474290674773198*^9}, {3.474290720228937*^9, 3.474290773546163*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3d2VqzyWAFD3zCQyMZBHP0wEs/qB146HnMjJXfwIhAwG2xQl8N5r0SpZ
Loxd/Z0rjsXh//79r//91+12++/b7R//vN3+6/9/fv6f+4xbUd9vZd2398e2
fLW96+t/QT/djBu/0ri+/hf10/nOUr9Inv/Qdr+zZjLniraiGtsibd/d1n7f
uPEzj9tsV97++r8v48Y/GV/b0t/f2k/aeP7Uzq2K+XnYdP5XP/zuR+/FZrPZ
bDabLfMtne9s7W9pwzzs4fvG9DvHzd8pptvauM1ms9nOueX2nahx4785vvE7
yNXvKKM2yYMNc68Nc61hHpe2S+Pp7z9978aNGzdu3Lhx40eP18n4Sg7qnblX
aPv51+1nwjSOpXmwennfr7Zbj824cePGjRs3bvzo8adtvdBfaJ9uVb+lvztz
rKt5sa3PX2jXXs+4cePGjRs3fqrxav2yv02a/cT7bfJUVbXTvquQ9xrfz67H
PTv3+mlvVbc9zMHq8TN99bPfZV5p3PiZx/X19fW/u9/MPeq6vpc/86Sy7Nqi
nzu1bdqfaZv9ND83+xnmMs287qfTTJHKatzvw/6f7Tfq/+y63V84/nZe1z5Y
3uuyaA5+bIumLfp+0fbrvu36t77ft3W3v/a4221t7tUd27S9L/bD96X36vbz
+re2XZyrpe3i6xk3bty48azG9fVf6If8TzP/aNoyardsYy2Hbg7WCPu/38f9
Tfb/bJ/luN9h/+V93HcxHne305+troaf65/5WDMna3fUzs3SfjxXG+dmw77T
7efFFudgG/7bbOdcYSub+d5t/IzS/Wi1Wq32RG1t3Pjb4w9zpMlcqE7mRnUy
N0rzYNXDHCnMt7q5V/10/8XT/deTeUujm1s1c65+7pXMuR7bxzxZ83NV3Obn
Xw/5r5nPMJlzxXOt7hhv0znYvd6W/0r3r6+vr6+vr3+ZfpgjreW94nzUUn5q
bo40l/96Z/9zc7s2rzXJe1UPea+2LWfmXnH+qwj5r37/zXYL7VL+qx6Ppclr
VbdxrhXausvN1SHvVXdzr+bnyd9Eq9VqtVrtV7WNkHd6zHNtW691K5/nv8L6
r/LFtfjp+rLH/FcxyXu1853w+EyeK8yz6vZ3iuX8121h/VfY+vfcvsf+Ndu5
1TAnLMe52L3PiUVzr6X815rJ327m9z8ZX37N9d9Pj2/S3+n4toynn2B6Pchv
v75x48a/bFxf/4N+Y8h/reSlhi3tl8vrv8I1kO/Nv6KtmFn/VZbDd5DtvCcy
m+96GP98/Vc3/6rb/Nc4B4zmYsNkoMmRFV1u7Fn+q1n7fxt/L/SHdun3nrRh
arg2D599vXAtwqb9V/fo0LvP7Y3jfadt/6bhGo2f46jv3XUl6d/rbG1dd+/r
r49Dq9Vqtfu23Txnev3juAa+bn9+zHvdJ3mvZ+u/wvwt7P8V0/0v5b+S9V3x
HKsY51jTx2+T6yA/W//V/8N/f1xr/7Pz+FW7rZ0kFPe186pxDlPOjr/SD4r2
sd96vWrY//h61VvH+2o/vGI7T4lq5RZzc69Mznu29oe/S3hfmR2fvr6+vv57
/UY853q2HivOe93KlfxXMea/yiT/tZhXi7bwu0/Xf5ULa+3jWc+zOdlb67/u
s+343ectWe9VjG3783o+KXx2w7+70eN1NIWN8yJVPeahQj2ReD/D/l58vXT8
2f4f5gy3ctp/mFNM+2me7uG9Lnxedf/Eslz+O033NX1fVT19H2U1/S6zrOY/
h/R9PH5O97GuyeR9TnO59czr36b/N158fr3w+vJmWq1Wm3fbiNd5LbWz673S
diH/Fe8nfb24vli8v3Y/5bj+KxxrfNzdHGphbf2MNO/1Uf5r2KL6XsMasGjd
Vxl+Lobc2Pz9k6b94d/cWzmMxXmeqhq/c4ufXw6P18P+giL+DnPh9Sb/3ifH
1+S3yqjo7ez+P+iH99W8zvBR1uPP7Vxj5vOa7G/m77PlcwvXiIyf47T/+Hep
JnO6yf8fos+pec7w/4/JcaT5yGo4tqXXa97f+LmM88Y6ev3h/VShFl/18Hlk
1Z/5exk3btz4N4yHf2vS+luzdbiW8mDDHCpe/9X/m1iu57/m9h9+9xZeJ8y/
orndUGM1re81911k+Zj3iudiw3G3c63QhjlYNCeLP9OZz3ZYjx/WekV1Jx7W
3g+/Pz8v7t7vOKcIj3ZzqPg548/d+qfp8d4nvzdz/Onr3R7Xm/Xfnk48rvcq
d+jXs++//RvW99m/w9r7S/c/97nFrzPfXz6utt8f91yGbP5zGt9HPfNLq6+3
8PrpePw6Wq1Wq82nbcT1th7qb03mRvV0TpT2F/Nf9yT/Nb//SS7pHvcX1n99
kP8a5l5Fmv8KbT2f/yrT9nGb5MGq5DrI6rb4e5N9TP6tnj429291em1D+/1g
8nvFQy7k+eulY2F9Vbq/vfvP3+vje1h7f8uvF81Xbh/OHaPPJf2cHuZf0XHG
eb6PjmdhLmyz2f5gK4wbXx9v/x0qozxVuS0/dYvbdp/pHGncd7yfxmpeLeS/
4v0Xj7m18R5D5XQtfmQ5Dzadg43HPTcHq6dzsNW52HQ9WFd/ouxrlN0ef3+m
P/l3NZrPDv+23hbyVPF3YnO/98LrLX0X+tv9h+OJ3+fM8Q1zmGr+8xzWlc28
3uR14tzYLek/GW+/643nW7ckz7b0PtP9F5+9/tz40t/7T/parVarHdouto/r
u9ZqREzzVOk9sZfXf8X3EJqs+1rIg7X7KdfWf90e52CRyXeO8eNFfy+gotuq
25P8V/vv4sxn92QL88aHPFjj53WL6vnvh8+u+3d0Yf1XPf4cxsI6oOFvFf0d
uv5n+a+wpijuz+1/qZ/+/rP8V3wtwXT91+MWTTuGtevt+vN7+rnV0eeW5pvm
a2c860/nutXwOls/p/h9tmv+Z95H+vrxXLOO/z+wVPvDZrPZbFlu7b8H5TQf
9cxsHqzdV30f503jvm/R83dZ/xXte33uNda5v6ffST7Lf4U2zMFu9XQO9nCe
f58+Hn++cR6s+Re6fPH7x8mc6fH6x7Deq5p9vPvdeGzpeJdeL/wcz/3SfNPw
u7dy8nphfHJs98fnp/2wPVyX2P9/bO74wn3kY93r15PjD+9hdj3Vs3xT0p/s
61YO//+P54rheJY+p4f8XTTXnPu7ps+fe/30eJ///1NfX3+3fvqdk77+Sr+L
1dPrG5+J19w/fP8W8l/9c8Lz0/zXVpN5ziT/1f/bM8yh+jxXFde/Lx7bIqzD
qjbkv+79vCtd/7V9m+TB+u8e2/oT4TkrebD56xXvw2fdXe837q/929zG7+jS
6yyf7m/t9eL993+TST7t53+KZO42ub4v9G/9XCF9/sPvj/u5FeH5G/4GRf83
a56fxMf084k/y8n7ftIf/r8Z9h/eT3rM7Xh0POE54fVnjnu8fjP6/aXPp3jy
91z5O9psNpvt77fJnKqc5qGerc+6RW27FU/yX+X8fratKwv7f5zbTeZe6X0d
5+ZeC22Yl3WvE72fSf4rmoNtyHul4+19IOu5+cWWbX3/xo8ZH+ZfC3nCvz4+
48aNGzd+jvGQ95mrZ/+s3tdkv+GcfWaOFMbn9vvS/hfWf3X1U0M9r2lNicf+
uO7rXizkv4bXu/d5kmT918w2zEPTeemn/bX9Gz98fMx/VVkeX9bj5fR5xo0b
N/7N42P+6/kcaXGuVMRtP0eq4n1v29/c/m/9fm/9eDq3q5O51nTOVURzruW8
12P9r6hdWv/1dh7MdonttvAdos1ms9lsG7ewbrko47VO1Uq/Hh6Px8P1ZWHf
4ZquYuH5cf+W9pO22c9wH5jouEP9rtBWD/1b3+/yXGnbPH847rn810P9r/v4
nJXPtkgfS+fBr47bbDabzWa7zFa9tix+UTz3arZm/hHfw+WjfVeP85ldjzvO
e7XthvVfD3mwhf7L19Ho6+vr6+vr62fS/802/X5xsv6rTp5TJ+2G11iamy31
tVqtVqvVaq/Yzs65Qr//+WH9Vz1tC319fX19fX19/V36M/mvcF0AAAD7GvNh
9XT9V1mbfwEA/ILJ3Cuq/3XV/Fcz3wT4C+IPEMznv+4v5b/mvt/8bc3r7PV7
f3H8QD7Cf/tbnvfp6zw8Jv7AV5rOvaL1X9X2/NenMekd755Hzr2nvzh+IB/h
PHT9eR/Ov8QfoPd8/dfGfSzEjzTWhH56HUC6r7lz0fT5c78fn0fO7nPm9fY8
/ngcOIfJf8Mr8Wiuv7ivmXgk/gDB4/qv6PrHjf8dd7FgbCdj5bQNz09//5XH
u/2lsWl+fOl4fuv4re+Ac5nOYeYfnxvf0k8fF3+AYI/rH9eet3Qel/bn6mMs
7f/ZeWqaJ3v2e3sfP3Au8X/Pr+aqnua/NsSj9PXXju9ZX/yBc1lc//XC9Y9r
/91vjVmLefg3zkPHx5/HrmevuzT+6vEDeRrO9Yb802tzpcW50GIeS/wBOrvk
v578dz8XGxbjRxrLnsXBN2PSK+svPj1+IG/P4sFvxB3xBwge13/d38p/pfc7
Co+nz5t7/uQ5Lzy+1J/9bnJhv3sev/NPOJeleBCPvxJ31h4Xf4BgzH9Vb9f/
ev01zx0nzn78wHmJP3AN3dzr/lH9r3de88zOfvzAeYk/cA171P/Kye12+9UW
AOBTj+u/Xq//BQDAdvPrv167/vE31FV1r8vyZyu6rSi6fr1yrfYv5ankv4BN
fmLUQ9z6+fm+EruA77K4/uuF6x/3Vrfxq2y3+888LGzDfEwcA3LUxK6fOde9
iV19/Kr7n9vHxS6gt0f9r0ZV1e1WltW9bNpq2jZjW7R5r/6cse3HMazvt+PN
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
lvpfAADHUv8LAOBY6n8BABzL+i8AgGOp/wUAcCz1vwAAjqX+FwDAsVz/CABw
LPW/AACOJf8FAHAs9b8AAI6l/hcAwLHU/wIAOJb6XwAAx1L/CwDgWNZ/AQAc
S/0vAIBjqf8FAHAs9b8AAI5l/RcAwLHU/wIAOJb6XwAAx1L/CwDgWNZ/AQAc
S/0vAIBjqf8FAHAs9b8AAI5l/RcAwLHU/wIAOJb6XwAAx1L/CwDgWK5/BAA4
lvpfAADHkv8CADiW+l8AAMdS/wsA4FjqfwEAHEv9LwCAY6n/BQBwLOu/AACO
pf4XAMCx1P8CADiW+l8AAMey/gsA4FjqfwEAHEv9LwCAY6n/BQBwLOu/AACO
pf4XAMCx1P8CADiW+l8AAMey/gsA4FjP13+N87NwPeS0v338NumnrXHjxo0b
N27c+BeNt1s/74rzX9Fc6ve2tf3/9uvnvp398/nr4//r1//t4z/75/Pp6//1
8f/1+//rLffjz/34cj9+r3/Y8U3qf/U/33Lq1x+O6+f99zv7/z/O/vpnH7/6
5/fXfcf/3f1v/+/voP++b+Hnsu+X+vr6+vr6+vr6v9j/D+vqTyc=
    "], {{0, 334}, {608, 
    0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{608, 334},
  PlotRange->{{0, 608}, {0, 334}}]], "Figure",
 Editable->True,
 CellFrame->True]
}, Open  ]],

Cell["\<\
Use the test failure comparator to drill down into test results to detect \
problems\
\>", "Figure Title",
 CellTags->"fFailureComparator"],

Cell[CellGroupData[{

Cell["See Also", "Heading2"],

Cell[TextData[{
 "See the Wolfram Workbench unit-testing screencast at ",
 StyleBox[ButtonBox["http://bit.ly/dOJBL",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/dOJBL"], None},
  ButtonNote->"http://bit.ly/dOJBL"], "URL"],
 " for a step-by-step overview of unit testing."
}], "Text",
 CellChangeTimes->{{3.4729962013608723`*^9, 3.472996232009076*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]Creating ",
 "MUnit",
 " Tests Where Success Is Not Based on Equality Testing"
}], "Heading1",
 CellChangeTimes->{3.4729963069455633`*^9},
 CellTags->"Creating MUnit Tests Without Equality"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell[TextData[{
 "Although the ",
 StyleBox["MUnit", "Literal"],
 " ",
 StyleBox["Test", "Literal"],
 " function is easy to use, it is not the most appropriate function for \
certain types of testing. For example, you may want to define your test in \
terms of pattern matching."
}], "Text",
 CellChangeTimes->{{3.472996334002635*^9, 3.4729963428474407`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 StyleBox["MUnit", "Literal"],
 " provides other test functions, including ",
 StyleBox["TestMatch", "Literal"],
 ", ",
 StyleBox["TestFree", "Literal"],
 ", ",
 StyleBox["TestStringMatch", "Literal"],
 ", and ",
 StyleBox["TestStringFree", "Literal"],
 ". ",
 StyleBox["TestMatch", "Literal"],
 " uses ",
 StyleBox["MatchQ", "Literal"],
 " to compare actual and expected results, and ",
 StyleBox["TestFree", "Literal"],
 " uses ",
 StyleBox["FreeQ", "Literal"],
 ". Likewise, ",
 StyleBox["TestStringMatch", "Literal"],
 " uses ",
 StyleBox["StringMatchQ", "Literal"],
 ", and ",
 StyleBox["TestStringFree", "Literal"],
 " uses ",
 StyleBox["StringFreeQ", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.472997317255924*^9, 3.472997360814618*^9}}],

Cell["\<\
TestMatch[
\t{1,2,3,4,5}
\t,
\t{__Integer}
\t,
\tTestID->\"TestOther-20090509-L8U9H1\"
]

TestFree[
\t{10,12,1/2,2/3,3/4,4/5,5/6}
\t,
\t{__Complex}
\t,
\tTestID->\"TestOther-20090509-L8U9H2\"
]

TestStringMatch[
\t\"Hello\"
\t,
\t\"H\" ~~ __ ~~ \"o\"
\t,
\tTestID->\"TestOther-20090509-L8U9H3\"
]

TestStringFree[
\t\"Hello\"
\t,
\t\"x\"
\t,
\tTestID->\"TestOther-20090509-L8U9H4\"
]
\
\>", "Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "You can create even more flexible tests by using the ",
 StyleBox["EquivalenceFunction", "Literal"],
 " option of ",
 StyleBox["Test", "Literal"],
 " to specify an alternative definition of success. The following test \
succeeds if the actual value is greater than 0."
}], "Text"],

Cell["\<\
Test[Cos[1]^2 + Sin[1]^2 - Sqrt[1 - Exp[-10]],
  0,
  EquivalenceFunction -> Greater,
  TestID -> \"ID17\"]\
\>", "Code"],

Cell[TextData[{
 "This option comes in handy when you are creating tests where exact equality \
is not useful. For example, you might want to use ",
 StyleBox["Round", "Literal"],
 " or ",
 StyleBox["Chop", "Literal"],
 " before comparing."
}], "Text", "ProductionPageBreak"],

Cell["\<\
Test[
InverseFourier[Fourier[{2, 1, 1, 0, 0, 0}]],
  {2, 1, 1, 0, 0, 0},
  EquivalenceFunction -> (Chop[#1] == Chop[#2] &),
  TestID -> \"ID42\"
  ]
\
\>", "Code"],

Cell[TextData[{
 "Of course, you can just as readily write the test with ",
 StyleBox["Chop", "Literal"],
 " ap",
 StyleBox["plied to the actual com",
  FontTracking->"Plain"],
 "putation, but I feel that ",
 StyleBox["EquivalenceFu", "Literal"],
 StyleBox["nction", "Literal",
  FontTracking->"Extended"],
 StyleBox[" better documents the test designer\[CloseCurlyQuote]s in",
  FontTracking->"Extended"],
 "tention. Another example is when you are only worried about equ",
 StyleBox["ality up to a spec",
  FontTracking->"SemiCondensed"],
 "ified tolerance. "
}], "Text",
 CellChangeTimes->{{3.4729974209438963`*^9, 3.4729974273207273`*^9}, {
  3.47429086517662*^9, 3.474290868440852*^9}}],

Cell["\<\
Test[
(12/7) (2 Sqrt[2] - 1),
  Pi,
  EquivalenceFunction -> Abs[#1-#2] < 0.01,
  TestID -> \"ID66\"\
\>", "Code"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]Organizing and Controlling MUnit Tests ",
 " ",
 "and Test Suites"
}], "Heading1",
 CellChangeTimes->{3.476466548255624*^9, 3.485529769279675*^9},
 CellTags->"Organizing and Controlling Test Suites"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["\<\
You have a complex test suite with many tests. The tests may naturally group \
into sections. Further, you want the ability to turn on and off test sections \
as well as state dependencies between sections, possibly to account for side \
effects. For example, you want to say, \[OpenCurlyDoubleQuote]only continue \
with this section if tests succeed, because further tests rely on results \
computed by earlier tests.\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.472997468596265*^9, 3.4729974967577*^9}, 
   3.4742909404949007`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "There are a few advanced ",
 StyleBox["MUnit", "Literal"],
 " features that are useful f",
 StyleBox["or organizing tests and man",
  FontTracking->"Extended"],
 "aging test dependencies. You can organize tests into sections using ",
 StyleBox["BeginTest\[DiscretionaryHyphen]Section[name,switch]", "Literal"],
 " and ",
 StyleBox["EndTestSection[]", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.474290972104888*^9, 3.474290973524036*^9}}],

Cell[TextData[{
 "(*Switches to activate and deactivate sections*)\nSect1Active = True;\n\
Sect2Active = True;\n\n(*Section 1*)\nBeginTestSection[\"sect1\", \
Sect1Active]\n\n(*All tests in this section depend on first test success.*)\n\
TestFree[str=OpenRead[\"SomeTestFile.txt\"], $Failed, \nEquivalenceFunction \
->UnsameQ,\n",
 StyleBox["T",
  FontTracking->"Plain"],
 StyleBox["estID",
  FontTracking->"SemiCondensed"],
 StyleBox["->",
  FontTracking->"Plain"],
 StyleBox[" ",
  FontTracking->"SemiCondensed"],
 StyleBox["\"TestAdvanced-20090509-O6O6O3\", TestFailureAction -> \
\"SkipSection\"]\n",
  FontTracking->"Plain"],
 "\nTest[Read[str, Number], 5, TestID -> \"IDS1_1\"]\n\nTest[Read[str, Word], \
\"cars\", TestID -> \"IDS1_2\"]\n\nEndTestSection[]\n\n(*Section 2*)\n\
BeginTestSection[\"sect2\", Sect2Active]\nTest[2 + 2, 4, TestID -> \
\"IDS2_1\"]\nEndTestSection[]"
}], "Code",
 CellChangeTimes->{{3.472997516180038*^9, 3.47299753543752*^9}, 
   3.476467473229829*^9, 3.476470714873135*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "If it does not make sense to continue tests after a failure, you can also \
specify ",
 StyleBox["TestFailureAction ", "Literal"],
 "\[RightArrow]",
 StyleBox[" \"Abort\"", "Literal"],
 ". This feature is available even if you do not use sections."
}], "Text",
 CellChangeTimes->{3.4729975412436333`*^9}],

Cell[TextData[{
 "If you have a complex Mathematica library, you will want to organize it \
into separate test files. However, running each test separately would be \
tedious, so ",
 StyleBox["MUnit", "Literal"],
 " provides a ",
 StyleBox["TestSuite", "Literal"],
 " construct. First, you should place all your test files (",
 StyleBox[".mt", "Emphasis"],
 " files) into a folder under the main project folder. Then create a test \
file that ties all the tests together into a suite, as shown in ",
 ButtonBox["Figure 19-9",
  BaseStyle->"Hyperlink",
  ButtonData->"fTestSuite"],
 "."
}], "Text",
 CellChangeTimes->{{3.472997549570682*^9, 3.472997604765696*^9}, {
  3.472997718593602*^9, 3.47299771859588*^9}, {3.4730022251001062`*^9, 
  3.473002226224106*^9}, {3.474291006443755*^9, 3.4742910068194847`*^9}}],

Cell["\<\
(*Mathematica TestSuite*)

TestSuite[
\t{
\t\t\"Test.mt\",
\t\t\"Test2.mt\",
\t\t\"TestAdvanced.mt\",
\t\t\"TestOther.mt\"
\t}
]\
\>", "Code",
 CellFrame->True,
 CellMargins->{{0, 0}, {2, 4}},
 CellFrameMargins->{{53, 8}, {8, 8}},
 CellChangeTimes->{{3.4729977241217747`*^9, 3.4729977365353203`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["TestSuite", "Literal"],
 " is a test file that allows you to run other test files all at once"
}], "Figure Title",
 CellChangeTimes->{{3.4729977665681553`*^9, 3.472997804689646*^9}},
 CellTags->"fTestSuite"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]Integrating Wolfram Workbench\[CloseCurlyQuote]s \
MUnit Package into the Frontend "
}], "Heading1",
 CellChangeTimes->{3.4729977556125793`*^9, 3.47429106258053*^9},
 CellTags->"MUnit in Front-End"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["\<\
You would like to create unit tests but you prefer to work in the traditional \
frontend rather than Workbench. \
\>", "Text",
 CellChangeTimes->{{3.472997822871798*^9, 3.472997829601941*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell["\<\
You need a test driver to run the tests. This mimics the basic functionality \
of Workbench.\
\>", "Text",
 CellChangeTimes->{{3.4729978347747993`*^9, 3.47299784885065*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Needs", "[", "\"\<MUnit`\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestDriver", "[", "tests__", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"testList", " ", "=", " ", 
       RowBox[{"{", "tests", "}"}]}], ",", "numTests", ",", "failedTests"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"numTests", " ", "=", " ", 
      RowBox[{"Length", "[", "testList", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"failedTests", "=", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"{", "tests", "}"}], ",", 
        RowBox[{
         RowBox[{"(", " ", 
          RowBox[{
           RowBox[{"FailureMode", "[", "#", "]"}], " ", "=!=", " ", 
           "\"\<Success\>\""}], ")"}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Passed Tests: \>\"", ",", " ", 
       RowBox[{"numTests", " ", "-", " ", 
        RowBox[{"Length", "[", "failedTests", "]"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Failed Tests: \>\"", ",", "  ", 
       RowBox[{"Length", "[", "failedTests", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Failed Test Id: \>\"", ",", 
         RowBox[{"TestID", "[", "#", "]"}], ",", " ", "\"\<\\nExpected: \>\"",
          ",", 
         RowBox[{"ExpectedOutput", "[", "#", "]"}], ",", "\"\< Actual: \>\"", 
         ",", " ", 
         RowBox[{"ActualOutput", "[", "#", "]"}]}], "]"}], "&"}], " ", "/@", 
      " ", "failedTests"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",\

 CellLabel->"In[88]:="],

Cell[TextData[{
 "The ",
 StyleBox["MUnit", "Literal"],
 " package is not part of Mathematica 7, but you can still use it if you have \
installed Wolfram Workbench 1.1 or higher. You need to tell the kernel where \
to find the package. This will vary from system to system, but generally it \
will be under the Wolfram Research directory where Mathematica is installed. \
You want to find a directory called  ",
 StyleBox["MUnit", "Literal"],
 " and add the path to that directory to ",
 StyleBox["$Path", "Literal"],
 ". On my Windows XP installation, I added the location to ",
 StyleBox["$Path", "Literal"],
 " by executing:"
}], "NoteWarning", "ProductionPageBreak",
 CellChangeTimes->{{3.4729979496748123`*^9, 3.4729979816734657`*^9}, {
  3.474389547365449*^9, 3.474389603151935*^9}, {3.474389723912622*^9, 
  3.474389729390258*^9}}],

Cell["", "NoteWarningEnd"],

Cell[BoxData[
 RowBox[{"AppendTo", "[", 
  RowBox[{"$Path", ",", " ", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<C:\>\"", ",", " ", "\"\<Program Files\>\"", ",", " ", 
      "\"\<Wolfram Research\>\"", ",", " ", "\"\<WolframWorkbench\>\"", ",", 
      " ", "\"\<1.1\>\"", ",", " ", "\"\<plug-ins\>\"", ",", " ", 
      "\"\<com.wolfram.eclipse.testing_1.1.0\>\"", ",", " ", 
      "\"\<MathematicaSource\>\""}], "}"}], "]"}]}], 
  "]"}]], "NoteWarningInput",
 CellLabel->"In[90]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\7.0\\\\SystemFiles\\\\Links\"\>", 
   ",", "\<\"C:\\\\Users\\\\Sal \
Mangano\\\\AppData\\\\Roaming\\\\Mathematica\\\\Kernel\"\>", 
   ",", "\<\"C:\\\\Users\\\\Sal \
Mangano\\\\AppData\\\\Roaming\\\\Mathematica\\\\Autoload\"\>", 
   ",", "\<\"C:\\\\Users\\\\Sal \
Mangano\\\\AppData\\\\Roaming\\\\Mathematica\\\\Applications\"\>", 
   ",", "\<\"C:\\\\ProgramData\\\\Mathematica\\\\Kernel\"\>", 
   ",", "\<\"C:\\\\ProgramData\\\\Mathematica\\\\Autoload\"\>", 
   ",", "\<\"C:\\\\ProgramData\\\\Mathematica\\\\Applications\"\>", 
   ",", "\<\".\"\>", ",", "\<\"C:\\\\Users\\\\Sal Mangano\"\>", 
   ",", "\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\7.0\\\\AddOns\\\\Packages\"\>", 
   ",", "\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\7.0\\\\AddOns\\\\LegacyPackages\"\>", 
   ",", "\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\7.0\\\\SystemFiles\\\\Autoload\"\>", 
   ",", "\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\7.0\\\\AddOns\\\\Autoload\"\>", 
   ",", "\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\7.0\\\\AddOns\\\\Applications\"\>", 
   ",", "\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\7.0\\\\AddOns\\\\ExtraPackages\"\>", 
   ",", "\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\7.0\\\\SystemFiles\\\\Kernel\\\\Packages\"\>", 
   ",", "\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\7.0\\\\Documentation\\\\English\\\\System\"\>", 
   ",", "\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\WolframWorkbench\\\\1.1\\\\plug-ins\\\\com.wolfram.eclipse.\
testing_1.1.0\\\\MathematicaSource\"\>"}], "}"}]], "NoteWarningOutput",
 CellLabel->"Out[90]="],

Cell[TextData[{
 "You can add this to ",
 StyleBox["init.m", "Emphasis"],
 " if you intend to use ",
 StyleBox["MUnit", "Literal"],
 " frequently. Alternatively, you can also copy the ",
 StyleBox["MUnit", "Literal"],
 " package into one of the locations in ",
 StyleBox["$Path", "Literal"],
 ". "
}], "NoteWarningEnd",
 CellChangeTimes->{
  3.472998071390072*^9, {3.474291112023285*^9, 3.474291112464213*^9}}],

Cell[TextData[{
 "Here is a simple example of using the driver. I purposefully made tests \
with ",
 StyleBox["ID2", "Literal"],
 " and ",
 StyleBox["ID4", "Literal"],
 " fail."
}], "Text", "ProductionPageBreak"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestDriver", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Test", "[", 
    RowBox[{
     RowBox[{"1", "+", "1"}], ",", "2", ",", 
     RowBox[{"TestID", "\[Rule]", "\"\<ID1\>\""}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Test", "[", 
    RowBox[{
     RowBox[{"1", "+", "1"}], ",", "3", ",", 
     RowBox[{"TestID", "\[Rule]", "\"\<ID2\>\""}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Test", "[", 
    RowBox[{
     RowBox[{"2", "+", "2"}], ",", "4", ",", 
     RowBox[{"TestID", "\[Rule]", "\"\<ID3\>\""}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Test", "[", 
    RowBox[{
     RowBox[{"2", "+", "2"}], ",", "3", ",", 
     RowBox[{"TestID", "\[Rule]", "\"\<ID4\>\""}]}], "]"}]}], "]"}]], "Input",\

 CellLabel->"In[91]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Passed Tests: \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Passed Tests: ", 2],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[91]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Failed Tests: \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Failed Tests: ", 2],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[91]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Failed Test Id: \"\>", "\[InvisibleSpace]", "\<\"ID2\"\>", 
   "\[InvisibleSpace]", "\<\"\\nExpected: \"\>", "\[InvisibleSpace]", 
   TagBox["3",
    HoldForm], "\[InvisibleSpace]", "\<\" Actual: \"\>", "\[InvisibleSpace]", 
   
   TagBox["2",
    HoldForm]}],
  SequenceForm["Failed Test Id: ", "ID2", "\nExpected: ", 
   HoldForm[3], " Actual: ", 
   HoldForm[2]],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[91]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Failed Test Id: \"\>", "\[InvisibleSpace]", "\<\"ID4\"\>", 
   "\[InvisibleSpace]", "\<\"\\nExpected: \"\>", "\[InvisibleSpace]", 
   TagBox["3",
    HoldForm], "\[InvisibleSpace]", "\<\" Actual: \"\>", "\[InvisibleSpace]", 
   
   TagBox["4",
    HoldForm]}],
  SequenceForm["Failed Test Id: ", "ID4", "\nExpected: ", 
   HoldForm[3], " Actual: ", 
   HoldForm[4]],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[91]:="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "The test driver used in the preceding \[OpenCurlyDoubleQuote]Solution\
\[CloseCurlyDoubleQuote] section is very basic and does not support all the \
features available when you build unit tests in Workbench. If you are \
ambitious, you can build a more sophisticated driver\[LongDash]even one that \
has more features than Workbench. It really depends on your needs. The main \
requirement is to become familiar with the ",
 StyleBox["MUnit", "Literal"],
 " API. Although documentation on ",
 StyleBox["MUnit", "Literal"],
 " is sparse at the time I am writing this, well-written Mathematica packages \
are self-describing. For example, you can find all the public functions in \
the package by using ",
 StyleBox["?\"MUnit`*\"", "Literal"],
 ".  For the sake of space, I\[CloseCurlyQuote]ll only list the functions \
that begin with the letter ",
 StyleBox["T", "Emphasis"],
 ". By clicking on the output, you can see what the function or option does. \
The most important functions are selectors, like ",
 StyleBox["TestID", "Literal"],
 ", because these allow you to extract information from a ",
 StyleBox["TestResultObject", "Literal"],
 ", which is the output produced by functions like ",
 StyleBox["Test", "Literal"],
 ", ",
 StyleBox["TestMatch", "Literal"],
 ", and so on. "
}], "Text",
 CellChangeTimes->{{3.4729981350404663`*^9, 3.472998283131301*^9}, {
  3.474291124871978*^9, 3.474291125713008*^9}, {3.476469817559877*^9, 
  3.4764698311643047`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "\"\<MUnit`T*\>\""}]], "Input",
 CellLabel->"In[92]:="],

Cell[BoxData[
 DynamicModuleBox[{Typeset`open$$ = True}, 
  PaneSelectorBox[{False->
   RowBox[{
    OpenerBox[Dynamic[Typeset`open$$],
     ImageSize->Small], 
    StyleBox["MUnit`", "InfoHeading"]}], True->GridBox[{
     {
      RowBox[{
       OpenerBox[Dynamic[Typeset`open$$],
        ImageSize->Small], 
       StyleBox["MUnit`", "InfoHeading"]}]},
     {GridBox[{
        {
         StyleBox[
          ButtonBox["Test",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"Test", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestIndex",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestIndex", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestRunResultObject",
           BaseStyle->"InformationLink",
           
           ButtonData:>{
            "Info3466964003-8167788", {"TestRunResultObject", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7]},
        {
         StyleBox[
          ButtonBox["TestCaveat",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestCaveat", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestInput",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestInput", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestRunTitle",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestRunTitle", "MUnit`"}},
           
           ButtonNote->"MUnit`"],
          FontSize->7]},
        {
         StyleBox[
          ButtonBox["TestCellEvaluationFunction",
           BaseStyle->"InformationLink",
           
           ButtonData:>{
            "Info3466964003-8167788", {
             "TestCellEvaluationFunction", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestLog",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestLog", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestStringFree",
           BaseStyle->"InformationLink",
           
           ButtonData:>{
            "Info3466964003-8167788", {"TestStringFree", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7]},
        {
         StyleBox[
          ButtonBox["TestExecute",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestExecute", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestMatch",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestMatch", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestStringMatch",
           BaseStyle->"InformationLink",
           
           ButtonData:>{
            "Info3466964003-8167788", {"TestStringMatch", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7]},
        {
         StyleBox[
          ButtonBox["TestFailureAction",
           BaseStyle->"InformationLink",
           
           ButtonData:>{
            "Info3466964003-8167788", {"TestFailureAction", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestMemoryUsed",
           BaseStyle->"InformationLink",
           
           ButtonData:>{
            "Info3466964003-8167788", {"TestMemoryUsed", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestTags",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestTags", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7]},
        {
         StyleBox[
          ButtonBox["TestFailureMessage",
           BaseStyle->"InformationLink",
           
           ButtonData:>{
            "Info3466964003-8167788", {"TestFailureMessage", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestRequirement",
           BaseStyle->"InformationLink",
           
           ButtonData:>{
            "Info3466964003-8167788", {"TestRequirement", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestTerminate",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestTerminate", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7]},
        {
         StyleBox[
          ButtonBox["TestFree",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestFree", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestResultObject",
           BaseStyle->"InformationLink",
           
           ButtonData:>{
            "Info3466964003-8167788", {"TestResultObject", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestTimeUsed",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestTimeUsed", "MUnit`"}},
           
           ButtonNote->"MUnit`"],
          FontSize->7]},
        {
         StyleBox[
          ButtonBox["TestID",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestID", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestResultQ",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestResultQ", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox["",
          FontSize->7]},
        {
         StyleBox[
          ButtonBox["TestIgnore",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestIgnore", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox[
          ButtonBox["TestRun",
           BaseStyle->"InformationLink",
           ButtonData:>{"Info3466964003-8167788", {"TestRun", "MUnit`"}},
           ButtonNote->"MUnit`"],
          FontSize->7], 
         StyleBox["",
          FontSize->7]}
       },
       DefaultBaseStyle->"InfoGrid",
       GridBoxItemSize->{"Columns" -> {{
            Scaled[0.31666666666666665`]}}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}, 
   Dynamic[Typeset`open$$],
   ImageSize->Automatic]]], "Print", "InfoCell",
 Magnification->1]
}, Open  ]],

Cell[TextData[{
 "By inspecting ",
 StyleBox["MUnit", "Literal"],
 "\[CloseCurlyQuote]s functions, I was inspired to create a test driver that \
supports the idea of test sections (see ",
 ButtonBox["Recipe 19.10",
  BaseStyle->"Hyperlink",
  ButtonData->"Organizing and Controlling Test Suites"],
 "). However, instead of a ",
 StyleBox["BeginTestSection-EndTestSection", "Literal"],
 " pair, I use a single ",
 StyleBox["TestSection", "Literal"],
 " function. The ",
 StyleBox["TestDriver", "Literal"],
 " will work with multiple ",
 StyleBox["TestSection", "Literal"],
 "s or multiple ",
 StyleBox["Test", "Literal"],
 "s but not mixtures of both. For this driver to handle skipping and \
aborting, it must be careful to evaluate a test lazily, hence, it uses ",
 StyleBox["Hold", "Literal"],
 " and the ",
 StyleBox["HoldAll", "Literal"],
 " attribute judiciously. It also uses ",
 StyleBox["Catch", "Literal"],
 " and ",
 StyleBox["Throw", "Literal"],
 " combinations. This is a feature of Mathematica I have largely avoided in \
the book, but it sometimes comes in handy as a way to terminate an iteration \
without cumbersome conditional logic. In this case, the function ",
 StyleBox["RunTest", "Literal"],
 " causes a test to evaluate and tests for failure. If the test does not \
succeed, it defers further decisions to ",
 StyleBox["OnFailedTest", "Literal"],
 " based on the test\[CloseCurlyQuote]s ",
 StyleBox["FailureMode", "Literal"],
 ". ",
 StyleBox["OnFailedTest", "Literal"],
 " will either ",
 StyleBox["Throw", "Literal"],
 " or return, depending on the mode. Further, it uses the mode as a tag in \
the ",
 StyleBox["Throw", "Literal"],
 ", so the appropriate ",
 StyleBox["Catch", "Literal"],
 " handler can intercept the failure."
}], "Text",
 CellChangeTimes->{{3.4729983136529217`*^9, 3.4729983855546417`*^9}, {
  3.472998422894464*^9, 3.47299843835606*^9}, {3.47300172425176*^9, 
  3.473001727945314*^9}, {3.474291543586191*^9, 3.474291558223858*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{
   "TestDriver", ",", "TestSection", ",", "RunTest", ",", "OnFailedTest"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetAttributes", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "TestDriver", ",", "TestDriver2", ",", "TestSection", ",", "RunTest"}], 
      "}"}], ",", "HoldAll"}], "]"}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "OnFailedTest", " ", "simply", " ", "returns", " ", "the", " ", "test", 
     " ", "if", " ", "mode", " ", "is", " ", "Continue"}], ",", " ", 
    RowBox[{
    "otherwise", " ", "it", " ", "throws", " ", "using", " ", "mode", " ", 
     "as", " ", "a", " ", 
     RowBox[{"tag", "."}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"OnFailedTest", "[", 
   RowBox[{"test_", ",", "\"\<Continue\>\""}], "]"}], " ", ":=", " ", 
  "test"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OnFailedTest", "[", 
    RowBox[{"test_", ",", " ", "mode_"}], "]"}], ":=", " ", 
   RowBox[{"Throw", "[", 
    RowBox[{"test", ",", "mode"}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "RunTest", " ", "tests", " ", "the", " ", "failure", " ", "mode", " ", 
    "and", " ", "updates", " ", 
    RowBox[{"counters", ".", " ", "It"}], " ", "defers", " ", "failure", " ", 
    "action", " ", "to", " ", 
    RowBox[{"OnFailedTest", "."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RunTest", "[", "test_TestResultObject", "]"}], ":=", " ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"FailureMode", "[", "test", "]"}], " ", "=!=", " ", 
      "\"\<Success\>\""}], ",", 
     RowBox[{
      RowBox[{"failedTests", "++"}], ";", 
      RowBox[{"OnFailedTest", "[", 
       RowBox[{"test", ",", 
        RowBox[{"TestFailureAction", "[", "test", "]"}]}], "]"}]}], ",", 
     RowBox[{
      RowBox[{"passedTests", "++"}], ";", "test"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "A", " ", "TestSection", " ", "has", " ", "one", " ", "or", " ", "more", 
     " ", "tests"}], ",", " ", 
    RowBox[{"a", " ", "name"}], ",", " ", 
    RowBox[{
    "and", " ", "Boolean", " ", "for", " ", "enabling", " ", "or", " ", 
     "disabling", " ", "the", " ", 
     RowBox[{"section", "."}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestSection", "[", 
   RowBox[{"tests__", ",", "section_String", ",", "False"}], "]"}], ":=", " ", 
  RowBox[{"{", "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TestSection", "[", 
    RowBox[{"tests__", ",", "section_String", ",", 
     RowBox[{"_", ":", "True"}]}], "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", 
      RowBox[{
       RowBox[{"ReleaseHold", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"RunTest", "[", "#", "]"}], "&"}], " ", "/@", " ", 
         RowBox[{"Hold", "[", "tests", "]"}]}], "]"}], ",", 
       "\"\<SkipSection\>\""}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "TestDriver2", " ", "valuates", " ", "the", " ", "results", " ", "of", " ", 
    RowBox[{"tests", "."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TestDriver2", "[", "tests__", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"testList", " ", "=", " ", 
        RowBox[{"{", "tests", "}"}]}], ",", "numTests", ",", "failed"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"failed", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"{", "tests", "}"}], ",", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"FailureMode", "[", "#", "]"}], " ", "=!=", " ", 
            "\"\<Success\>\""}], ")"}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Passed Tests: \>\"", ",", "passedTests"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Failed Tests: \>\"", ",", "  ", "failedTests"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Failed Test Id: \>\"", ",", 
          RowBox[{"TestID", "[", "#", "]"}], ",", " ", 
          "\"\<\\nExpected: \>\"", ",", 
          RowBox[{"ExpectedOutput", "[", "#", "]"}], ",", "\"\< Actual: \>\"",
           ",", " ", 
          RowBox[{"ActualOutput", "[", "#", "]"}]}], "]"}], "&"}], " ", "/@", 
       " ", "failed"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "This", " ", "instance", " ", "of", " ", "TestDriver", " ", "executes", 
    " ", 
    RowBox[{"sections", "."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TestDriver", "[", "secs__TestSection", "]"}], " ", ":=", " ", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"passedTests", "=", "0"}], ",", 
       RowBox[{"failedTests", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"TestDriver2", " ", "@@", " ", 
      RowBox[{"Flatten", "[", " ", 
       RowBox[{"{", 
        RowBox[{"Catch", "[", " ", 
         RowBox[{
          RowBox[{"{", "secs", "}"}], ",", "\"\<Abort\>\""}], "]"}], "}"}], 
       "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "This", " ", "instance", " ", "of", " ", "TestDriver", " ", "executes", 
    " ", 
    RowBox[{"tests", "."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestDriver", "[", "tests__", "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"passedTests", "=", "0"}], ",", 
      RowBox[{"failedTests", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"TestDriver2", " ", "@@", "  ", 
     RowBox[{"Flatten", "[", " ", 
      RowBox[{"{", 
       RowBox[{"Catch", "[", 
        RowBox[{
         RowBox[{"RunTest", " ", "/@", " ", 
          RowBox[{"{", "tests", "}"}]}], ",", "\"\<Abort\>\""}], "]"}], "}"}],
       "]"}]}]}], "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.472998454076118*^9, 3.472998544919094*^9}},
 CellLabel->"In[93]:="],

Cell["\<\
Here I put the driver through its paces demonstrating different failure \
scenarios.\
\>", "Text", "ProductionPageBreak"],

Cell[TextData[{
 "In this scenario, the second test in ",
 StyleBox["sect1", "Literal"],
 " fails with an ",
 StyleBox["Abort", "Literal"],
 "; hence, tests with test IDs ",
 StyleBox["\"Sect1ID3\"", "Literal"],
 " and ",
 StyleBox["\"Sect2ID1\"", "Literal"],
 " ",
 "are not run."
}], "Text",
 CellChangeTimes->{{3.472998553272414*^9, 3.4729985671592903`*^9}, {
   3.474291570830948*^9, 3.4742915794693117`*^9}, 3.474389831194468*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestDriver", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"TestSection", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Test", "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "3", ",", 
       RowBox[{"TestID", "\[Rule]", "\"\<Sect1ID1\>\""}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Test", "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "3", ",", 
       RowBox[{"TestID", "\[Rule]", "\"\<Sect1ID2\>\""}], ",", 
       RowBox[{"TestFailureAction", "\[Rule]", "\"\<Abort\>\""}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Test", "[", 
      RowBox[{
       RowBox[{"1", "+", "3"}], ",", "4", ",", 
       RowBox[{"TestID", "\[Rule]", "\"\<Sect1ID3\>\""}]}], "]"}], ",", 
     "\"\<sect1\>\""}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TestSection", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Test", "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "2", ",", 
       RowBox[{"TestID", "\[Rule]", "\"\<Sect2ID1\>\""}]}], "]"}], ",", 
     "\"\<sect2\>\""}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[103]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Passed Tests: \"\>", "\[InvisibleSpace]", "0"}],
  SequenceForm["Passed Tests: ", 0],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[103]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Failed Tests: \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Failed Tests: ", 2],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[103]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Failed Test Id: \"\>", "\[InvisibleSpace]", "\<\"Sect1ID2\"\>",
    "\[InvisibleSpace]", "\<\"\\nExpected: \"\>", "\[InvisibleSpace]", 
   TagBox["3",
    HoldForm], "\[InvisibleSpace]", "\<\" Actual: \"\>", "\[InvisibleSpace]", 
   
   TagBox["2",
    HoldForm]}],
  SequenceForm["Failed Test Id: ", "Sect1ID2", "\nExpected: ", 
   HoldForm[3], " Actual: ", 
   HoldForm[2]],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[103]:="]
}, Open  ]],

Cell[TextData[{
 "In this scenario, the second test in ",
 StyleBox["sect1", "Literal"],
 " fails with a ",
 StyleBox["\"SkipSection\"", "Literal"],
 "; hence, the test with test ID ",
 StyleBox["\"Sect1ID3\"", "Literal"],
 " is skipped, but a ",
 StyleBox["\"Sect2ID1\"", "Literal"],
 " runs."
}], "Text",
 CellChangeTimes->{{3.472998590256112*^9, 3.472998635022511*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestDriver", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"TestSection", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Test", "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "3", ",", 
       RowBox[{"TestID", "\[Rule]", "\"\<Sect1ID1\>\""}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Test", "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "3", ",", 
       RowBox[{"TestID", "\[Rule]", "\"\<Sect1ID2\>\""}], ",", 
       RowBox[{"TestFailureAction", "\[Rule]", "\"\<SkipSection\>\""}]}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Test", "[", 
      RowBox[{
       RowBox[{"1", "+", "3"}], ",", "4", ",", 
       RowBox[{"TestID", "\[Rule]", "\"\<Sect1ID3\>\""}]}], "]"}], ",", 
     "\"\<sect1\>\""}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TestSection", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Test", "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "2", ",", 
       RowBox[{"TestID", "\[Rule]", "\"\<Sect2ID1\>\""}]}], "]"}], ",", 
     "\"\<sect2\>\""}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[104]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Passed Tests: \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Passed Tests: ", 1],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[104]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Failed Tests: \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Failed Tests: ", 2],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[104]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Failed Test Id: \"\>", "\[InvisibleSpace]", "\<\"Sect1ID2\"\>",
    "\[InvisibleSpace]", "\<\"\\nExpected: \"\>", "\[InvisibleSpace]", 
   TagBox["3",
    HoldForm], "\[InvisibleSpace]", "\<\" Actual: \"\>", "\[InvisibleSpace]", 
   
   TagBox["2",
    HoldForm]}],
  SequenceForm["Failed Test Id: ", "Sect1ID2", "\nExpected: ", 
   HoldForm[3], " Actual: ", 
   HoldForm[2]],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[104]:="]
}, Open  ]],

Cell[TextData[{
 "Here sections are not used, but a ",
 StyleBox["TestFailureAction", "Literal"],
 " of ",
 StyleBox["\"Abort\"", "Literal"],
 " is still handled appropriately. "
}], "Text", "ProductionPageBreak",
 CellChangeTimes->{3.472998646361767*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestDriver", "[", 
  RowBox[{
   RowBox[{"Test", "[", 
    RowBox[{
     RowBox[{"1", "+", "3"}], ",", "2", ",", 
     RowBox[{"TestID", "\[Rule]", "\"\<Sect1ID1\>\""}], ",", 
     RowBox[{"TestFailureAction", "\[Rule]", "\"\<Abort\>\""}]}], "]"}], ",", 
   
   RowBox[{"Test", "[", 
    RowBox[{
     RowBox[{"1", "+", "1"}], ",", "2", ",", 
     RowBox[{"TestID", "\[Rule]", "\"\<Sect1ID1\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[105]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Passed Tests: \"\>", "\[InvisibleSpace]", "0"}],
  SequenceForm["Passed Tests: ", 0],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[105]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Failed Tests: \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Failed Tests: ", 1],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[105]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Failed Test Id: \"\>", "\[InvisibleSpace]", "\<\"Sect1ID1\"\>",
    "\[InvisibleSpace]", "\<\"\\nExpected: \"\>", "\[InvisibleSpace]", 
   TagBox["2",
    HoldForm], "\[InvisibleSpace]", "\<\" Actual: \"\>", "\[InvisibleSpace]", 
   
   TagBox["4",
    HoldForm]}],
  SequenceForm["Failed Test Id: ", "Sect1ID1", "\nExpected: ", 
   HoldForm[2], " Actual: ", 
   HoldForm[4]],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[105]:="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2"],

Cell[TextData[{
 "The concept of test sections is native to ",
 StyleBox["MUnit", "Literal"],
 " when used with Workbench, but has a different syntax. This is covered in \
",
 ButtonBox["Recipe 19.10",
  BaseStyle->"Hyperlink",
  ButtonData->"Organizing and Controlling Test Suites"],
 "."
}], "Text",
 CellChangeTimes->{{3.472998661338173*^9, 3.4729986649464397`*^9}, {
  3.4730017503903513`*^9, 3.473001755090626*^9}}]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowToolbars->"EditBar",
CellGrouping->Manual,
WindowSize->{836, 779},
WindowMargins->{{207, Automatic}, {Automatic, 27}},
PrintingCopies->1,
PrintingStartingPageNumber->741,
PrintingPageRange->{1, Automatic},
PageFooters->{{
   Cell[
    TextData[{
      CounterBox["Page"], 
      "\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]Chapter ", 
      CounterBox["ChapterLabel"], ":\[ThickSpace]\[ThickSpace]", 
      "Debugging and Testing"}], "Footer"], None, None}, {None, None, 
   Cell[
    TextData[{
      CounterBox[
      "Page", CounterFunction :> (
        Part[{"", 
          "19.0\[ThickSpace]\[ThickSpace]Introduction\[ThickSpace]\
\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "19.1\[ThickSpace]\[ThickSpace]Printing as the First Recourse to \
Debugging\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.1\[ThickSpace]\[ThickSpace]Printing as the First Recourse to \
Debugging\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.1\[ThickSpace]\[ThickSpace]Printing as the First Recourse to \
Debugging\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.2\[ThickSpace]\[ThickSpace]Debugging Functions Called Many \
Times \[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.3\[ThickSpace]\[ThickSpace]Stack Tracing to Debug Recursive \
Functions\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.3\[ThickSpace]\[ThickSpace]Stack Tracing to Debug Recursive \
Functions\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.4\[ThickSpace]\[ThickSpace]Taming Trace to Extract Useful \
Debugging Information\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\
\[ThickSpace]\[ThickSpace]", 
          "19.4\[ThickSpace]\[ThickSpace]Taming Trace to Extract Useful \
Debugging Information\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\
\[ThickSpace]\[ThickSpace]", 
          "19.4\[ThickSpace]\[ThickSpace]Taming Trace to Extract Useful \
Debugging Information\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\
\[ThickSpace]\[ThickSpace]", 
          "19.4\[ThickSpace]\[ThickSpace]Taming Trace to Extract Useful \
Debugging Information\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\
\[ThickSpace]\[ThickSpace]", 
          "19.5\[ThickSpace]\[ThickSpace]Creating a Poor \
Man\[CloseCurlyQuote]s Mathematica Debugger \[ThickSpace]\[ThickSpace]\
\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "19.5\[ThickSpace]\[ThickSpace]Creating a Poor \
Man\[CloseCurlyQuote]s Mathematica Debugger \[ThickSpace]\[ThickSpace]\
\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "19.5\[ThickSpace]\[ThickSpace]Creating a Poor \
Man\[CloseCurlyQuote]s Mathematica Debugger \[ThickSpace]\[ThickSpace]\
\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "19.6\[ThickSpace]\[ThickSpace]Debugging Built-In Functions with \
Evaluation and Step Monitors\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "19.6\[ThickSpace]\[ThickSpace]Debugging Built-In Functions with \
Evaluation and Step Monitors\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "19.7\[ThickSpace]\[ThickSpace]Visual Debugging with Wolfram \
Workbench\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.7\[ThickSpace]\[ThickSpace]Visual Debugging with Wolfram \
Workbench\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.7\[ThickSpace]\[ThickSpace]Visual Debugging with Wolfram \
Workbench\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.7\[ThickSpace]\[ThickSpace]Visual Debugging with Wolfram \
Workbench\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.8\[ThickSpace]\[ThickSpace]Writing Unit Tests to Help Ensure \
Correctness of Your Code\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\
\[ThickSpace]\[ThickSpace]", 
          "19.8\[ThickSpace]\[ThickSpace]Writing Unit Tests to Help Ensure \
Correctness of Your Code\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\
\[ThickSpace]\[ThickSpace]", 
          "19.8\[ThickSpace]\[ThickSpace]Writing Unit Tests to Help Ensure \
Correctness of Your Code\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\
\[ThickSpace]\[ThickSpace]", 
          "19.9\[ThickSpace]\[ThickSpace]Creating MUnit Tests Where Success \
Is Not Based on Equality Testing\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "19.9\[ThickSpace]\[ThickSpace]Creating MUnit Tests Where Success \
Is Not Based on Equality Testing\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "19.10\[ThickSpace]\[ThickSpace]Organizing and Controlling MUnit \
Tests and Test Suites\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\
\[ThickSpace]\[ThickSpace]", 
          "19.10\[ThickSpace]\[ThickSpace]Organizing and Controlling MUnit \
Tests and Test Suites\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\
\[ThickSpace]\[ThickSpace]", 
          "19.11\[ThickSpace]\[ThickSpace]Integrating Wolfram Workbench\
\[CloseCurlyQuote]s MUnit Package into the Frontend \
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.11\[ThickSpace]\[ThickSpace]Integrating Wolfram Workbench\
\[CloseCurlyQuote]s MUnit Package into the Frontend \
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.11\[ThickSpace]\[ThickSpace]Integrating Wolfram Workbench\
\[CloseCurlyQuote]s MUnit Package into the Frontend \
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.11\[ThickSpace]\[ThickSpace]Integrating Wolfram Workbench\
\[CloseCurlyQuote]s MUnit Package into the Frontend \
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.11\[ThickSpace]\[ThickSpace]Integrating Wolfram Workbench\
\[CloseCurlyQuote]s MUnit Package into the Frontend \
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.11\[ThickSpace]\[ThickSpace]Integrating Wolfram Workbench\
\[CloseCurlyQuote]s MUnit Package into the Frontend \
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "19.11\[ThickSpace]\[ThickSpace]Integrating Wolfram Workbench\
\[CloseCurlyQuote]s MUnit Package into the Frontend \
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]"}, # - CurrentValue[
          InputNotebook[], PrintingStartingPageNumber] + 1]& )], 
      CounterBox["Page"]}], "Footer"]}},
ShowSelection->True,
CellLabelAutoDelete->False,
$CellContext`TrackCellChangeTimes -> False,
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.25, 1.25 Inherited],
FrontEndVersion->"7.0 for Mac OS X x86 (32-bit) (February 18, 2009)",
StyleDefinitions->"ora.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "chDebug"->{
  Cell[545, 20, 145, 6, 63, "ChapterLabel",
   CounterAssignments->{{"ChapterLabel", 19}},
   CellTags->"chDebug"]},
 "Printing as the First Recourse to Debugging"->{
  Cell[7149, 193, 244, 9, 63, "Heading1",
   CellTags->"Printing as the First Recourse to Debugging"]},
 "Debugging Functions Called Many Times"->{
  Cell[23304, 672, 233, 9, 31, "Heading1",
   CellTags->"Debugging Functions Called Many Times"]},
 "Stack Tracing To Debug Recursive Functions"->{
  Cell[36741, 1132, 266, 9, 46, "Heading1",
   CellTags->"Stack Tracing To Debug Recursive Functions"]},
 "Taming Trace"->{
  Cell[48681, 1574, 209, 9, 70, "Heading1",
   CellTags->"Taming Trace"]},
 "Creating a Poor Man's Mathematica Debugger"->{
  Cell[107771, 3757, 252, 10, 70, "Heading1",
   CellTags->"Creating a Poor Man's Mathematica Debugger"]},
 "Discussion 19.5"->{
  Cell[115032, 3989, 60, 1, 38, "Heading2",
   CellTags->"Discussion 19.5"]},
 "Evaluation and Step Monitors"->{
  Cell[125316, 4291, 235, 9, 70, "Heading1",
   CellTags->"Evaluation and Step Monitors"]},
 "Visual Debugging with Wolfram Workbench"->{
  Cell[138138, 4671, 324, 11, 70, "Heading1",
   CellTags->"Visual Debugging with Wolfram Workbench"]},
 "fDebug1"->{
  Cell[140098, 4733, 242, 5, 42, "Figure Title",
   CellTags->"fDebug1"]},
 "fDebug2"->{
  Cell[140456, 4745, 191, 4, 42, "Figure Title",
   CellTags->"fDebug2"]},
 "fWWBreak"->{
  Cell[179671, 5404, 201, 5, 36, "Figure Title",
   CellTags->"fWWBreak"]},
 "fWWDebugPerspective"->{
  Cell[229706, 6242, 137, 2, 34, "Figure Title",
   CellTags->"fWWDebugPerspective"]},
 "fWWBreakpointsTab"->{
  Cell[242642, 6506, 208, 4, 34, "Figure Title",
   CellTags->"fWWBreakpointsTab"]},
 "Writing Unit Tests"->{
  Cell[243310, 6529, 221, 9, 63, "Heading1",
   CellTags->"Writing Unit Tests"]},
 "fWWTestReport"->{
  Cell[277038, 7154, 197, 4, 42, "Figure Title",
   CellTags->"fWWTestReport"]},
 "fFailureComparator"->{
  Cell[292976, 7432, 149, 4, 42, "Figure Title",
   CellTags->"fFailureComparator"]},
 "Creating MUnit Tests Without Equality"->{
  Cell[293602, 7457, 298, 11, 70, "Heading1",
   CellTags->"Creating MUnit Tests Without Equality"]},
 "Organizing and Controlling Test Suites"->{
  Cell[297400, 7627, 307, 11, 63, "Heading1",
   CellTags->"Organizing and Controlling Test Suites"]},
 "fTestSuite"->{
  Cell[301419, 7753, 234, 5, 42, "Figure Title",
   CellTags->"fTestSuite"]},
 "MUnit in Front-End"->{
  Cell[301678, 7762, 306, 10, 70, "Heading1",
   CellTags->"MUnit in Front-End"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"chDebug", 342446, 8866},
 {"Printing as the First Recourse to Debugging", 342613, 8870},
 {"Debugging Functions Called Many Times", 342761, 8873},
 {"Stack Tracing To Debug Recursive Functions", 342909, 8876},
 {"Taming Trace", 343033, 8879},
 {"Creating a Poor Man's Mathematica Debugger", 343157, 8882},
 {"Discussion 19.5", 343286, 8885},
 {"Evaluation and Step Monitors", 343399, 8888},
 {"Visual Debugging with Wolfram Workbench", 343537, 8891},
 {"fDebug1", 343655, 8894},
 {"fDebug2", 343744, 8897},
 {"fWWBreak", 343834, 8900},
 {"fWWDebugPerspective", 343936, 8903},
 {"fWWBreakpointsTab", 344047, 8906},
 {"Writing Unit Tests", 344157, 8909},
 {"fWWTestReport", 344259, 8912},
 {"fFailureComparator", 344365, 8915},
 {"Creating MUnit Tests Without Equality", 344495, 8918},
 {"Organizing and Controlling Test Suites", 344642, 8921},
 {"fTestSuite", 344762, 8924},
 {"MUnit in Front-End", 344865, 8927}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[545, 20, 145, 6, 63, "ChapterLabel",
 CounterAssignments->{{"ChapterLabel", 19}},
 CellTags->"chDebug"],
Cell[693, 28, 45, 0, 63, "ChapterTitle"],
Cell[741, 30, 438, 17, 259, "Epigraph"],
Cell[1182, 49, 156, 2, 60, "EpigraphAuthor"],
Cell[CellGroupData[{
Cell[1363, 55, 142, 8, 63, "Heading1"],
Cell[1508, 65, 1717, 33, 175, "Text"],
Cell[3228, 100, 2413, 50, 271, "Text"],
Cell[5644, 152, 399, 6, 63, "Text"],
Cell[6046, 160, 184, 7, 76, "Code"],
Cell[6233, 169, 84, 1, 34, "Figure Title"],
Cell[6320, 172, 721, 13, 63, "NoteWarning"]
}, Open  ]],
Cell[7056, 188, 68, 1, 35, "NoteWarningEnd"],
Cell[CellGroupData[{
Cell[7149, 193, 244, 9, 63, "Heading1",
 CellTags->"Printing as the First Recourse to Debugging"],
Cell[CellGroupData[{
Cell[7418, 206, 40, 0, 75, "Heading2WithHeadAbove"],
Cell[7461, 208, 283, 5, 44, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7781, 218, 28, 0, 75, "Heading2"],
Cell[7812, 220, 685, 17, 72, "Text"],
Cell[CellGroupData[{
Cell[8522, 241, 471, 14, 96, "Input"],
Cell[8996, 257, 70, 1, 54, "Output"]
}, Open  ]],
Cell[9081, 261, 547, 15, 69, "Text"],
Cell[CellGroupData[{
Cell[9653, 280, 576, 18, 96, "Input"],
Cell[10232, 300, 185, 3, 35, "Print"],
Cell[10420, 305, 70, 1, 54, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10539, 312, 30, 0, 75, "Heading2"],
Cell[10572, 314, 804, 17, 104, "Text"],
Cell[CellGroupData[{
Cell[11401, 335, 396, 12, 73, "Input"],
Cell[11800, 349, 70, 1, 54, "Output"]
}, Open  ]],
Cell[11885, 353, 730, 16, 86, "Text"],
Cell[CellGroupData[{
Cell[12640, 373, 628, 19, 47, "Input"],
Cell[13271, 394, 185, 3, 32, "Print"],
Cell[13459, 399, 71, 1, 20, "Output"]
}, Open  ]],
Cell[13545, 403, 502, 9, 72, "Text"],
Cell[CellGroupData[{
Cell[14072, 416, 193, 5, 32, "Input"],
Cell[14268, 423, 79, 1, 32, "Print"]
}, Open  ]],
Cell[14362, 427, 349, 9, 56, "Text"],
Cell[CellGroupData[{
Cell[14736, 440, 538, 13, 51, "Input"],
Cell[15277, 455, 906, 15, 71, "Message"],
Cell[16186, 472, 166, 2, 20, "Output"]
}, Open  ]],
Cell[16367, 477, 1306, 38, 105, "Text"],
Cell[CellGroupData[{
Cell[17698, 519, 619, 16, 51, "Input"],
Cell[18320, 537, 79, 1, 32, "Print"],
Cell[18402, 540, 906, 15, 71, "Message"],
Cell[19311, 557, 164, 2, 20, "Output"]
}, Open  ]],
Cell[19490, 562, 344, 7, 56, "Text"],
Cell[19837, 571, 754, 22, 63, "Input"],
Cell[20594, 595, 175, 4, 23, "Text"],
Cell[CellGroupData[{
Cell[20794, 603, 572, 14, 51, "Input"],
Cell[21369, 619, 93, 1, 32, "Print"],
Cell[21465, 622, 906, 15, 71, "Message"],
Cell[22374, 639, 164, 2, 20, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22587, 647, 28, 0, 38, "Heading2"],
Cell[22618, 649, 637, 17, 56, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[23304, 672, 233, 9, 31, "Heading1",
 CellTags->"Debugging Functions Called Many Times"],
Cell[CellGroupData[{
Cell[23562, 685, 40, 0, 26, "Heading2WithHeadAbove"],
Cell[23605, 687, 467, 9, 72, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24109, 701, 28, 0, 38, "Heading2"],
Cell[24140, 703, 810, 19, 105, "Text"],
Cell[24953, 724, 1467, 44, 80, "Input"],
Cell[26423, 770, 364, 6, 72, "Text"],
Cell[CellGroupData[{
Cell[26812, 780, 89, 2, 20, "Input"],
Cell[26904, 784, 53, 1, 20, "Output"]
}, Open  ]],
Cell[26972, 788, 204, 5, 23, "Text"],
Cell[CellGroupData[{
Cell[27201, 797, 89, 2, 20, "Input"],
Cell[27293, 801, 2687, 93, 77, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[30029, 900, 43, 0, 25, "Heading2"],
Cell[30075, 902, 1015, 25, 88, "Text"],
Cell[31093, 929, 703, 20, 35, "Input"],
Cell[31799, 951, 801, 25, 35, "Input"],
Cell[32603, 978, 116, 3, 40, "Text"],
Cell[CellGroupData[{
Cell[32744, 985, 88, 2, 20, "Input"],
Cell[32835, 989, 2687, 93, 77, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35559, 1087, 88, 2, 20, "Input"],
Cell[35650, 1091, 184, 5, 20, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[35883, 1102, 28, 0, 38, "Heading2"],
Cell[35914, 1104, 398, 9, 40, "Text"],
Cell[36315, 1115, 377, 11, 23, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[36741, 1132, 266, 9, 46, "Heading1",
 CellTags->"Stack Tracing To Debug Recursive Functions"],
Cell[CellGroupData[{
Cell[37032, 1145, 40, 0, 26, "Heading2WithHeadAbove"],
Cell[37075, 1147, 456, 9, 72, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37568, 1161, 41, 0, 25, "Heading2"],
Cell[37612, 1163, 626, 15, 88, "Text"],
Cell[38241, 1180, 1192, 40, 82, "Input"],
Cell[CellGroupData[{
Cell[39458, 1224, 260, 8, 20, "Input"],
Cell[39721, 1234, 2157, 83, 62, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[41927, 1323, 30, 0, 38, "Heading2"],
Cell[41960, 1325, 336, 8, 40, "Text"],
Cell[42299, 1335, 82, 2, 20, "Input"],
Cell[42384, 1339, 649, 21, 32, "Input"],
Cell[CellGroupData[{
Cell[43058, 1364, 109, 3, 20, "Input"],
Cell[43170, 1369, 1210, 44, 32, "Output"],
Cell[44383, 1415, 1210, 44, 32, "Output"],
Cell[45596, 1461, 1211, 44, 32, "Output"],
Cell[46810, 1507, 1186, 43, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[48045, 1556, 51, 0, 25, "Heading2"],
Cell[48099, 1558, 555, 12, 56, "Text"]
}, Open  ]]
}, Open  ]],
Cell[48681, 1574, 209, 9, 70, "Heading1",
 CellTags->"Taming Trace"],
Cell[CellGroupData[{
Cell[48915, 1587, 27, 0, 25, "Heading2"],
Cell[48945, 1589, 418, 9, 56, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49400, 1603, 28, 0, 38, "Heading2"],
Cell[49431, 1605, 835, 15, 121, "Text"],
Cell[50269, 1622, 931, 31, 63, "Input"],
Cell[51203, 1655, 718, 11, 121, "Text"],
Cell[CellGroupData[{
Cell[51946, 1670, 168, 5, 20, "Input"],
Cell[52117, 1677, 23781, 783, 462, "Output"]
}, Open  ]],
Cell[75913, 2463, 577, 13, 72, "Text"],
Cell[CellGroupData[{
Cell[76515, 2480, 86, 2, 20, "Input"],
Cell[76604, 2484, 53, 1, 20, "Output"]
}, Open  ]],
Cell[76672, 2488, 532, 15, 72, "Text"],
Cell[CellGroupData[{
Cell[77229, 2507, 114, 3, 20, "Input"],
Cell[77346, 2512, 243, 7, 50, "Output"]
}, Open  ]],
Cell[77604, 2522, 478, 11, 56, "Text"],
Cell[78085, 2535, 1019, 28, 92, "Input"],
Cell[79107, 2565, 173, 4, 40, "Text"],
Cell[CellGroupData[{
Cell[79305, 2573, 133, 3, 20, "Input"],
Cell[79441, 2578, 14583, 659, 308, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[94073, 3243, 30, 0, 38, "Heading2"],
Cell[94106, 3245, 288, 6, 40, "Text"],
Cell[CellGroupData[{
Cell[94419, 3255, 172, 5, 20, "Input"],
Cell[94594, 3262, 1776, 45, 96, "Output"]
}, Open  ]],
Cell[96385, 3310, 408, 11, 56, "Text"],
Cell[CellGroupData[{
Cell[96818, 3325, 544, 16, 32, "Input"],
Cell[97365, 3343, 4997, 223, 107, "Output"]
}, Open  ]],
Cell[102377, 3569, 229, 5, 40, "Text"],
Cell[CellGroupData[{
Cell[102631, 3578, 498, 14, 35, "Input"],
Cell[103132, 3594, 1841, 71, 67, "Output"]
}, Open  ]],
Cell[104988, 3668, 665, 12, 105, "Text"],
Cell[105656, 3682, 521, 14, 72, "Text"],
Cell[CellGroupData[{
Cell[106202, 3700, 325, 11, 20, "Input"],
Cell[106530, 3713, 700, 20, 47, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[107279, 3739, 28, 0, 38, "Heading2"],
Cell[107310, 3741, 424, 11, 56, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107771, 3757, 252, 10, 70, "Heading1",
 CellTags->"Creating a Poor Man's Mathematica Debugger"],
Cell[CellGroupData[{
Cell[108048, 3771, 40, 0, 26, "Heading2WithHeadAbove"],
Cell[108091, 3773, 321, 7, 56, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108449, 3785, 28, 0, 38, "Heading2"],
Cell[108480, 3787, 756, 17, 105, "Text"],
Cell[109239, 3806, 157, 4, 20, "Input"],
Cell[109399, 3812, 617, 13, 72, "Text"],
Cell[110019, 3827, 2549, 73, 198, "Input"],
Cell[112571, 3902, 702, 17, 40, "Text"],
Cell[113276, 3921, 1128, 37, 78, "Input"],
Cell[114407, 3960, 110, 4, 23, "Text"],
Cell[CellGroupData[{
Cell[114542, 3968, 104, 3, 20, "Input",
 InitializationCell->False],
Cell[114649, 3973, 250, 7, 45, InheritFromParent]
}, Open  ]]
}, Open  ]],
Cell[114926, 3984, 81, 1, 25, "PrintTemporary"],
Cell[CellGroupData[{
Cell[115032, 3989, 60, 1, 38, "Heading2",
 CellTags->"Discussion 19.5"],
Cell[115095, 3992, 1034, 30, 105, "Text"],
Cell[116132, 4024, 750, 12, 121, "Text"],
Cell[116885, 4038, 4579, 119, 328, "Input"],
Cell[121467, 4159, 1135, 39, 63, "Input"],
Cell[CellGroupData[{
Cell[122627, 4202, 104, 3, 20, "Input",
 InitializationCell->False],
Cell[122734, 4207, 884, 24, 45, InheritFromParent]
}, Open  ]],
Cell[123633, 4234, 327, 9, 25, "PrintTemporary"],
Cell[123963, 4245, 716, 17, 105, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124716, 4267, 41, 0, 25, "Heading2"],
Cell[124760, 4269, 507, 16, 40, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[125316, 4291, 235, 9, 70, "Heading1",
 CellTags->"Evaluation and Step Monitors"],
Cell[CellGroupData[{
Cell[125576, 4304, 40, 0, 25, "Heading2"],
Cell[125619, 4306, 686, 18, 56, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126342, 4329, 28, 0, 38, "Heading2"],
Cell[126373, 4331, 1157, 31, 121, "Text"],
Cell[CellGroupData[{
Cell[127555, 4366, 652, 19, 47, "Input"],
Cell[128210, 4387, 2478, 46, 170, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[130737, 4439, 43, 0, 25, "Heading2"],
Cell[130783, 4441, 698, 19, 72, "Text"],
Cell[131484, 4462, 462, 7, 88, "BlockQuote"],
Cell[131949, 4471, 173, 6, 23, "Text"],
Cell[CellGroupData[{
Cell[132147, 4481, 671, 19, 47, "Input"],
Cell[132821, 4502, 401, 8, 62, "Output"]
}, Open  ]],
Cell[133237, 4513, 387, 7, 72, "Text"],
Cell[CellGroupData[{
Cell[133649, 4524, 1176, 34, 83, "Input"],
Cell[134828, 4560, 69, 1, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134934, 4566, 1244, 35, 83, "Input"],
Cell[136181, 4603, 70, 1, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136288, 4609, 1239, 35, 82, "Input"],
Cell[137530, 4646, 57, 1, 20, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[137636, 4653, 28, 0, 38, "Heading2"],
Cell[137667, 4655, 422, 10, 56, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[138138, 4671, 324, 11, 70, "Heading1",
 CellTags->"Visual Debugging with Wolfram Workbench"],
Cell[CellGroupData[{
Cell[138487, 4686, 40, 0, 26, "Heading2WithHeadAbove"],
Cell[138530, 4688, 329, 7, 56, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138896, 4700, 28, 0, 38, "Heading2"],
Cell[138927, 4702, 981, 20, 121, "Text"],
Cell[139911, 4724, 184, 7, 70, "Code"],
Cell[140098, 4733, 242, 5, 42, "Figure Title",
 CellTags->"fDebug1"],
Cell[140343, 4740, 110, 3, 42, "Code"],
Cell[140456, 4745, 191, 4, 42, "Figure Title",
 CellTags->"fDebug2"],
Cell[140650, 4751, 631, 13, 63, "Text"],
Cell[141284, 4766, 38384, 636, 320, "Figure"],
Cell[179671, 5404, 201, 5, 36, "Figure Title",
 CellTags->"fWWBreak"],
Cell[179875, 5411, 1155, 21, 138, "Text"],
Cell[181033, 5434, 48658, 805, 330, "Figure"]
}, Open  ]],
Cell[229706, 6242, 137, 2, 34, "Figure Title",
 CellTags->"fWWDebugPerspective"],
Cell[CellGroupData[{
Cell[229868, 6248, 64, 1, 34, "Heading2"],
Cell[229935, 6251, 1564, 28, 175, "Text"],
Cell[231502, 6281, 1215, 20, 175, "Text"],
Cell[232720, 6303, 525, 8, 82, "Text"],
Cell[233248, 6313, 3660, 87, 182, "Text"],
Cell[236911, 6402, 5716, 101, 139, "Figure"]
}, Open  ]],
Cell[242642, 6506, 208, 4, 34, "Figure Title",
 CellTags->"fWWBreakpointsTab"],
Cell[242853, 6512, 28, 0, 75, "Heading2"],
Cell[242884, 6514, 389, 10, 43, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243310, 6529, 221, 9, 63, "Heading1",
 CellTags->"Writing Unit Tests"],
Cell[CellGroupData[{
Cell[243556, 6542, 40, 0, 75, "Heading2WithHeadAbove"],
Cell[243599, 6544, 308, 5, 44, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243944, 6554, 28, 0, 75, "Heading2"],
Cell[243975, 6556, 977, 21, 84, "Text"],
Cell[244955, 6579, 263, 5, 44, "Text"],
Cell[245221, 6586, 417, 35, 580, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245675, 6626, 30, 0, 75, "Heading2"],
Cell[245708, 6628, 828, 15, 102, "Text"],
Cell[246539, 6645, 30496, 507, 665, "Figure"],
Cell[277038, 7154, 197, 4, 42, "Figure Title",
 CellTags->"fWWTestReport"],
Cell[277238, 7160, 1299, 24, 170, "Text"],
Cell[278540, 7186, 14421, 243, 240, "Figure"]
}, Open  ]],
Cell[292976, 7432, 149, 4, 42, "Figure Title",
 CellTags->"fFailureComparator"],
Cell[CellGroupData[{
Cell[293150, 7440, 28, 0, 38, "Heading2"],
Cell[293181, 7442, 372, 9, 40, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[293602, 7457, 298, 11, 70, "Heading1",
 CellTags->"Creating MUnit Tests Without Equality"],
Cell[CellGroupData[{
Cell[293925, 7472, 40, 0, 26, "Heading2WithHeadAbove"],
Cell[293968, 7474, 359, 9, 56, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[294364, 7488, 28, 0, 38, "Heading2"],
Cell[294395, 7490, 768, 28, 69, "Text"],
Cell[295166, 7520, 408, 33, 564, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[295611, 7558, 30, 0, 75, "Heading2"],
Cell[295644, 7560, 298, 7, 46, "Text"],
Cell[295945, 7569, 131, 5, 109, "Code"],
Cell[296079, 7576, 275, 7, 46, "Text"],
Cell[296357, 7585, 173, 8, 158, "Code"],
Cell[296533, 7595, 691, 18, 67, "Text"],
Cell[297227, 7615, 124, 6, 125, "Code"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[297400, 7627, 307, 11, 63, "Heading1",
 CellTags->"Organizing and Controlling Test Suites"],
Cell[CellGroupData[{
Cell[297732, 7642, 40, 0, 75, "Heading2WithHeadAbove"],
Cell[297775, 7644, 558, 9, 82, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298370, 7658, 28, 0, 75, "Heading2"],
Cell[298401, 7660, 463, 12, 48, "Text"],
Cell[298867, 7674, 1007, 23, 404, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299911, 7702, 30, 0, 75, "Heading2"],
Cell[299944, 7704, 322, 8, 46, "Text"],
Cell[300269, 7714, 810, 18, 88, "Text"],
Cell[301082, 7734, 310, 15, 175, "Code"]
}, Open  ]]
}, Open  ]],
Cell[301419, 7753, 234, 5, 42, "Figure Title",
 CellTags->"fTestSuite"],
Cell[CellGroupData[{
Cell[301678, 7762, 306, 10, 70, "Heading1",
 CellTags->"MUnit in Front-End"],
Cell[CellGroupData[{
Cell[302009, 7776, 40, 0, 26, "Heading2WithHeadAbove"],
Cell[302052, 7778, 202, 4, 40, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[302291, 7787, 28, 0, 38, "Heading2"],
Cell[302322, 7789, 183, 4, 40, "Text"],
Cell[302508, 7795, 1780, 46, 158, "Input"],
Cell[304291, 7843, 838, 17, 105, "NoteWarning"],
Cell[305132, 7862, 26, 0, 33, "NoteWarningEnd"],
Cell[305161, 7864, 515, 12, 50, "NoteWarningInput"],
Cell[305679, 7878, 1810, 33, 400, "NoteWarningOutput"],
Cell[307492, 7913, 410, 12, 62, "NoteWarningEnd"],
Cell[307905, 7927, 212, 7, 40, "Text"],
Cell[CellGroupData[{
Cell[308142, 7938, 796, 23, 77, "Input"],
Cell[308941, 7963, 209, 5, 32, "Print"],
Cell[309153, 7970, 209, 5, 32, "Print"],
Cell[309365, 7977, 490, 13, 50, "Print"],
Cell[309858, 7992, 490, 13, 50, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[310397, 8011, 30, 0, 38, "Heading2"],
Cell[310430, 8013, 1482, 30, 202, "Text"],
Cell[CellGroupData[{
Cell[311937, 8047, 83, 2, 20, "Input"],
Cell[312023, 8051, 6977, 205, 241, "Print"]
}, Open  ]],
Cell[319015, 8259, 1979, 49, 218, "Text"],
Cell[320997, 8310, 6582, 176, 595, "Input"],
Cell[327582, 8488, 131, 3, 23, "Text"],
Cell[327716, 8493, 435, 13, 40, "Text"],
Cell[CellGroupData[{
Cell[328176, 8510, 1152, 28, 122, "Input"],
Cell[329331, 8540, 210, 5, 32, "Print"],
Cell[329544, 8547, 210, 5, 32, "Print"],
Cell[329757, 8554, 501, 13, 50, "Print"]
}, Open  ]],
Cell[330273, 8570, 372, 11, 40, "Text"],
Cell[CellGroupData[{
Cell[330670, 8585, 1159, 28, 122, "Input"],
Cell[331832, 8615, 210, 5, 32, "Print"],
Cell[332045, 8622, 210, 5, 32, "Print"],
Cell[332258, 8629, 501, 13, 50, "Print"]
}, Open  ]],
Cell[332774, 8645, 255, 7, 40, "Text"],
Cell[CellGroupData[{
Cell[333054, 8656, 478, 14, 32, "Input"],
Cell[333535, 8672, 210, 5, 32, "Print"],
Cell[333748, 8679, 210, 5, 32, "Print"],
Cell[333961, 8686, 501, 13, 50, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[334511, 8705, 28, 0, 38, "Heading2"],
Cell[334542, 8707, 420, 11, 40, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
