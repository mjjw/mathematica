(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    451497,      12147]
NotebookOptionsPosition[    407565,      10932]
NotebookOutlinePosition[    421911,      11232]
CellTagsIndexPosition[    421123,      11210]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "CHAPTER ",
 
 CounterBox["ChapterLabel"]
}], "ChapterLabel",
 CounterAssignments->{{"ChapterLabel", 5}},
 CellTags->"chStrings"],

Cell["String and Text Processing", "ChapterTitle"],

Cell["\<\
Someone will call
Something will fall
And smash on the floor
Without reading the text
Know what comes next
Seen it before
And it\[CloseCurlyQuote]s painful
Things must change
We must rearrange them
Or we\[CloseCurlyQuote]ll have to estrange them
All that I\[CloseCurlyQuote]m saying
The game\[CloseCurlyQuote]s not worth playing\[LineSeparator]Over and over \
again\
\>", "Epigraph",
 CellChangeTimes->{{3.4701598900153923`*^9, 3.470159904117351*^9}, {
  3.4705166289690437`*^9, 3.470516649621358*^9}, {3.475586795201412*^9, 
  3.475586805136717*^9}}],

Cell["\<\
Depeche Mode, \[OpenCurlyDoubleQuote]The Sun and the Rainfall\
\[CloseCurlyDoubleQuote]\
\>", "EpigraphAuthor",
 CellChangeTimes->{{3.4701597508499413`*^9, 3.470159777768581*^9}, 
   3.475586810216689*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Introduction"
}], "Heading1",
 CellTags->"IntroductionCh5"],

Cell["\<\
Users who come to Mathematica for its superior mathematical capabilities are \
pleasantly surprised to find strong abilities in programming areas outside of \
mathematics proper. This is certainly true in the area of textual and string \
processing. Mathematica\[CloseCurlyQuote]s rich library of functions for \
string and structured text manipulation rivals Java, Perl, or any other \
modern language you can tie a string around. \
\>", "Text",
 CellChangeTimes->{{3.470159917890094*^9, 3.47015991857397*^9}, {
   3.470159950291054*^9, 3.4701599602513933`*^9}, 3.470160001373643*^9}],

Cell["\<\
The sections in this introduction provide information on some of the basic \
tools of strings and string manipulation. \
\>", "Text",
 CellChangeTimes->{
  3.4657710234586*^9, {3.470160010517082*^9, 3.470160011010084*^9}}],

Cell[CellGroupData[{

Cell["Characters and Character Encodings", "Heading2"],

Cell[TextData[{
 "Mathematica uses ",
 StyleBox["Unicode", "Techical Italic"],
 " internally, but externally (e.g., when saving a notebook) it uses ASCII \
codes, encoding non-ASCII characters in a special form."
}], "Text",
 CellChangeTimes->{
  3.4657710299482*^9, {3.470160062359996*^9, 3.470160102833699*^9}}],

Cell[TextData[{
 StyleBox["For example, lowercase Greek letters and other non-ASCI",
  FontTracking->"Plain"],
 StyleBox["I characters are encoded us",
  FontTracking->"Extended"],
 "ing backslash-bracketed character names (",
 StyleBox["\\[", "Literal"],
 StyleBox["name", "LiteralItalic"],
 StyleBox["]", "Literal"],
 ")."
}], "Text",
 CellChangeTimes->{3.4701601450607347`*^9, 3.4701603185625257`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alpha", " ", "=", " ", "\"\<\[Alpha]\>\""}]], "Input",
 CellLabel->"In[1]:="],

Cell[BoxData["\<\"\[Alpha]\"\>"], "Output",
 CellChangeTimes->{3.4657716095861998`*^9, 3.4658598439955997`*^9, 
  3.468597740807213*^9, 3.468597864143873*^9, 3.470067176884511*^9},
 CellLabel->"Out[1]="]
}, Open  ]],

Cell[TextData[{
 "The function ",
 StyleBox["ToString", "Literal"],
 " will translate strings using different encoding schemes."
}], "Text",
 CellChangeTimes->{3.4657710503218*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToString", "[", 
  RowBox[{"alpha", ",", " ", 
   RowBox[{"CharacterEncoding", "\[Rule]", " ", "\"\<ASCII\>\""}]}], 
  "]"}]], "Input",
 CellLabel->"In[2]:="],

Cell[BoxData["\<\"\\\\[Alpha]\"\>"], "Output",
 CellChangeTimes->{3.4657716100074*^9, 3.4658598440186*^9, 
  3.4685977408459044`*^9, 3.468597864180716*^9, 3.4700671769406443`*^9},
 CellLabel->"Out[2]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["The default character encoding used by Mathematica is stored in",
  FontTracking->"SemiCondensed"],
 " ",
 StyleBox["$CharacterEncoding", "Literal"],
 ", and the native character encoding of the underlying operating system \
Mathematica is running is stored in ",
 StyleBox["$SystemCharacterEncoding", "Literal"],
 ". All available encodings are stored in ",
 StyleBox["$CharacterEncodings", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.4701603394680767`*^9, 3.470160341119953*^9}}],

Cell[CellGroupData[{

Cell[BoxData["$CharacterEncoding"], "Input",
 CellLabel->"In[3]:="],

Cell[BoxData["\<\"UTF-8\"\>"], "Output",
 CellChangeTimes->{3.4657716101633997`*^9, 3.4658598440425997`*^9, 
  3.468597740881606*^9, 3.468597864226738*^9, 3.470067176984827*^9},
 CellLabel->"Out[3]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$SystemCharacterEncoding"], "Input",
 CellLabel->"In[4]:="],

Cell[BoxData["\<\"UTF-8\"\>"], "Output",
 CellChangeTimes->{3.4657716102258*^9, 3.4658598440646*^9, 
  3.468597740926589*^9, 3.4685978642771606`*^9, 3.47006717705127*^9},
 CellLabel->"Out[4]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Partition", "[", 
   RowBox[{"$CharacterEncodings", ",", "4"}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellLabel->"In[5]:="],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"AdobeStandard\"\>", "\<\"ASCII\"\>", "\<\"CP936\"\>", \
"\<\"CP949\"\>"},
    {"\<\"CP950\"\>", "\<\"Custom\"\>", "\<\"EUC-JP\"\>", "\<\"EUC\"\>"},
    {"\<\"IBM-850\"\>", "\<\"ISO10646-1\"\>", "\<\"ISO8859-10\"\>", \
"\<\"ISO8859-11\"\>"},
    {"\<\"ISO8859-13\"\>", "\<\"ISO8859-14\"\>", "\<\"ISO8859-15\"\>", \
"\<\"ISO8859-16\"\>"},
    {"\<\"ISO8859-1\"\>", "\<\"ISO8859-2\"\>", "\<\"ISO8859-3\"\>", \
"\<\"ISO8859-4\"\>"},
    {"\<\"ISO8859-5\"\>", "\<\"ISO8859-6\"\>", "\<\"ISO8859-7\"\>", \
"\<\"ISO8859-8\"\>"},
    {"\<\"ISO8859-9\"\>", "\<\"ISOLatin1\"\>", "\<\"ISOLatin2\"\>", \
"\<\"ISOLatin3\"\>"},
    {"\<\"ISOLatin4\"\>", "\<\"ISOLatinCyrillic\"\>", "\<\"Klingon\"\>", \
"\<\"koi8-r\"\>"},
    {"\<\"MacintoshArabic\"\>", "\<\"MacintoshChineseSimplified\"\>", \
"\<\"MacintoshChineseTraditional\"\>", "\<\"MacintoshCroatian\"\>"},
    {"\<\"MacintoshCyrillic\"\>", "\<\"MacintoshGreek\"\>", \
"\<\"MacintoshHebrew\"\>", "\<\"MacintoshIcelandic\"\>"},
    {"\<\"MacintoshKorean\"\>", "\<\"MacintoshNonCyrillicSlavic\"\>", \
"\<\"MacintoshRomanian\"\>", "\<\"MacintoshRoman\"\>"},
    {"\<\"MacintoshThai\"\>", "\<\"MacintoshTurkish\"\>", \
"\<\"MacintoshUkrainian\"\>", "\<\"Math1\"\>"},
    {"\<\"Math2\"\>", "\<\"Math3\"\>", "\<\"Math4\"\>", "\<\"Math5\"\>"},
    {"\<\"Mathematica1\"\>", "\<\"Mathematica2\"\>", "\<\"Mathematica3\"\>", \
"\<\"Mathematica4\"\>"},
    {"\<\"Mathematica5\"\>", "\<\"Mathematica6\"\>", "\<\"Mathematica7\"\>", \
"\<\"PrintableASCII\"\>"},
    {"\<\"ShiftJIS\"\>", "\<\"Symbol\"\>", "\<\"Unicode\"\>", \
"\<\"UTF8\"\>"},
    {"\<\"WindowsANSI\"\>", "\<\"WindowsBaltic\"\>", \
"\<\"WindowsCyrillic\"\>", "\<\"WindowsEastEurope\"\>"},
    {"\<\"WindowsGreek\"\>", "\<\"WindowsThai\"\>", "\<\"WindowsTurkish\"\>", \
"\<\"ZapfDingbats\"\>"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.7]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.4657716104286003`*^9, 3.4658598440886*^9, 
  3.468597740965328*^9, 3.4685978643439837`*^9, 3.4700671773060637`*^9},
 GridBoxOptions->{BaseStyle->{Magnification -> 0.8299999999999998}},
 CellLabel->"Out[5]//TableForm="]
}, Open  ]],

Cell["Notice how UTF-8 needs two bytes to display alpha.", "Text",
 CellChangeTimes->{
  3.4701603724625053`*^9, {3.471623477491583*^9, 3.471623482607757*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToString", "[", 
  RowBox[{"alpha", ",", " ", 
   RowBox[{"CharacterEncoding", "\[Rule]", " ", "\"\<UTF8\>\""}]}], 
  "]"}]], "Input",
 CellLabel->"In[6]:="],

Cell[BoxData["\<\"\[CapitalIHat]\[PlusMinus]\"\>"], "Output",
 CellChangeTimes->{3.4657716105690002`*^9, 3.4658598441126003`*^9, 
  3.468597741010457*^9, 3.468597864393433*^9, 3.470067177354908*^9},
 CellLabel->"Out[6]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["ToCharacterCode", "Literal"],
 " gives the numerical representation."
}], "Text",
 CellChangeTimes->{3.4657710845950003`*^9, 3.470160388181926*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToCharacterCode", "[", 
  RowBox[{"ToString", "[", 
   RowBox[{"alpha", ",", " ", 
    RowBox[{"CharacterEncoding", "\[Rule]", " ", "\"\<UTF8\>\""}]}], "]"}], 
  "]"}]], "Input",
 CellLabel->"In[7]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"206", ",", "177"}], "}"}]], "Output",
 CellChangeTimes->{3.4657716110058002`*^9, 3.4658598441366*^9, 
  3.468597741060193*^9, 3.468597864443883*^9, 3.470067177401924*^9},
 CellLabel->"Out[7]="]
}, Open  ]],

Cell[TextData[{
 "You can map from character codes back to characters using ",
 StyleBox["FromCharacterCode[]", "Literal"],
 "."
}], "Text", "ProductionPageBreak"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromCharacterCode", "[", 
  RowBox[{"{", 
   RowBox[{"87", ",", "88", ",", "89", ",", "90"}], "}"}], "]"}]], "Input",
 CellLabel->"In[8]:="],

Cell[BoxData["\<\"WXYZ\"\>"], "Output",
 CellChangeTimes->{3.465771611115*^9, 3.4658598441616*^9, 3.46859774109416*^9,
   3.468597864494225*^9, 3.470067177458447*^9},
 CellLabel->"Out[8]="]
}, Open  ]],

Cell["The mapping may not be one-to-one for certain encodings.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromCharacterCode", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"206", ",", "177"}], "}"}], ",", " ", "\"\<UTF8\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[9]:="],

Cell[BoxData["\<\"\[Alpha]\"\>"], "Output",
 CellChangeTimes->{3.4657716112553997`*^9, 3.4658598441836*^9, 
  3.4685977411430397`*^9, 3.468597864544539*^9, 3.470067177501834*^9},
 CellLabel->"Out[9]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["String and Regular Expressions", "Heading2"],

Cell[TextData[{
 StyleBox["A great deal of Mathematica\[CloseCurlyQuote]s prowess in text \
processing comes ",
  FontTracking->"Plain"],
 StyleBox["from its rich support",
  FontTracking->"SemiCondensed"],
 StyleBox[" for patt",
  FontTracking->"Plain"],
 "ern matching. There are two basic classes of string patterns: string \
expressions and regular expressions. Introduced in version 5.1, each has a \
similar expressive power. The advantage of ",
 StyleBox["StringExpression", "Literal"],
 " is that it is less cryptic because it ",
 StyleBox["uses more words than symbols to express patterns. The advantage of \
",
  FontTracking->"SemiCondensed"],
 StyleBox["RegularExpression", "Literal",
  FontTracking->"SemiCondensed"],
 " is that it is more standa",
 StyleBox["rdized with other languages such as Perl, Ruby, ",
  FontTracking->"Plain"],
 StyleBox["Java, and so on. Non-Mathematica",
  FontTracking->"SemiCondensed"],
 StyleBox[" progr",
  FontTracking->"Plain"],
 "ammers, especially those with a background in Unix, are more likely to \
understand regular expressions, although these expressions are cryptic to the \
uninitiated. You should become familiar with both if you plan to do much \
string manipulation. If you program frequently in languages outside of ",
 StyleBox["Mathematica, master the regular expression syntax. If you work \
strictly in Mathematica,",
  FontTracking->"SemiCondensed"],
 " choose the one that most appeals to you. If you learn the string \
expression syntax, you will have a leg up on learning Mathematica\
\[CloseCurlyQuote]s more general pattern-matching syntax, which is used in \
many contexts outside text processing. You can also mix string expressions \
and regular expressions into compound patterns."
}], "Text",
 CellChangeTimes->{{3.470160424314131*^9, 3.470160461606842*^9}, {
   3.470160630018032*^9, 3.470160631645801*^9}, {3.470160666861655*^9, 
   3.47016075622622*^9}, {3.470160813957899*^9, 3.470160866334325*^9}, {
   3.470160915124004*^9, 3.470161107542222*^9}, {3.470516688489731*^9, 
   3.470516699297923*^9}, 3.47162396894215*^9}],

Cell[CellGroupData[{

Cell["String expressions     ", "Heading3",
 CellChangeTimes->{3.475586842325119*^9}],

Cell[TextData[{
 StyleBox["StringExpressions", "Literal"],
 StyleBox[" are mostly written",
  FontTracking->"SemiCondensed"],
 " using the infix operator ",
 StyleBox["~~", "Literal"],
 ", which is a syntactic shortcut for the ",
 StyleBox["StringExpression[", "Literal"],
 StyleBox["]", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[" function. ",
  FontTracking->"SemiCondensed"],
 StyleBox["S", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox["tringExpression", "Literal"],
 " uses Mathematica\[CloseCurlyQuote]s blanks notation (e.g., ",
 StyleBox["_", "Literal"],
 ", ",
 StyleBox["__", "Literal"],
 ", and ",
 StyleBox["___", "Literal"],
 ") to represent wild cards. See ",
 ButtonBox["Chapter 4",
  BaseStyle->"Hyperlink",
  ButtonData->{"Patterns.nb", "IntroductionCh4"}],
 " for more on blanks."
}], "Text",
 CellChangeTimes->{
  3.4657711127686*^9, {3.4701611506995983`*^9, 3.470161175167523*^9}, {
   3.470161209870078*^9, 3.47016123464215*^9}, {3.470161266202001*^9, 
   3.4701612824484587`*^9}, 3.4705167039731293`*^9}],

Cell[TextData[{
 "Match ",
 StyleBox["\"xy\"", "Literal"],
 " followed by any character."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\"\<xy\>\"", " ", "~~", " ", "_"}], ";"}]], "Input",
 CellLabel->"In[10]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<xyz\>\"", " ", ",", " ", 
   RowBox[{"\"\<xy\>\"", " ", "~~", " ", "_"}]}], "]"}]], "Input",
 CellLabel->"In[11]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716114114*^9, 3.4658598442106*^9, 
  3.468597741209527*^9, 3.468597864626727*^9, 3.470067177584592*^9},
 CellLabel->"Out[11]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<xyzz\>\"", " ", ",", " ", 
   RowBox[{"\"\<xy\>\"", " ", "~~", " ", "_"}]}], "]"}]], "Input",
 CellLabel->"In[12]:="],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.4657716114582*^9, 3.4658598442316*^9, 
  3.468597741243548*^9, 3.4685978646607533`*^9, 3.470067177619108*^9},
 CellLabel->"Out[12]="]
}, Open  ]],

Cell[TextData[{
 "Match ",
 StyleBox["\"xy\"", "Literal"],
 " followed by one or more characters."
}], "Text", "ProductionPageBreak"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\"\<xy\>\"", " ", "~~", " ", "__"}], ";"}]], "Input",
 CellLabel->"In[13]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<xyzz\>\"", " ", ",", " ", 
   RowBox[{"\"\<xy\>\"", " ", "~~", " ", "__"}]}], "]"}]], "Input",
 CellLabel->"In[14]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716115986*^9, 3.4658598442566*^9, 
  3.468597741309764*^9, 3.46859786472647*^9, 3.4700671777008*^9},
 CellLabel->"Out[14]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<xy\>\"", " ", ",", " ", 
   RowBox[{"\"\<xy\>\"", " ", "~~", " ", "__"}]}], "]"}]], "Input",
 CellLabel->"In[15]:="],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.4657716116454*^9, 3.4658598442785997`*^9, 
  3.468597741343399*^9, 3.4685978647655478`*^9, 3.47006717774658*^9},
 CellLabel->"Out[15]="]
}, Open  ]],

Cell[TextData[{
 "Match ",
 StyleBox["\"xy\"", "Literal"],
 " followed by zero or more characters."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\"\<xy\>\"", " ", "~~", " ", "___"}], ";"}]], "Input",
 CellLabel->"In[16]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<xyz\>\"", " ", ",", " ", 
   RowBox[{"\"\<xy\>\"", " ", "~~", " ", "___"}]}], "]"}]], "Input",
 CellLabel->"In[17]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716117078*^9, 3.4658598443046*^9, 
  3.468597741426845*^9, 3.468597864827278*^9, 3.470067177818186*^9},
 CellLabel->"Out[17]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<xy\>\"", " ", ",", " ", 
   RowBox[{"\"\<xy\>\"", " ", "~~", " ", "___"}]}], "]"}]], "Input",
 CellLabel->"In[18]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.465771611817*^9, 3.4658598443266*^9, 
  3.468597741463381*^9, 3.468597864864677*^9, 3.470067177933321*^9},
 CellLabel->"Out[18]="]
}, Open  ]],

Cell["\<\
Patterns can be associated with variables so that the matching portion can be \
referred to in a subsequent expression. For example, the following pattern \
will match if the string begins and ends with the same sequence of characters.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<xyx\>\"", " ", ",", " ", 
   RowBox[{"x__", "~~", " ", "___", " ", "~~", "x__"}]}], "]"}]], "Input",
 CellLabel->"In[19]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716119574003`*^9, 3.4658598443486*^9, 
  3.4685977415104647`*^9, 3.468597864898919*^9, 3.4700671779799967`*^9},
 CellLabel->"Out[19]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<Hello. I said, hello\>\"", " ", ",", " ", 
   RowBox[{"x__", "~~", " ", "___", " ", "~~", "x__"}], ",", " ", 
   RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellLabel->"In[20]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716120666*^9, 3.4658598443696003`*^9, 
  3.468597741564735*^9, 3.46859786494489*^9, 3.4700671780196333`*^9},
 CellLabel->"Out[20]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<123ABC323\>\"", ",", " ", 
   RowBox[{
    RowBox[{"x", ":", "NumberString"}], " ", "~~", " ", "___", " ", "~~", " ",
     "x_"}]}], "]"}]], "Input",
 CellChangeTimes->{3.4755872223350563`*^9},
 CellLabel->"In[21]:="],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.4657716126438*^9, 3.4658598443906*^9, 
  3.4685977416292343`*^9, 3.468597864981778*^9, 3.4700671784221354`*^9},
 CellLabel->"Out[21]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<123ABC123\>\"", ",", " ", 
   RowBox[{
    RowBox[{"x", ":", "NumberString"}], " ", "~~", " ", "___", " ", "~~", " ",
     "x_"}]}], "]"}]], "Input",
 CellChangeTimes->{3.475587227676667*^9},
 CellLabel->"In[22]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716128310003`*^9, 3.4658598444046*^9, 
  3.4685977416814137`*^9, 3.468597865012238*^9, 3.470067178467586*^9},
 CellLabel->"Out[22]="]
}, Open  ]],

Cell[TextData[{
 ButtonBox["Table 5-1",
  BaseStyle->"Hyperlink",
  ButtonData->"tStringPatterns"],
 " shows some of the common raw ingredients for string expressions. If you \
have already read ",
 ButtonBox["Chapter 4",
  BaseStyle->"Hyperlink",
  ButtonData->{"Patterns.nb, chPatterns"}],
 " on pattern matching, you can see that all the same constructs are \
available for strings. The full set of string expression primitives can be \
found in ",
 StyleBox[ButtonBox["tutorial/WorkingWithStringPattern",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/\
WorkingWithStringPatterns.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/\
WorkingWithStringPatterns.html"], "URL"],
 StyleBox["s", "URL"],
 "."
}], "Text",
 CellChangeTimes->{
  3.470161397729347*^9, {3.47016143261559*^9, 3.4701614485030403`*^9}, {
   3.470517323995583*^9, 3.4705173240035973`*^9}, 3.470575663383222*^9, {
   3.470575711653949*^9, 3.4705757116904497`*^9}, {3.471624228887227*^9, 
   3.471624238304882*^9}, 3.475587846989828*^9}],

Cell["Common string patterns", "TableTitle", "TopOfPage",
 CellChangeTimes->{{3.475587584688957*^9, 3.47558758800677*^9}},
 CellTags->"tStringPatterns"],

Cell[BoxData[
 TagBox[GridBox[{
    {"", "", "Pattern", "Description", "", ""},
    {"", "", "", "", "", ""},
    {"", "", 
     RowBox[{"\"\<\\\"string\\\"\>\"", "\[IndentingNewLine]", "\"\<_\>\""}], 
     RowBox[{
     "\"\<a literal string of characters\>\"", "\[IndentingNewLine]", 
      "\"\<any single character\>\""}], "", ""},
    {"", "", "\"\<__\>\"", "\"\<any substring of one or more characters\>\"", 
     "", ""},
    {"", "", "\"\<___\>\"", 
     "\"\<any substring of zero or more characters\>\"", "", ""},
    {"", "", "\"\<x_,x__,x___\>\"", "\"\<substrings given the name x\>\"", "",
      ""},
    {"", "", "\"\<x:pattern\>\"", "\"\<pattern given the name x\>\"", "", 
     ""},
    {"", "", "\"\<pattern..\>\"", 
     "\"\<pattern repeated one or more times\>\"", "", ""},
    {"", "", "\"\<pattern...\>\"", 
     "\"\<pattern repeated zero or more times\>\"", "", ""},
    {"", "", "\"\<patt1|patt2|...\>\"", 
     "\"\<a pattern matching at least one of the patt-i\>\"", "", ""},
    {"", "", "\"\<patt/;cond\>\"", 
     "\"\<a pattern for which cond evaluates to True\>\"", "", ""},
    {"", "", "\"\<pattern?test\>\"", 
     "\"\<a pattern for which test yields True for each character\>\"", "", 
     ""},
    {"", "", "\"\<Except[pattern]\>\"", 
     "\"\<matches anything except pattern\>\"", "", ""},
    {"", "", "\"\<Whitespace\>\"", 
     "\"\<a sequence of whitespace characters\>\"", "", ""},
    {"", "", "\"\<NumberString\>\"", "\"\<the characters of a number\>\"", "",
      ""},
    {"", "", "\"\<DatePattern[spec]\>\"", "\"\<the characters of a date\>\"", 
     "", ""},
    {"", "", "\"\<charobj\>\"", 
     "\"\<an object representing a character class (see below)\>\"", "", ""}
   }],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Table",
 Evaluatable->False,
 CellChangeTimes->{{3.475587311388282*^9, 3.475587377451276*^9}, {
  3.476615721429531*^9, 3.476615731114831*^9}},
 GridBoxOptions->{
 GridBoxSpacings->{
  "Columns" -> {Automatic, Automatic, {2.1}, Automatic, Automatic}}},
 CellLabel->""],

Cell[TextData[{
 StyleBox[ButtonBox["Table 5-2",
  BaseStyle->"Hyperlink",
  ButtonData->"tRegExPatterns"],
  FontTracking->"SemiCondensed"],
 StyleBox[" shows some of the common raw ingredients for regular expressions.",
  FontTracking->"SemiCondensed"],
 StyleBox[" The full set of regular expression primitives can be found in ",
  FontTracking->"Plain"],
 StyleBox[ButtonBox["tutorial/WorkingWithStringPattern",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/\
WorkingWithStringPatterns.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/\
WorkingWithStringPatterns.html"], "URL",
  FontTracking->"Plain"],
 StyleBox["s", "URL",
  FontTracking->"Plain"],
 StyleBox[".",
  FontTracking->"Plain"],
 " Here ",
 StyleBox["c", "Literal"],
 " or ",
 StyleBox["c", "Literal"],
 StyleBox["n", "LiteralItalic"],
 ",",
 " where ",
 StyleBox["n", "LiteralItalic"],
 " is a number, is a placeholder for an arbitrary character, and ",
 StyleBox["p", "Literal"],
 StyleBox["n", "LiteralItalic"],
 " is a placeholder for an arbitrary regular expression."
}], "Text",
 CellMargins->{{0, 0}, {2, 23}},
 CellChangeTimes->{{3.47048324151019*^9, 3.470483250924515*^9}, {
   3.470575635222534*^9, 3.470575635258768*^9}, 3.4705780250698557`*^9, {
   3.471624494412591*^9, 3.471624530661346*^9}}]
}, Open  ]]
}, Open  ]],

Cell["Common regular expressions", "TableTitle",
 CellMargins->{{0, 0}, {0, 4}},
 CellChangeTimes->{{3.4755875919272747`*^9, 3.475587594279258*^9}},
 CellTags->"tRegExPatterns"],

Cell[BoxData[
 TagBox[GridBox[{
    {"", "", 
     RowBox[{"Regular", " ", "expression"}], "Description", "", ""},
    {"", "", "", "", "", ""},
    {"", "", 
     RowBox[{"\"\<[c1c2c3]\>\"", "\[IndentingNewLine]", "\"\<[c1-c2]\>\""}], 
     RowBox[{
     "\"\<Matches any of the characters c1, c2, or c3. For \
example,[AEIOUaeiou] matches vowels.\>\"", "\[IndentingNewLine]", 
      "\"\<Matches characters c1 through c2. For example, [a-z] matches all \
lowercase letters.\>\""}], "", ""},
    {"", "", "\"\<[^c1c2c3]\>\"", 
     "\"\<Matches any characters EXCEPT c1, c2, c3. For example,[^AEIOUaeiou] \
matches nonvowels.\>\"", "", ""},
    {"", "", "\"\<c*\>\"", 
     "\"\<Zero or more occurrences of character c. Greedy version.\>\"", "", 
     ""},
    {"", "", "\"\<c+\>\"", 
     "\"\<One or more occurrences of character c. Greedy version.\>\"", "", 
     ""},
    {"", "", "\"\<c?\>\"", 
     "\"\<The character c or nothing (i.e., zero or one occurrences). Greedy \
version.\>\"", "", ""},
    {"", "", "\"\<c*?\>\"", "\"\<Lazy version of c*.\>\"", "", ""},
    {"", "", "\"\<c+?\>\"", "\"\<Lazy version of c+.\>\"", "", ""},
    {"", "", "\"\<c??\>\"", "\"\<Lazy version of c?.\>\"", "", ""},
    {"", "", "\"\<p1|p2|...|pN\>\"", "\"\<Matches p1 or p2 or ... pN.\>\"", 
     "", ""},
    {"", "", "\"\<p1p2...pN\>\"", 
     "\"\<Matches p1, followed by p2, followed by ... pN.\>\"", "", ""},
    {"", "", "\"\<^p1\>\"", 
     "\"\<Matches p1 only at the start of the string.\>\"", "", ""},
    {"", "", "\"\<p1$\>\"", 
     "\"\<Matches p1 only at the end of the string.\>\"", "", ""},
    {"", "", "\"\<^p1$\>\"", 
     "\"\<Matches only if p1 matches the entire string.\>\"", "", ""},
    {"", "", "\"\<\\\\d\>\"", "\"\<Any digit 0-9\>\"", "", ""},
    {"", "", "\"\<\\\\s\>\"", "\"\<Whitespace\>\"", "", ""}
   }],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Table",
 Evaluatable->False,
 CellChangeTimes->{{3.4704832893704033`*^9, 3.470483427306027*^9}, 
   3.4704834615102777`*^9, {3.475587521962775*^9, 3.475587551847907*^9}, {
   3.475587600024575*^9, 3.475587611741624*^9}, {3.476615747709415*^9, 
   3.4766157609558563`*^9}},
 GridBoxOptions->{
 GridBoxSpacings->{
  "Columns" -> {
    Automatic, Automatic, {1.0999999999999992`}, Automatic, Automatic}}},
 CellLabel->""],

Cell[CellGroupData[{

Cell["See Also", "Heading2",
 CellMargins->{{0, 36}, {0, 5}}],

Cell[TextData[{
 StyleBox["The definitive reference on regular expressions is ",
  FontTracking->"Plain"],
 StyleBox["Mastering Regular Expressions, ", "CitationTitle",
  FontTracking->"Plain"],
 StyleBox["Second Edition, by Jeffrey E. F. Friedl \
(O\[CloseCurlyQuote]Reilly). If you plan to do anything nontrivial using \
regular expression matching, you will save yourself hours of frustration by \
consulting this book.",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{
  3.4657711515657997`*^9, {3.4704839195812187`*^9, 3.470483995771308*^9}, {
   3.470484208458674*^9, 3.470484256867345*^9}, {3.470484351663417*^9, 
   3.470484391537698*^9}, {3.4705174841168947`*^9, 3.4705174841237373`*^9}, {
   3.470517535045076*^9, 3.470517535053069*^9}, {3.470664969951625*^9, 
   3.470664972050399*^9}, {3.475588283394569*^9, 3.475588284943568*^9}}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["An excellent tutorial on working with string patterns in \
Mathematica can be ",
  FontTracking->"Extended"],
 StyleBox["found in the documentation under ",
  FontTracking->"Plain"],
 StyleBox[ButtonBox["tutorial/WorkingWithStringPatterns",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/\
WorkingWithStringPatterns.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/\
WorkingWithStringPatterns.html"], "URL",
  FontTracking->"Plain"],
 StyleBox[" or online",
  FontTracking->"Plain"],
 StyleBox[" at ",
  FontTracking->"Extended"],
 StyleBox[ButtonBox["http",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/yGbND"], None},
  ButtonNote->"http://bit.ly/yGbND"], "URL",
  FontTracking->"Extended"],
 StyleBox[ButtonBox["://bit.ly/yGbND",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/yGbND"], None},
  ButtonNote->"http://bit.ly/yGbND"], "URL"],
 ". Besides being a good all-around tutorial, it has a section specifically \
targeting Perl programmers, which is helpful for those who already have \
experience with string manipulation in Perl."
}], "Text"],

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Comparing Strings"
}], "Heading1", "ProductionPageBreak",
 CellTags->"ComapringStrings"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell[TextData[{
 "You want to compare strings but ",
 StyleBox["Less", "Literal"],
 ", ",
 StyleBox["LessEqual", "Literal"],
 ", ",
 StyleBox["Greater", "Literal"],
 ", and ",
 StyleBox["GreaterEqual", "Literal"],
 " do not work."
}], "Text"]
}, Open  ]],

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Use ",
 StyleBox["Order[e1,e2]", "Literal"],
 ", which returns 1 if e1 is before e2, \[Dash]1 if e1 is after e2, and 0 if \
they are equal."
}], "Text",
 CellChangeTimes->{{3.470493490496502*^9, 3.470493534723013*^9}, 
   3.47162467432055*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Order", "[", 
  RowBox[{"\"\<rat\>\"", ",", "\"\<rate\>\""}], "]"}]], "Input",
 CellLabel->"In[23]:="],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.4657716130025997`*^9, 3.4658598445126*^9, 
  3.468597741995742*^9, 3.468597865045491*^9, 3.470067178513153*^9},
 CellLabel->"Out[23]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Order", "[", 
  RowBox[{"\"\<rat\>\"", ",", "\"\<cat\>\""}], "]"}]], "Input",
 CellLabel->"In[24]:="],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.4657716131118*^9, 3.4658598445336*^9, 
  3.468597742033165*^9, 3.4685978650820217`*^9, 3.470067178553547*^9},
 CellLabel->"Out[24]="]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "Most users of Mathematica will not find themselves doing direct string \
comparison since functions like ",
 StyleBox["Sort", "Literal"],
 " and ",
 StyleBox["Ordering", "Literal"],
 " do the right thing. However, if you find yourself needing to use the more \
natural comparison operators with strings, you can do the following:"
}], "Text",
 CellChangeTimes->{
  3.470493557231374*^9, {3.4704937632567253`*^9, 3.470493774441434*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Unprotect", "[", 
   RowBox[{
   "Less", ",", " ", "LessEqual", ",", "Greater", ",", "GreaterEqual"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Less", "[", 
    RowBox[{"s1_String", ",", "s2_String"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"Order", "[", 
     RowBox[{"s1", ",", "s2"}], "]"}], " ", ">", " ", "0"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LessEqual", "[", 
    RowBox[{"s1_String", ",", "s2_String"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"Order", "[", 
     RowBox[{"s1", ",", "s2"}], "]"}], " ", ">", " ", 
    RowBox[{"-", "1"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Greater", "[", 
    RowBox[{"s1_String", ",", "s2_String"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"Order", "[", 
     RowBox[{"s1", ",", "s2"}], "]"}], " ", "<", " ", "0"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GreaterEqual", "[", 
    RowBox[{"s1_String", ",", "s2_String"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"Order", "[", 
     RowBox[{"s1", ",", "s2"}], "]"}], " ", "<", " ", "1"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", 
   RowBox[{
   "Less", ",", " ", "LessEqual", ",", "Greater", ",", "GreaterEqual"}], 
   "]"}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellLabel->"In[25]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\"\<rat\>\"", " ", "<", " ", "\"\<cat\>\""}]], "Input",
 CellLabel->"In[31]:="],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.4657716133302*^9, 3.4658598445626*^9, 
  3.468597742111717*^9, 3.468597865193103*^9, 3.470067178619945*^9},
 CellLabel->"Out[31]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\"\<cat\>\"", " ", "<", " ", "\"\<rat\>\""}]], "Input",
 CellLabel->"In[32]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716134393997`*^9, 3.4658598445846*^9, 
  3.4685977421686277`*^9, 3.4685978652318287`*^9, 3.4700671786700974`*^9},
 CellLabel->"Out[32]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\"\<cat\>\"", " ", "<=", " ", "\"\<cat\>\""}]], "Input",
 CellLabel->"In[33]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716135486*^9, 3.4658598446066*^9, 
  3.4685977422117157`*^9, 3.468597865261297*^9, 3.4700671787035427`*^9},
 CellLabel->"Out[33]="]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]Removing and Replacing Characters ",
 " ",
 "from Strings"
}], "Heading1", "ProductionPageBreak",
 CellChangeTimes->{3.470576388499741*^9, 3.485522430229926*^9},
 CellTags->"Removing and Replacing Characters from Strings"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell[TextData[{
 StyleBox["You want to strip certain characters (e.g., whitespace) or \
characters at certain positions ",
  FontTracking->"SemiCondensed"],
 StyleBox["from a string. You may also want to replace these characters with \
other characters.",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{3.4657711595685997`*^9, 3.470493893525062*^9}]
}, Open  ]],

Cell["Solution", "Heading2",
 CellMargins->{{0, 36}, {0, 9}}],

Cell[CellGroupData[{

Cell["Using patterns", "Heading3WithHeadAbove",
 CellChangeTimes->{3.475588342911291*^9}],

Cell[TextData[{
 StyleBox["StringReplace[]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" is an extremely versatile function that ",
  FontTracking->"SemiCondensed"],
 StyleBox["solves most character-oriented",
  FontTracking->"Plain"],
 StyleBox[" ",
  FontTracking->"SemiCondensed"],
 StyleBox["stripping and replacing operations.",
  FontTracking->"Plain"],
 StyleBox[" It supports a very ",
  FontTracking->"SemiCondensed"],
 StyleBox["general set of string-substitution",
  FontTracking->"Plain"],
 StyleBox[" ",
  FontTracking->"SemiCondensed"],
 StyleBox["rules, including regular expressions and Mathematica-specific \
string patterns.",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{{3.470493902280719*^9, 3.470493936232353*^9}, 
   3.4705176395963297`*^9}],

Cell["Strip all spaces.", "Text",
 CellMargins->{{0, 0}, {2, 3}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "myString", " ", "=", " ", 
   "\"\< The quick brown  fox   jumped over the lazy programmer   \>\""}], 
  ";"}]], "Input",
 CellMargins->{{53, 0}, {0, 2}},
 CellLabel->"In[34]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{"\"\< \>\"", " ", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]], "Input",
 CellLabel->"In[35]:="],

Cell[BoxData["\<\"Thequickbrownfoxjumpedoverthelazyprogrammer\"\>"], "Output",
 CellChangeTimes->{3.4657716138294*^9, 3.4658598446336*^9, 
  3.468597742296372*^9, 3.468597865312623*^9, 3.470067178769808*^9},
 CellLabel->"Out[35]="]
}, Open  ]],

Cell["Strip leading and trailing whitespace.", "Text",
 CellMargins->{{0, 0}, {2, 3}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringReplace", "[", 
   RowBox[{"myString", ",", " ", 
    RowBox[{
     RowBox[{"RegularExpression", "[", "\"\<^\\\\s+|\\\\s+$\>\"", "]"}], 
     "\[Rule]", "\"\<\>\""}]}], "]"}], "//", "InputForm"}]], "Input",
 CellMargins->{{53, 0}, {0, 2}},
 CellLabel->"In[36]:="],

Cell[TextData[StyleBox["\"The quick brown  fox   jumped over the lazy \
programmer\"",
 FontFamily->"WriTheSansMonoCond BoldItalic"]], "Output",
 CellChangeTimes->{3.4657716139698*^9, 3.4658598446566*^9, 
  3.468597742345622*^9, 3.468597865367098*^9, 3.470067178807686*^9},
 CellLabel->"Out[36]//InputForm="]
}, Open  ]],

Cell["\<\
Normalize whitespace: strip leading, trailing, and multiple internal \
whitespace.\
\>", "Text",
 CellMargins->{{0, 0}, {2, 1}},
 CellChangeTimes->{{3.470494031139451*^9, 3.470494040219131*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringReplace", "[", 
   RowBox[{"myString", ",", "  ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"RegularExpression", "[", "\"\<^\\\\s+|\\\\s+$\>\"", "]"}], 
       "\[Rule]", " ", "\"\<\>\""}], ",", " ", 
      RowBox[{
       RowBox[{"RegularExpression", "[", "\"\<\\\\s\\\\s+\>\"", "]"}], 
       "\[Rule]", " ", "\"\< \>\""}]}], "}"}]}], "]"}], "//", 
  "InputForm"}]], "Input",
 CellMargins->{{53, 0}, {0, 2}},
 CellLabel->"In[37]:="],

Cell[TextData[StyleBox["\"The quick brown fox jumped over the lazy programmer\
\"",
 FontFamily->"WriTheSansMonoCond BoldItalic"]], "Output",
 CellChangeTimes->{3.4657716141102*^9, 3.4658598446786003`*^9, 
  3.468597742399407*^9, 3.4685978654130573`*^9, 3.470067178841951*^9},
 CellLabel->"Out[37]//InputForm="]
}, Open  ]],

Cell["Literal string substitution.", "Text",
 CellMargins->{{0, 0}, {2, 1}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringReplace", "[", 
   RowBox[{"myString", ",", " ", 
    RowBox[{"\"\<the\>\"", " ", "\[Rule]", " ", "\"\<a\>\""}]}], "]"}], "//", 
  "InputForm"}]], "Input",
 CellMargins->{{53, 0}, {0, 2}},
 CellLabel->"In[38]:="],

Cell[TextData[StyleBox["\" The quick brown  fox   jumped over a lazy \
programmer   \"",
 FontFamily->"WriTheSansMonoCond BoldItalic"]], "Output",
 CellChangeTimes->{3.4657716142506*^9, 3.4658598446996*^9, 
  3.468597742445953*^9, 3.468597865449356*^9, 3.4700671789537992`*^9},
 CellLabel->"Out[38]//InputForm="]
}, Open  ]],

Cell["Ignore case while matching.", "Text",
 CellMargins->{{0, 0}, {2, 1}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringReplace", "[", 
   RowBox[{"myString", ",", " ", 
    RowBox[{"\"\<the\>\"", " ", "\[Rule]", " ", "\"\<a\>\""}], ",", " ", 
    RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], "//", 
  "InputForm"}]], "Input",
 CellMargins->{{53, 0}, {0, 2}},
 CellLabel->"In[39]:="],

Cell[TextData[StyleBox["\" a quick brown  fox   jumped over a lazy programmer \
   \"",
 FontFamily->"WriTheSansMonoCond BoldItalic"]], "Output",
 CellChangeTimes->{3.465771614391*^9, 3.4658598447216*^9, 
  3.468597742502659*^9, 3.468597865482511*^9, 3.470067179003845*^9},
 CellLabel->"Out[39]//InputForm="]
}, Open  ]],

Cell["\<\
Use Mathematica-specific patterns instead of regular expressions.\
\>", "Text",
 CellMargins->{{0, 0}, {2, -1}},
 CellChangeTimes->{{3.4704940894139357`*^9, 3.470494094449724*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{
    RowBox[{"\"\<ox\>\"", "~~", "Whitespace"}], "\[Rule]", "\"\<ox \>\""}]}], 
  "]"}]], "Input",
 CellMargins->{{53, 0}, {0, 2}},
 CellLabel->"In[40]:="],

Cell[BoxData["\<\" The quick brown  fox jumped over the lazy programmer   \
\"\>"], "Output",
 CellChangeTimes->{3.4657716145313997`*^9, 3.4658598447436*^9, 
  3.468597742545907*^9, 3.468597865533609*^9, 3.470067179041217*^9},
 CellLabel->"Out[40]="]
}, Open  ]]
}, Open  ]],

Cell["Using positions", "Heading3", "ProductionPageBreak",
 CellChangeTimes->{{3.475588450249978*^9, 3.475588453363584*^9}}],

Cell[TextData[{
 "Sometimes you know exactly where the characters are that you want to \
remove. In that case, ",
 StyleBox["StringDrop[]", "Literal"],
 " is a lot more efficient. ",
 StyleBox["StringDrop[]", "Literal"],
 " takes the string and a second argument, which can be an offset from the \
front, an offset from the end, specific positions, or a range of positions."
}], "Text",
 CellChangeTimes->{{3.470494120783388*^9, 3.470494157332897*^9}}],

Cell["Consider:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myString", " ", "=", " ", "\"\<abcdefghijklmnop\>\""}], " ", 
  ";"}]], "Input",
 CellLabel->"In[41]:="],

Cell["Here you drop the first three characters. ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringDrop", "[", 
  RowBox[{"myString", ",", " ", "3"}], "]"}]], "Input",
 CellLabel->"In[42]:="],

Cell[BoxData["\<\"defghijklmnop\"\>"], "Output",
 CellChangeTimes->{3.4657716147654*^9, 3.4658598447706003`*^9, 
  3.46859774262838*^9, 3.468597865595663*^9, 3.470067179103627*^9},
 CellLabel->"Out[42]="]
}, Open  ]],

Cell["Alternatively, you drop the last three characters, like so.", "Text",
 CellChangeTimes->{{3.470494182016325*^9, 3.470494187406994*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringDrop", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",
 CellLabel->"In[43]:="],

Cell[BoxData["\<\"abcdefghijklm\"\>"], "Output",
 CellChangeTimes->{3.4657716149681997`*^9, 3.4658598447916*^9, 
  3.468597742683465*^9, 3.4685978656291*^9, 3.470067179155072*^9},
 CellLabel->"Out[43]="]
}, Open  ]],

Cell["Drop only the third character, like this.", "Text",
 CellChangeTimes->{3.470494198721588*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringDrop", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellLabel->"In[44]:="],

Cell[BoxData["\<\"abdefghijklmnop\"\>"], "Output",
 CellChangeTimes->{3.4657716151085997`*^9, 3.4658598448126*^9, 
  3.468597742729006*^9, 3.468597865666214*^9, 3.4700671791919127`*^9},
 CellLabel->"Out[44]="]
}, Open  ]],

Cell[TextData[{
 "And drop the third through fifth (",
 StyleBox["\"cde\"", "Literal"],
 "), using a range list."
}], "Text",
 CellChangeTimes->{{3.470494207754469*^9, 3.4704942255553503`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringDrop", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[45]:="],

Cell[BoxData["\<\"abfghijklmnop\"\>"], "Output",
 CellChangeTimes->{3.465771615249*^9, 3.4658598448346*^9, 
  3.468597742783856*^9, 3.468597865699752*^9, 3.470067179237932*^9},
 CellLabel->"Out[45]="],

Cell[TextData[{
 "The step size in the range can even be",
 StyleBox[" greater than one by specifying it",
  FontTracking->"Plain"],
 StyleBox[" as the third el",
  FontTracking->"Extended"],
 "ement. Here you specify a step size of two to remove every other character. \
The ",
 StyleBox["-1", "Literal"],
 " upper limit is a convenient way to specify the end of the string without \
having to know its length."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringDrop", "[", 
  RowBox[{"myString", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[46]:="],

Cell[BoxData["\<\"bdfhjlnp\"\>"], "Output",
 CellChangeTimes->{3.4657716153894*^9, 3.4658598448596*^9, 
  3.468597742878985*^9, 3.4685978658632*^9, 3.4700671793259487`*^9},
 CellLabel->"Out[46]="]
}, Open  ]]
}, Open  ]],

Cell["You can also act on several strings at once.", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"otherString", " ", "=", " ", "\"\<1234567890\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[47]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringDrop", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"myString", ",", " ", "otherString"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[48]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"abfghijklmnop\"\>", ",", "\<\"1267890\"\>"}], "}"}]], "Output",\

 CellChangeTimes->{3.4657716155922003`*^9, 3.4658598448896*^9, 
  3.468597743028702*^9, 3.46859786592939*^9, 3.470067179385673*^9},
 CellLabel->"Out[48]="]
}, Open  ]],

Cell[TextData[{
 "The positional form for replacement is called ",
 StyleBox["StringReplacePart[]", "Literal"],
 ", and it works using similar conventions for specifying positions. The \
difference is that you must",
 " ",
 "always provide a contiguous range or a list of such ranges."
}], "Text",
 CellChangeTimes->{
  3.470494255586812*^9, {3.470517739940673*^9, 3.470517758423729*^9}, {
   3.485522430960802*^9, 3.48552243169655*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplacePart", "[", 
  RowBox[{"myString", ",", " ", "\"\<ZZZ\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[49]:="],

Cell[BoxData["\<\"abZZZfghijklmnop\"\>"], "Output",
 CellChangeTimes->{3.4657716157326*^9, 3.4658598449946003`*^9, 
  3.468597743083846*^9, 3.468597865984519*^9, 3.4700671794224873`*^9},
 CellLabel->"Out[49]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplacePart", "[", 
  RowBox[{"myString", ",", " ", "\"\<ZZZ\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"10", ",", "15"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[50]:="],

Cell[BoxData["\<\"abZZZfghiZZZp\"\>"], "Output",
 CellChangeTimes->{3.4657716158417997`*^9, 3.4658598450176*^9, 
  3.4685977431301327`*^9, 3.4685978660343933`*^9, 3.47006717946231*^9},
 CellLabel->"Out[50]="]
}, Open  ]],

Cell["Each range can also have its own replacement string.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplacePart", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<ZZZ\>\"", ",", "\"\<WWW\>\""}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"10", ",", "15"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[51]:="],

Cell[BoxData["\<\"abZZZfghiWWWp\"\>"], "Output",
 CellChangeTimes->{3.4657716160446*^9, 3.4658598450396*^9, 
  3.468597743179757*^9, 3.468597866084731*^9, 3.4700671795049067`*^9},
 CellLabel->"Out[51]="]
}, Open  ]],

Cell["Discussion", "Heading2"],

Cell[TextData[{
 StyleBox["As you can see from the given examples, ",
  FontTracking->"Plain"],
 StyleBox["StringReplace", "Literal",
  FontTracking->"Plain"],
 StyleBox[" is quite versatile. However, the versatility is derived from \
Mathematica\[CloseCurlyQuote]s rich support for patterns (see ",
  FontTracking->"Plain"],
 Cell[BoxData[
  FormBox[
   ButtonBox[
    RowBox[{
    "\[OpenCurlyDoubleQuote]", "Introduction", "\[CloseCurlyDoubleQuote]"}],
    BaseStyle->"Hyperlink",
    ButtonData->"IntroductionCh5"], TraditionalForm]]],
 " on page 181",
 StyleBox["). Here are some typical text-processing problems that yield to \
the application of ",
  FontTracking->"Plain"],
 StyleBox["StringReplace[]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" and pattern matching.",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{{3.470494282239169*^9, 3.470494329780343*^9}, 
   3.470516711888763*^9, {3.4706653517570543`*^9, 3.470665351849881*^9}, {
   3.475588479338489*^9, 3.47558848429786*^9}}],

Cell["Stripping comments", "Heading3",
 CellChangeTimes->{{3.475588490918396*^9, 3.475588491293693*^9}}],

Cell["String expression version:", "Text",
 CellChangeTimes->{{3.470494976364316*^9, 3.470494979519054*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{
  "\"\<1 + 2 * 3.14 (*precise enough for our purpose*) / 42 (*secret of the \
universe*)\>\"", ",", 
   RowBox[{
    RowBox[{"\"\<(*\>\"", "~~", 
     RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", "\"\<*)\>\""}], 
    "\[Rule]", "\"\<\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{3.470495128447288*^9},
 CellLabel->"In[52]:="],

Cell[BoxData["\<\"1 + 2 * 3.14  / 42 \"\>"], "Output",
 CellChangeTimes->{3.4657716162318*^9, 3.4658598450636*^9, 
  3.468597743233676*^9, 3.468597866130333*^9, 3.470067179542129*^9},
 CellLabel->"Out[52]="]
}, Open  ]],

Cell["Regular expression version:", "Text",
 CellChangeTimes->{{3.470495143705532*^9, 3.470495149718173*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{
  "\"\<1 + 2 * 3.14 (*precise enough for our purpose*) / 42 (*secret of the \
universe*)\>\"", ",", 
   RowBox[{
    RowBox[{
    "RegularExpression", "[", "\"\<\\\\(\\\\*.*?\\\\*\\\\)\>\"", "]"}], 
    "\[Rule]", "\"\<\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{3.4704951253556643`*^9},
 CellLabel->"In[53]:="],

Cell[BoxData["\<\"1 + 2 * 3.14  / 42 \"\>"], "Output",
 CellChangeTimes->{3.4657716163722*^9, 3.4658598450856*^9, 
  3.4685977432794533`*^9, 3.4685978663634367`*^9, 3.4700671795754623`*^9},
 CellLabel->"Out[53]="]
}, Open  ]],

Cell["Changing delimiters", "Heading3",
 CellChangeTimes->{{3.475588495589332*^9, 3.4755884958617067`*^9}}],

Cell[TextData[{
 "Delimited text (e.g., comma-delimited text) sounds simple at first, but \
many delimited formats allow a way to handle the delimiters as regular text \
by some quoting mechanism, as well as a way to escape quotes themselves. \
Furthermore, you must handle empty fields. If you want to replace a \
comma-delimited format with, say, a semicolon-delimited format, you must \
craft expressions that deal with all cases. Here, ",
 StyleBox["\"\"", "Literal"],
 " is used to escape a double quote. This example does not handle empty \
fields, but see Friedl\[CloseCurlyQuote]s ",
 StyleBox["Mastering Regular Expressions", "Emphasis"],
 " for guidance. "
}], "Text",
 CellChangeTimes->{{3.4657771131066*^9, 3.4657771298176003`*^9}, {
   3.4658561695786*^9, 3.4658562135696*^9}, {3.4658562831456003`*^9, 
   3.4658563013906*^9}, {3.4658564474586*^9, 3.4658564917646*^9}, {
   3.470496335564827*^9, 3.470496373802734*^9}, {3.470497417867983*^9, 
   3.470497447153512*^9}, {3.470497999615839*^9, 3.470498059381773*^9}, 
   3.470498250185319*^9, 3.47049828121986*^9, 3.470516717920918*^9, {
   3.4705768046623363`*^9, 3.470576843134336*^9}, {3.470577040710157*^9, 
   3.470577066431698*^9}, {3.47058142772598*^9, 3.470581434130034*^9}, {
   3.470581491337381*^9, 3.470581496898799*^9}, 3.47558850297416*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "delimitedText", " ", "=", " ", 
   "\"\<Ten Thousand,10000, 2710 ,\\\"10,000\\\",\\\"It's \\\"\\\"10 \
Grand\\\"\\\",baby\\\",10k\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"StringJoin", "[", 
  RowBox[{"Riffle", "[", 
   RowBox[{
    RowBox[{"StringCases", "[", 
     RowBox[{"delimitedText", ",", 
      RowBox[{
       RowBox[{
       "RegularExpression", "[", 
        "\"\<([^\\\",]+|\\\"(?:[^\\\"]|\\\"\\\")*\\\")\>\"", "]"}], 
       "\[RuleDelayed]", " ", 
       RowBox[{"StringReplace", "[", 
        RowBox[{"\"\<$1\>\"", ",", 
         RowBox[{
         "\"\<\\\"\\\"\>\"", "\[RuleDelayed]", " ", "\"\<\\\"\>\""}]}], 
        "]"}]}]}], "]"}], ",", "\"\<;\>\""}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.4657729842084*^9, 3.4657730457036*^9}, {
   3.4657731017232*^9, 3.4657731547788*^9}, {3.4657732366632*^9, 
   3.4657732493148003`*^9}, {3.4657733697312*^9, 3.4657733987784*^9}, {
   3.4657734340032*^9, 3.4657734958728*^9}, {3.4657738246584*^9, 
   3.4657738285428*^9}, {3.4657739390064*^9, 3.4657739724528*^9}, {
   3.4657740294708*^9, 3.4657741106844*^9}, {3.4657771385436*^9, 
   3.4657771732256002`*^9}, {3.4657772036275997`*^9, 
   3.4657772670016003`*^9}, {3.4657773555316*^9, 3.4657773748426*^9}, {
   3.4657774061516*^9, 3.4657774592195997`*^9}, 3.4657774926745996`*^9, {
   3.4657775328476*^9, 3.4657775892406*^9}, {3.4657776425646*^9, 
   3.4657777576156*^9}, {3.4658561012335997`*^9, 3.4658561446256*^9}, {
   3.4658562532826*^9, 3.4658562651745996`*^9}, {3.47006659486623*^9, 
   3.470066596286399*^9}, {3.470066632865316*^9, 3.4700666358733263`*^9}},
 CellLabel->"In[54]:="],

Cell[BoxData["\<\"Ten Thousand;10000; 2710 ;\\\"10,000\\\";\\\"It's \\\"10 \
Grand\\\",baby\\\";10k\"\>"], "Output",
 CellChangeTimes->{
  3.4657716165126*^9, 3.4657734987432003`*^9, 3.4657738292292*^9, {
   3.4657739571336*^9, 3.465773973498*^9}, 3.465774031764*^9, 
   3.4657740888132*^9, {3.4657774649546003`*^9, 3.4657774944936*^9}, {
   3.4657775445446*^9, 3.4657775617426*^9}, 3.4657775926076*^9, {
   3.4657776619266*^9, 3.4657777591656*^9}, 3.4658561462626*^9, {
   3.4658562548185997`*^9, 3.4658562664356003`*^9}, 3.4658598452226*^9, 
   3.468597743387553*^9, 3.4685978664096317`*^9, {3.47006661239458*^9, 
   3.470066639224283*^9}, 3.4700671796128073`*^9},
 CellLabel->"Out[55]="]
}, Open  ]],

Cell[CellGroupData[{

Cell["Removing XML markup", "Heading3",
 CellChangeTimes->{{3.475588616493402*^9, 3.475588616818581*^9}}],

Cell[TextData[{
 "Simple XML manipulations, such as discarding markup, can be accomplished \
with ",
 StyleBox["StringReplace[]", "Literal"],
 "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NotebookDirectory", "[", "]"}]], "Input",
 CellLabel->"In[56]:="],

Cell[BoxData["\<\"/Users/smangano/Documents/workspace/Mathematica \
Cookbook/mathematica/\"\>"], "Output",
 CellChangeTimes->{3.4658572869196*^9, 3.4658598452446003`*^9, 
  3.468597743433213*^9, 3.468597866448748*^9, 3.470067179663014*^9},
 CellLabel->"Out[56]="]
}, Open  ]],

Cell[BoxData[
 RowBox[{"xml", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<..\>\"", ",", 
       "\"\<data\>\"", ",", "\"\<ch02\>\"", ",", "\"\<data1.xml\>\""}], "}"}],
      "]"}], ",", "\"\<Text\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4658571498606*^9, 3.4658572744306*^9}, {
  3.4658573100875998`*^9, 3.4658573142796*^9}},
 CellLabel->"In[57]:="],

Cell[BoxData["\<\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!-- \
Some data to use as a test for Mathematica's XML import -->\\n<?test Just for \
didactic purposes?>\\n<data>\\n\\t<item>\\n\\t\\t<name>Leonardo</name>\\n\\t\\\
t<sex>male</sex>\\n\\t\\t<age>8</age>\\n\\t\\t<height>4.7</height>\\n\\t</\
item>\\n\\t<item>\\n\\t\\t<name>Salvatore</name>\\n\\t\\t<sex>male</sex>\\n\\\
t\\t<age>5</age>\\n\\t\\t<height>4.1</height>\\n\\t</item>\\n\\t<item>\\n\\t\\\
t<name>Alexis</name>\\n\\t\\t<sex>female</sex>\\n\\t\\t<age>6</age>\\n\\t\\t<\
height>4.4</height>\\n\\t</item>\\n</data>\\n<!-- Comment at end -->\"\>"], \
"Output",
 CellChangeTimes->{{3.4658572378626003`*^9, 3.4658572758386*^9}, 
   3.4658573152206*^9, 3.4658598452846003`*^9, 3.4685977435251217`*^9, 
   3.468597866518016*^9, 3.4700671798071547`*^9},
 CellLabel->"Out[57]="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{"xml", ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Shortest", "[", 
        RowBox[{"\"\<<\>\"", " ", "~~", " ", 
         RowBox[{
          RowBox[{"Except", "[", "\"\<>\>\"", "]"}], ".."}], "~~", " ", 
         "\"\<>\>\""}], "]"}], " ", ".."}], "\[Rule]", " ", "\"\<\>\""}], ",",
      " ", 
     RowBox[{"Whitespace", " ", "\[Rule]", " ", "\"\< \>\""}]}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[58]:="],

Cell[BoxData["\<\"     Leonardo male 8 4.7   Salvatore male 5 4.1   Alexis \
female 6 4.4   \"\>"], "Output",
 CellChangeTimes->{3.4657716174174*^9, 3.4658573254306*^9, 3.4658598453076*^9,
   3.468597743567637*^9, 3.46859786655103*^9, 3.470067179837894*^9},
 CellLabel->"Out[58]="]
}, Open  ]]
}, Open  ]],

Cell["Replacing with expression evaluation", "Heading3",
 CellChangeTimes->{{3.475588627683464*^9, 3.4755886303389807`*^9}}],

Cell[TextData[{
 StyleBox["By capturing matched ",
  FontTracking->"SemiCondensed"],
 StyleBox["substrings ",
  FontTracking->"Plain"],
 StyleBox["i",
  FontTracking->"SemiCondensed"],
 StyleBox["n variables, you can perform expression evaluation us",
  FontTracking->"Plain"],
 "ing ",
 StyleBox["ToExpression[]", "Literal"],
 " as you replace."
}], "Text",
 CellChangeTimes->{3.4657711776022*^9, 3.4657713934630003`*^9, 
  3.470498487275125*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "expr", " ", "=", " ", 
   "\"\<Is 1 + 1 in every possible universe? What about Pi / 2?\>\""}], " ", 
  ";"}]], "Input",
 CellLabel->"In[59]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{"expr", ",", 
   RowBox[{
    RowBox[{"x", ":", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"NumberString", " ", ",", " ", "\"\<Pi\>\""}], "}"}], " ", "~~",
        " ", 
       RowBox[{"Whitespace", "..."}], " ", "~~", " ", 
       RowBox[{"{", 
        RowBox[{
        "\"\<*\>\"", ",", "\"\<+\>\"", ",", "\"\<-\>\"", ",", "\"\</\>\""}], 
        "}"}], " ", "~~", " ", 
       RowBox[{"Whitespace", "..."}], "  ", "~~", " ", 
       RowBox[{"{", 
        RowBox[{"NumberString", " ", ",", "\"\<Pi\>\""}], "}"}]}], ")"}]}], 
    "\[RuleDelayed]", " ", 
    RowBox[{"x", " ", "<>", " ", "\"\< = \>\"", " ", "<>", " ", 
     RowBox[{"ToString", "[", 
      RowBox[{"N", "[", 
       RowBox[{"ToExpression", "[", "x", "]"}], "]"}], "]"}]}]}]}], 
  "]"}]], "Input",
 PageWidth->PaperWidth,
 CellLabel->"In[60]:="],

Cell[BoxData["\<\"Is 1 + 1 = 2. in every possible universe? What about Pi / 2 \
= 1.5708?\"\>"], "Output",
 CellChangeTimes->{3.4657716176358*^9, 3.4658598453356*^9, 
  3.468597743646729*^9, 3.4685978666845827`*^9, 3.470067180098874*^9},
 CellLabel->"Out[60]="]
}, Open  ]],

Cell["Here is another example using dates.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "invoice", " ", "=", " ", 
   "\"\<05/17/2008\\nMathematica Programming: $1000.00\\nInvoice is Net \
30\>\""}], ";"}], "\n", 
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"datefmt", " ", "=", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Month\>\"", ",", "\"\</\>\"", ",", "\"\<Day\>\"", ",", 
        "\"\</\>\"", ",", "\"\<Year\>\""}], "}"}]}], ",", "date"}], "}"}], 
   ",", " ", 
   RowBox[{
    RowBox[{"date", " ", "=", " ", 
     RowBox[{"StringCases", "[", 
      RowBox[{"invoice", ",", 
       RowBox[{"DatePattern", "[", "datefmt", "]"}]}], "]"}]}], ";", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"invoice", ",", "  ", 
      RowBox[{
       RowBox[{"\"\<Net \>\"", " ", "~~", " ", 
        RowBox[{"n", ":", "NumberString"}]}], " ", "\[RuleDelayed]", " ", 
       RowBox[{"\"\<due \>\"", " ", "<>", " ", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"DatePlus", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"date", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
            RowBox[{"ToExpression", "[", "n", "]"}]}], "]"}], ",", 
          "datefmt"}], "]"}]}]}]}], "]"}]}]}], "]"}]}], "Input",
 PageWidth->PaperWidth,
 CellLabel->"In[61]:="],

Cell[BoxData["\<\"05/17/2008\\nMathematica Programming: $1000.00\\nInvoice is \
due 06/16/2008\"\>"], "Output",
 CellChangeTimes->{3.4657716185562*^9, 3.4658598453606*^9, 
  3.4685977437018213`*^9, 3.468597866731617*^9, 3.4700671806734047`*^9},
 CellLabel->"Out[62]="]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2"],

Cell[TextData[{
 "See ",
 ButtonBox["Recipe 2.4",
  BaseStyle->"Hyperlink",
  ButtonData->{
   "FunctionalProgramming.nb", "Mapping Multiple Functions in a Single Pass"}],
 " for use of ",
 StyleBox["StringPosition[]", "Literal"],
 ",",
 " which returns sequence specification that can be fed into ",
 StyleBox["StringReplacePart[]", "Literal"],
 " and ",
 StyleBox["StringDrop[]", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.470498585348029*^9, 3.4704985853590527`*^9}, 
   3.470498697573617*^9}],

Cell[TextData[{
 "See Recipes ",
 ButtonBox["2.8",
  BaseStyle->"Hyperlink",
  ButtonData->{"FunctionalProgramming.nb", "Defining Indexed Functions"}],
 " and ",
 ButtonBox["2.9",
  BaseStyle->"Hyperlink",
  ButtonData->{"FunctionalProgramming.nb", "Understanding the Use of Fold"}],
 " for more sophisticated forms of XML processing. "
}], "Text",
 CellChangeTimes->{{3.4704986472553177`*^9, 3.4704986634897823`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Extracting Characters and Substrings"
}], "Heading1",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
 CellTags->"Extracting Characters and Substrings"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],

Cell["\<\
You want to extract a substring by position or content from a string.\
\>", "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.4657712042314*^9, 3.4657714000306*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2", "TopOfPage",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
 CellTags->"Solution5.3"],

Cell[CellGroupData[{

Cell["Using patterns", "Heading3WithHeadAbove",
 CellChangeTimes->{{3.475588640547443*^9, 3.4755886408602657`*^9}}],

Cell[TextData[{
 StyleBox["StringCases[]", "Literal"],
 " provides the pattern-driven means of extracting substrings. There are two \
major variations. In the first, you simply extract what the patterns \
literally",
 " ",
 "match. The second variation uses rules to transform the ",
 StyleBox["matched ",
  FontTracking->"SemiCondensed"],
 StyleBox["substrings into",
  FontTracking->"Plain"],
 " other strings and return those instead."
}], "Text",
 CellChangeTimes->{{3.465771207835*^9, 3.4657712099254*^9}, {
   3.4657714013254004`*^9, 3.4657714022146*^9}, 3.4704987257044277`*^9, {
   3.470499025840275*^9, 3.470499063699854*^9}, {3.470576958299303*^9, 
   3.470576974766148*^9}, {3.4716248450683603`*^9, 3.471624856434445*^9}, 
   3.471624898420377*^9, 3.485522432392844*^9}],

Cell[TextData[{
 "You can extract specific words using regular expressions (here ",
 StyleBox["\\\\b", "Literal"],
 " matches word boundaries)."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringCases", "[", 
  RowBox[{
  "\"\<The pig thought he was a dog and then chased the cat.\>\"", ",", " ", 
   RowBox[{"RegularExpression", "[", "\"\<\\\\b(a|the)\\\\b\>\"", "]"}], ",", 
   " ", 
   RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellLabel->"In[63]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"The\"\>", ",", "\<\"a\"\>", ",", "\<\"the\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4657716206154003`*^9, 3.4658598453836*^9, 
  3.468597743746612*^9, 3.468597866765174*^9, 3.470067180711775*^9},
 CellLabel->"Out[63]="]
}, Open  ]],

Cell["The same can be done using string expressions.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringCases", "[", 
  RowBox[{
  "\"\<The pig thought he was a dog and then chased the cat.\>\"", ",", "  ", 
   
   RowBox[{"WordBoundary", " ", "~~", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", " ", "\"\<the\>\""}], "}"}], " ", "~~", " ", 
    "WordBoundary"}], ",", " ", 
   RowBox[{"IgnoreCase", " ", "->", " ", "True"}]}], "]"}]], "Input",
 CellLabel->"In[64]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"The\"\>", ",", "\<\"a\"\>", ",", "\<\"the\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4657716212706003`*^9, 3.4658598454056*^9, 
  3.468597743801737*^9, 3.4685978668013163`*^9, 3.470067180762393*^9},
 CellLabel->"Out[64]="]
}, Open  ]],

Cell[TextData[{
 "The most common reason for using rules instead of patterns is to match a \
substring within a specific context but return the substring alone. Here we \
want to return substrings bracketed by one or more occurrences of the letter ",
 StyleBox["a", "Emphasis"],
 ". This example also illustrates that regular expressions and string \
expressions can be mixed. "
}], "Text",
 CellChangeTimes->{
  3.4657712141218*^9, 3.4657714032130003`*^9, {3.470499179724462*^9, 
   3.47049917992879*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringCases", "[", 
   RowBox[{"\"\<abacbcdbdaeaaazzza\>\"", ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"RegularExpression", "[", "\"\<(?<=a)\>\"", "]"}], "~~", 
      "\[IndentingNewLine]", 
      RowBox[{"x", ":", 
       RowBox[{"Repeated", "[", 
        RowBox[{"Except", "[", "\"\<a\>\"", "]"}], "]"}]}], "~~", 
      "\[IndentingNewLine]", 
      RowBox[{"RegularExpression", "[", "\"\<(?=a)\>\"", "]"}]}], " ", 
     "\[Rule]", " ", "x"}]}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Return", " ", "the", " ", "characters", " ", "surrounded", " ", "by", " ", 
    RowBox[{"\"\<a\>\"", "."}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.470499611672611*^9, 3.470499616008856*^9}, {
  3.471625044921363*^9, 3.471625047671554*^9}},
 CellLabel->"In[65]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"b\"\>", ",", "\<\"cbcdbd\"\>", ",", "\<\"e\"\>", 
   ",", "\<\"zzz\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.465771621645*^9, 3.4658598454276*^9, 
  3.4685977438631277`*^9, 3.4685978668488293`*^9, 3.4700671808092327`*^9},
 CellLabel->"Out[65]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using positions", "Heading3",
 CellChangeTimes->{{3.4766158152091713`*^9, 3.47661581553828*^9}}],

Cell[TextData[{
 "Sometimes you know exactly where the characters are that you want to \
remove. In that ",
 StyleBox["case, ",
  FontTracking->"Plain"],
 StyleBox["StringTake[]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" is a lot more efficient. ",
  FontTracking->"Plain"],
 StyleBox["StringTake[]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" takes the string and a second argu",
  FontTracking->"Plain"],
 "ment, which can be an offset from the front, an offset from the end, \
specific positions, or a range of positions."
}], "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.470499643423895*^9, 3.470499650153096*^9}, {
  3.4704997509584846`*^9, 3.470499753545138*^9}}],

Cell["Consider:", "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"myString", " ", "=", " ", "\"\<abcdefghijklmnop\>\""}], " ", 
  ";"}]], "Input",
 CellLabel->"In[66]:="],

Cell["Here you take the first three characters. ", "Text", "ProductionPageBreak"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringTake", "[", 
  RowBox[{"myString", ",", " ", "3"}], "]"}]], "Input",
 CellLabel->"In[67]:="],

Cell[BoxData["\<\"abc\"\>"], "Output",
 CellChangeTimes->{3.4657716222066*^9, 3.4658598454556*^9, 
  3.468597743997229*^9, 3.468597866915873*^9, 3.470067180891415*^9},
 CellLabel->"Out[67]="]
}, Open  ]],

Cell["Alternatively, you take the last three characters, like so.", "Text",
 CellChangeTimes->{{3.470499771741081*^9, 3.470499777689389*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringTake", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",
 CellLabel->"In[68]:="],

Cell[BoxData["\<\"nop\"\>"], "Output",
 CellChangeTimes->{3.4657716224561996`*^9, 3.4658598454806004`*^9, 
  3.468597744029078*^9, 3.4685978669528*^9, 3.470067181094557*^9},
 CellLabel->"Out[68]="]
}, Open  ]],

Cell["Take only the third character, like this.", "Text",
 CellChangeTimes->{3.4704997877100353`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringTake", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellLabel->"In[69]:="],

Cell[BoxData["\<\"c\"\>"], "Output",
 CellChangeTimes->{3.4657716230802*^9, 3.4658598455036*^9, 
  3.468597744084292*^9, 3.468597866986457*^9, 3.4700671811244392`*^9},
 CellLabel->"Out[69]="]
}, Open  ]],

Cell[TextData[{
 "And take the third through fifth (",
 StyleBox["\"cde\"", "Literal"],
 ") using a range list."
}], "Text",
 CellChangeTimes->{{3.4704997970060596`*^9, 3.470499797691*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringTake", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[70]:="],

Cell[BoxData["\<\"cde\"\>"], "Output",
 CellChangeTimes->{3.4657716233922*^9, 3.4658598455266*^9, 
  3.468597744118092*^9, 3.4685978670323563`*^9, 3.470067181161304*^9},
 CellLabel->"Out[70]="],

Cell[TextData[{
 "The step size in the range can even be greater than one by specifying it as \
the third",
 " ",
 StyleBox["element. Here you specify a step size of two to take every other \
character. The ",
  FontTracking->"SemiCondensed"],
 StyleBox["-1", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[" upper",
  FontTracking->"SemiCondensed"],
 " ",
 StyleBox["limit is a convenient way to specify the end of the string without \
having to know its length.",
  FontTracking->"SemiCondensed"]
}], "Text",
 CellChangeTimes->{{3.470517973106913*^9, 3.470517974561112*^9}, 
   3.485522433137142*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringTake", "[", 
  RowBox[{"myString", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[71]:="],

Cell[BoxData["\<\"acegikmo\"\>"], "Output",
 CellChangeTimes->{3.4657716235481997`*^9, 3.4658598455526*^9, 
  3.468597744170555*^9, 3.468597867069689*^9, 3.4700671811905746`*^9},
 CellLabel->"Out[71]="]
}, Open  ]]
}, Open  ]],

Cell["Conveniently, you can also act on several strings at once.", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"otherString", " ", "=", " ", "\"\<1234567890\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[72]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringTake", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"myString", ",", " ", "otherString"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[73]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"cde\"\>", ",", "\<\"345\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.4657716239382*^9, 3.4658598455846*^9, 
  3.468597744246567*^9, 3.468597867131978*^9, 3.470067181239333*^9},
 CellLabel->"Out[73]="]
}, Open  ]],

Cell[TextData[{
 "If you have rea",
 StyleBox["d ",
  FontColor->GrayLevel[0]],
 ButtonBox["Recipe 5.2",
  BaseStyle->"Hyperlink",
  ButtonData->"Removing and Replacing Characters from Strings"],
 ", you see that ",
 StyleBox["StringTake", "Literal"],
 " has very similar parameter variations as ",
 StyleBox["StringDrop[]", "Literal"],
 ". However, ",
 StyleBox["StringTake", "Literal"],
 " has an additional feature: it can take a list of position specifications \
and produce a list of the resulting extracts. "
}], "Text",
 CellChangeTimes->{{3.470499922989903*^9, 3.470499938808908*^9}, {
  3.470500190703664*^9, 3.470500227676491*^9}, {3.471625093870187*^9, 
  3.471625094772482*^9}, {3.4755886643762703`*^9, 3.47558866844588*^9}, {
  3.4755887119281483`*^9, 3.475588711971568*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringTake", "[", 
  RowBox[{"myString", ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", " ", 
     RowBox[{"{", "3", "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"8", ",", "10"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[74]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"hij\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4657716244062*^9, 3.4658598456066*^9, 
  3.468597744302826*^9, 3.4685978671676893`*^9, 3.47006718127877*^9},
 CellLabel->"Out[74]="]
}, Open  ]],

Cell[TextData[{
 "This is useful for picking multiple segments from a string in one step. \
However, if you want a string rather than a list, simply wrap the expression \
in a ",
 StyleBox["StringJoin[]", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{3.470500272079278*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"StringTake", "[", 
   RowBox[{"myString", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", " ", 
      RowBox[{"{", "3", "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"8", ",", " ", "10"}], "}"}]}], "}"}]}], "]"}], "]"}]], "Input",\

 CellLabel->"In[75]:="],

Cell[BoxData["\<\"achij\"\>"], "Output",
 CellChangeTimes->{3.4657716248898*^9, 3.4658598456296*^9, 
  3.46859774434755*^9, 3.4685978672825203`*^9, 3.470067181308358*^9},
 CellLabel->"Out[75]="]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2", "TopOfPage",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],

Cell[TextData[{
 "In ",
 ButtonBox["the \[OpenCurlyDoubleQuote]Solution\[CloseCurlyDoubleQuote] \
section on page 193",
  BaseStyle->"Hyperlink",
  ButtonData->"Solution5.3"],
 " we used ",
 StyleBox["RegularExpression[\"(?<=a)\"]", "Literal"],
 " (look-",
 StyleBox["behind) and ",
  FontTracking->"Extended"],
 StyleBox["RegularExpression[\"(?=a)\"]", "Literal",
  FontTracking->"Extended"],
 StyleBox[" (look-ahead) because there is no string-expres",
  FontTracking->"Plain"],
 StyleBox["sion",
  FontTracking->"SemiCondensed"],
 " equivalent. However, there is an option for ",
 StyleBox["StringCases[]", "Literal"],
 " called ",
 StyleBox["Overlaps", "Literal"],
 ", which when set to ",
 StyleBox["True", "Literal"],
 ", causes the ",
 StyleBox["matcher to continue",
  FontTracking->"Plain"],
 StyleBox[" at the character that fol",
  FontTracking->"Extended"],
 "lows the first character of the last matched substring. In the following \
example, this allows a single ",
 StyleBox["a", "Emphasis"],
 " to act as both a start of pattern and end of pattern. "
}], "Text",
 CellChangeTimes->{{3.4657712629358*^9, 3.4657712670698*^9}, {
   3.4705003523403397`*^9, 3.4705003602230186`*^9}, {3.470500419416472*^9, 
   3.470500433411113*^9}, {3.470500503812316*^9, 3.470500623948572*^9}, 
   3.470578051838367*^9, {3.471625120346799*^9, 3.4716251208706284`*^9}, {
   3.47162535261835*^9, 3.471625365591372*^9}, {3.475588735677759*^9, 
   3.4755887384012003`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringCases", "[", 
   RowBox[{"\"\<abacbcdbdaeaaazzza\>\"", ",", " ", 
    RowBox[{"\"\<a\>\"", "~~", " ", 
     RowBox[{"x", " ", ":", " ", 
      RowBox[{"Repeated", "[", 
       RowBox[{"Except", "[", "\"\<a\>\"", "]"}], "]"}]}], " ", "~~", " ", 
     RowBox[{"\"\<a\>\"", " ", "\[RightArrow]", " ", "x"}]}], ",", " ", 
    RowBox[{"Overlaps", " ", "\[Rule]", "True"}]}], "]"}], " "}]], "Input",
 CellLabel->"In[76]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"b\"\>", ",", "\<\"cbcdbd\"\>", ",", "\<\"e\"\>", 
   ",", "\<\"zzz\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.4657716260598*^9, 3.4658598456516*^9, 
  3.468597744447654*^9, 3.468597867465775*^9, 3.470067181389625*^9},
 CellLabel->"Out[76]="]
}, Open  ]],

Cell[TextData[{
 "Without ",
 StyleBox["Overlaps", "Literal"],
 "\[RightArrow]",
 StyleBox["True", "Literal"],
 ", you would not get the ",
 StyleBox["\"cbcbd\"", "Literal"],
 " substring."
}], "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.4705006422372637`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringCases", "[", 
   RowBox[{"\"\<abacbcdbdaeaaazzza\>\"", ",", " ", 
    RowBox[{"\"\<a\>\"", "~~", " ", 
     RowBox[{"x", " ", ":", " ", 
      RowBox[{"Repeated", "[", 
       RowBox[{"Except", "[", "\"\<a\>\"", "]"}], "]"}]}], " ", "~~", " ", 
     RowBox[{"\"\<a\>\"", " ", "\[RightArrow]", " ", "x"}]}]}], "]"}], 
  " "}]], "Input",
 CellLabel->"In[77]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"b\"\>", ",", "\<\"e\"\>", ",", "\<\"zzz\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4657716265434*^9, 3.4658598456736*^9, 
  3.4685977444811373`*^9, 3.468597867516314*^9, 3.470067181425311*^9},
 CellLabel->"Out[77]="]
}, Open  ]],

Cell[TextData[{
 "There is a third setting, ",
 StyleBox["Overlaps", "Literal"],
 "\[RightArrow]",
 StyleBox["All", "Literal"],
 ", which causes the matcher to repeat searches from the same position until \
no new matches are found. To see the effect of ",
 StyleBox["All", "Literal"],
 ", we need to consider a different example, one in which the bracketing \
character is not excluded from the match. A parenthesized expression is a \
good example. "
}], "Text",
 CellChangeTimes->{{3.470500668554969*^9, 3.470500728298633*^9}, {
  3.4766159032341843`*^9, 3.476615904907288*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringCases", "[", 
   RowBox[{"\"\<((a-b) (c + d) (e / (f + g)))\>\"", ",", " ", 
    RowBox[{"Shortest", "[", 
     RowBox[{"\"\<(\>\"", "~~", " ", "__", " ", "~~", " ", "\"\<)\>\""}], 
     "]"}], " ", ",", " ", 
    RowBox[{"Overlaps", " ", "\[Rule]", "False"}]}], "]"}], " ", "//", 
  "TableForm"}]], "Input",
 CellLabel->"In[78]:="],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"((a-b)\"\>"},
     {"\<\"(c + d)\"\>"},
     {"\<\"(e / (f + g)\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.4657716266057997`*^9, 3.4658598456956*^9, 
  3.468597744535758*^9, 3.4685978675509043`*^9, 3.470067181480118*^9},
 CellLabel->"Out[78]//TableForm="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringCases", "[", 
   RowBox[{"\"\<((a-b) (c + d) (e / (f + g)))\>\"", ",", " ", 
    RowBox[{"Shortest", "[", 
     RowBox[{"\"\<(\>\"", " ", "~~", " ", "__", " ", "~~", " ", "\"\<)\>\""}],
      "]"}], " ", ",", " ", 
    RowBox[{"Overlaps", " ", "\[RightArrow]", " ", "True"}]}], "]"}], " ", "//",
   "TableForm"}]], "Input",
 CellLabel->"In[79]:="],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"((a-b)\"\>"},
     {"\<\"(a-b)\"\>"},
     {"\<\"(c + d)\"\>"},
     {"\<\"(e / (f + g)\"\>"},
     {"\<\"(f + g)\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.4657716266526003`*^9, 3.4658598457195997`*^9, 
  3.4685977445813847`*^9, 3.468597867586791*^9, 3.470067181512124*^9},
 CellLabel->"Out[79]//TableForm="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringCases", "[", 
   RowBox[{"\"\<((a-b) (c + d) (e / (f + g)))\>\"", ",", " ", 
    RowBox[{"Shortest", "[", 
     RowBox[{"\"\<(\>\"", " ", "~~", " ", "__", " ", "~~", " ", "\"\<)\>\""}],
      "]"}], " ", ",", " ", 
    RowBox[{"Overlaps", " ", "\[RightArrow]", " ", "All"}]}], "]"}], " ", "//",
   "TableForm"}]], "Input",
 CellLabel->"In[80]:="],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {"\<\"((a-b)\"\>"},
     {"\<\"((a-b) (c + d)\"\>"},
     {"\<\"((a-b) (c + d) (e / (f + g)\"\>"},
     {"\<\"((a-b) (c + d) (e / (f + g))\"\>"},
     {"\<\"((a-b) (c + d) (e / (f + g)))\"\>"},
     {"\<\"(a-b)\"\>"},
     {"\<\"(a-b) (c + d)\"\>"},
     {"\<\"(a-b) (c + d) (e / (f + g)\"\>"},
     {"\<\"(a-b) (c + d) (e / (f + g))\"\>"},
     {"\<\"(a-b) (c + d) (e / (f + g)))\"\>"},
     {"\<\"(c + d)\"\>"},
     {"\<\"(c + d) (e / (f + g)\"\>"},
     {"\<\"(c + d) (e / (f + g))\"\>"},
     {"\<\"(c + d) (e / (f + g)))\"\>"},
     {"\<\"(e / (f + g)\"\>"},
     {"\<\"(e / (f + g))\"\>"},
     {"\<\"(e / (f + g)))\"\>"},
     {"\<\"(f + g)\"\>"},
     {"\<\"(f + g))\"\>"},
     {"\<\"(f + g)))\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output", "ProductionPageBreak",
 CellChangeTimes->{3.465771626715*^9, 3.4658598457436*^9, 
  3.468597744668046*^9, 3.468597867633099*^9, 3.470067181559971*^9},
 CellLabel->"Out[80]//TableForm="]
}, Open  ]]
}, Open  ]],

Cell["See Also", "Heading2",
 CellMargins->{{0, 36}, {0, 5}},
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],

Cell[TextData[{
 "If you have a list of strings and want to extract those that match a \
pattern, you want ",
 StyleBox["Select", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[", using ",
  FontTracking->"SemiCondensed"],
 StyleBox["StringMatchQ", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[" with a string pattern as the test, rather than ",
  FontTracking->"SemiCondensed"],
 StyleBox["StringCases", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[".",
  FontTracking->"SemiCondensed"],
 " See ",
 ButtonBox["Recipe 4.1",
  BaseStyle->"Hyperlink",
  ButtonData->{"Patterns.nb", "FindingItemsThatMatchAPattern"}],
 "."
}], "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
 CellChangeTimes->{
  3.470500749503541*^9, 3.470500881372624*^9, {3.470500980399769*^9, 
   3.470501002658402*^9}}]
}, Open  ]],

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Duplicating a String "
}], "Heading1",
 CellMargins->{{0, 72}, {2, 12}},
 CellTags->"Duplicating a String"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["\<\
You need to synthesize a string from a fixed number of copies of a seed \
string.\
\>", "Text"]
}, Open  ]],

Cell["Solution", "Heading2",
 CellMargins->{{0, 36}, {0, 11}}],

Cell[TextData[{
 "Use ",
 StyleBox["String", "Literal"],
 StyleBox["Join[]", "Literal"],
 " on the output of ",
 StyleBox["Table[]", "Literal"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"stringDup", "[", 
   RowBox[{"seed_", ",", 
    RowBox[{"n_:", "2"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"StringJoin", "@", 
   RowBox[{"Array", "[", 
    RowBox[{
     RowBox[{"seed", "&"}], ",", "n"}], "]"}]}]}]], "Input",
 CellLabel->"In[81]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"stringDup", "[", 
   RowBox[{"\"\<-\>\"", ",", "10"}], "]"}], "//", "InputForm"}]], "Input",
 CellLabel->"In[82]:="],

Cell["\"----------\"", "Output",
 CellChangeTimes->{3.465771626793*^9, 3.4658598457726*^9, 
  3.468597744847517*^9, 3.468597867699174*^9, 3.470067181625957*^9},
 CellLabel->"Out[82]//InputForm="]
}, Open  ]],

Cell[BoxData[
 RowBox[{"stringDup", "[", "\"\<wiki \>\"", "]"}]], "Input",
 CellMargins->{{53, 0}, {0, 1}},
 CellLabel->"In[83]:="],

Cell[BoxData["\<\"wiki wiki \"\>"], "Output",
 CellChangeTimes->{3.4657716268398*^9, 3.4658598457936*^9, 
  3.468597744904765*^9, 3.468597867769813*^9, 3.4700671817283688`*^9},
 CellLabel->"Out[83]="],

Cell["Discussion", "Heading2", "ProductionPageBreak"],

Cell[TextData[{
 StyleBox["This is a simple recipe, and I include it because it\
\[CloseCurlyQuote]s something you expect to be bundled as a native function, \
but it\[CloseCurlyQuote]s not. For most practical applications, the solution \
is fine, but for very large ",
  FontTracking->"Plain"],
 StyleBox["n", "Literal",
  FontTracking->"Plain"],
 StyleBox[", a doubling approach will have better performance. Rather than \
doing the math to get the exact string size, we simply truncate the closest \
sized string obtained from pure doubling of the seed.",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{{3.470501264567202*^9, 3.4705012754609327`*^9}, {
  3.470501488665316*^9, 3.470501499066778*^9}, {3.4705015299246473`*^9, 
  3.470501651394011*^9}, {3.475588845329238*^9, 3.4755888455813713`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"stringDup2", "[", 
   RowBox[{"seed_", ",", "n_"}], "]"}], " ", ":=", " ", 
  RowBox[{"StringTake", "[", 
   RowBox[{
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "<>", "#"}], "&"}], ",", " ", "seed", ",", " ", 
      RowBox[{"Ceiling", "[", 
       RowBox[{"Log", "[", 
        RowBox[{"2", ",", "n"}], "]"}], "]"}]}], " ", "]"}], ",", "n"}], 
   "]"}]}]], "Input",
 CellLabel->"In[84]:="],

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Timing", "[", 
      RowBox[{"stringDup", "[", 
       RowBox[{"\"\<-\>\"", ",", "100000"}], "]"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->"In[85]:="],

Cell[BoxData["0.04868780000001607`"], "Output",
 CellChangeTimes->{3.4657716286493998`*^9, 3.4658598463456*^9, 
  3.468597745596513*^9, 3.468597868393708*^9, 3.470067182752101*^9},
 CellLabel->"Out[85]="],

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Timing", "[", 
      RowBox[{"stringDup2", "[", 
       RowBox[{"\"\<-\>\"", ",", "100000"}], "]"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->"In[86]:="],

Cell[BoxData["0.0031014000000141096`"], "Output",
 CellChangeTimes->{3.4657716288677998`*^9, 3.4658598464716*^9, 
  3.468597745632968*^9, 3.4685978685332527`*^9, 3.470067183128188*^9},
 CellLabel->"Out[86]="],

Cell[TextData[{
 "This solution may not be obvious, so let\[CloseCurlyQuote]s break it down. \
It should be clear that mapping the function ",
 StyleBox["#<>#&", "Literal"],
 " to a list containing a string will double that string (recall that ",
 StyleBox["<>", "Literal"],
 " is string concatenation)."
}], "Text",
 CellChangeTimes->{{3.470502114288025*^9, 3.4705021233022423`*^9}, 
   3.470516730267377*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "<>", " ", "#"}], "&"}], " ", "/@", " ", 
  RowBox[{"{", "\"\<-\>\"", "}"}]}]], "Input",
 CellLabel->"In[87]:="],

Cell[BoxData[
 RowBox[{"{", "\<\"--\"\>", "}"}]], "Output",
 CellChangeTimes->{3.465771628977*^9, 3.4658598464936*^9, 
  3.468597745666706*^9, 3.4685978685681868`*^9, 3.470067183215342*^9},
 CellLabel->"Out[87]="],

Cell["It follows that doing this twice will quadruple it.", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "<>", " ", "#"}], "&"}], "/@", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "<>", " ", "#"}], "&"}], " ", "/@", " ", 
    RowBox[{"{", "\"\<-\>\"", "}"}]}], ")"}]}]], "Input",
 CellLabel->"In[88]:="],

Cell[BoxData[
 RowBox[{"{", "\<\"----\"\>", "}"}]], "Output",
 CellChangeTimes->{3.4657716291174*^9, 3.4658598465156*^9, 
  3.468597745716435*^9, 3.4685978686540003`*^9, 3.470067183262782*^9},
 CellLabel->"Out[88]="],

Cell[TextData[{
 "R",
 StyleBox["epeating this process ",
  FontTracking->"Plain"],
 StyleBox["m", "Literal",
  FontTracking->"Plain"],
 StyleBox[" times will create a string of length ",
  FontTracking->"Plain"],
 StyleBox["2^m", "Literal",
  FontTracking->"Plain"],
 StyleBox[". However, the input is the desired length ",
  FontTracking->"Plain"],
 StyleBox["n", "Literal",
  FontTracking->"Plain"],
 StyleBox[", not the number of doublings, so we know we need at least ",
  FontTracking->"Plain"],
 StyleBox["Ceilin", "Literal",
  FontTracking->"Plain"],
 StyleBox["g[Log[2, n]]", "Literal"],
 " doublings; by using ",
 StyleBox["Nest", "Literal"],
 " with this number, we get exactly t",
 StyleBox["hat. ",
  FontTracking->"Extended"],
 StyleBox["However, this overshoots the desired length in most cases, because \
we rarely expect ",
  FontTracking->"Plain"],
 StyleBox["n", "Literal",
  FontTracking->"Plain"],
 StyleBox[" to be an exact power of 2. So we use ",
  FontTracking->"Plain"],
 StyleBox["Take", "Literal",
  FontTracking->"Plain"],
 StyleBox[" to extract the correct length. The reason ",
  FontTracking->"Plain"],
 StyleBox["this is fast for large ",
  FontTracking->"SemiCondensed"],
 StyleBox["n", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[" is that it reduces",
  FontTracking->"SemiCondensed"],
 StyleBox[" a ",
  FontTracking->"Plain"],
 StyleBox["O(n)", "Literal",
  FontTracking->"Plain"],
 StyleBox[" operation in terms of ",
  FontTracking->"Plain"],
 StyleBox["Table", "Literal",
  FontTracking->"Plain"],
 StyleBox[" to a ",
  FontTracking->"Plain"],
 StyleBox["O(log n)", "Literal",
  FontTracking->"Plain"],
 StyleBox[" operation using ",
  FontTracking->"Plain"],
 StyleBox["StringJoin", "Literal",
  FontTracking->"Plain"],
 StyleBox[".",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{{3.470502150766418*^9, 3.470502211798861*^9}, {
   3.4705022531690197`*^9, 3.4705022544684763`*^9}, {3.4705023015886*^9, 
   3.470502310916553*^9}, {3.470502342417212*^9, 3.470502344134911*^9}, 
   3.4705780619936867`*^9, {3.47058163146964*^9, 3.4705816647858543`*^9}, {
   3.4710132456421556`*^9, 3.471013247185026*^9}, 3.47558886035014*^9}],

Cell["\<\
You can bundle these versions together into one function that gives good \
performance across all sizes.\
\>", "Text",
 CellChangeTimes->{
  3.4657712854622*^9, {3.470502349660015*^9, 3.470502358457941*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "stringDup", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stringDup", "[", 
   RowBox[{"seed_String", ",", 
    RowBox[{"n_Integer", "/;", 
     RowBox[{"n", ">=", 
      RowBox[{"2", "^", "12"}]}]}]}], "]"}], " ", ":=", "  ", 
  RowBox[{"StringTake", "[", 
   RowBox[{
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "<>", "#"}], "&"}], ",", " ", "seed", ",", " ", 
      RowBox[{"Ceiling", "[", 
       RowBox[{"Log", "[", 
        RowBox[{"2", ",", "n"}], "]"}], "]"}]}], " ", "]"}], ",", "n"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stringDup", "[", 
   RowBox[{"seed_String", ",", 
    RowBox[{"n_Integer:", "2"}]}], "]"}], " ", ":=", "  ", 
  RowBox[{"StringJoin", "@", 
   RowBox[{"Array", "[", 
    RowBox[{
     RowBox[{"seed", "&"}], ",", "n"}], "]"}]}]}]}], "Input",
 CellLabel->"In[89]:="],

Cell["See Also", "Heading2",
 CellMargins->{{0, 36}, {0, 6}}],

Cell[TextData[{
 StyleBox["Nest", "Literal"],
 " is discussed in ",
 ButtonBox["Recipe 2.11",
  BaseStyle->"Hyperlink",
  ButtonData->{
   "FunctionalProgramming.nb", 
    "Computing Through Repeated Function Application"}],
 "."
}], "Text",
 CellChangeTimes->{{3.470502393146742*^9, 3.470502414100802*^9}}],

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Matching and Searching Text"
}], "Heading1",
 CellTags->"Matching and Searching Text"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["\<\
You want to determine if a string contains a pattern and at what positions.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Use ",
 StyleBox["StringMatchQ[string,pattern]", "Literal"],
 " to determine if a string matches a pattern. "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<1234\>\"", ",", " ", "NumberString"}], "]"}]], "Input",
 CellLabel->"In[92]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.465771629367*^9, 3.4658598465446*^9, 
  3.468597745782775*^9, 3.468597868785303*^9, 3.47006718332959*^9},
 CellLabel->"Out[92]="]
}, Open  ]],

Cell["\<\
Here I show a match on multiple strings with a pattern that is predicated.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<1234\>\"", ",", "\"\<1237\>\""}], "}"}], ",", " ", 
   RowBox[{
    RowBox[{"p", ":", "NumberString"}], "/;", 
    RowBox[{"OddQ", "[", 
     RowBox[{"FromDigits", "[", "p", "]"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[93]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.4657716295074*^9, 3.4658598465676003`*^9, 
  3.468597745823262*^9, 3.4685978688376293`*^9, 3.4700671833628073`*^9},
 CellLabel->"Out[93]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["Use ",
  FontTracking->"SemiCondensed"],
 StyleBox["StringFreeQ[string,pattern]", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[" to determine if a string does not match a pattern.  ",
  FontTracking->"SemiCondensed"]
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringFreeQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<1234\>\"", ",", "\"\<abcde\>\""}], "}"}], ",", " ", 
   RowBox[{"p", ":", "NumberString"}]}], "]"}]], "Input",
 CellLabel->"In[94]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.4657716296322002`*^9, 3.4658598465896*^9, 
  3.468597745866878*^9, 3.46859786889008*^9, 3.470067183412105*^9},
 CellLabel->"Out[94]="]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["StringPosition[string,pattern]", "Literal"],
 " to find the integer offsets of matches. The ",
 StyleBox["default behavior is to search for all",
  FontTracking->"Plain"],
 StyleBox[" occurrences of the pattern (i.e., ",
  FontTracking->"SemiCondensed"],
 StyleBox["Overlaps ", "Literal",
  FontTracking->"SemiCondensed"],
 "\[RightArrow]",
 StyleBox[" True", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[").",
  FontTracking->"SemiCondensed"]
}], "Text",
 CellChangeTimes->{3.470502476703713*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringPosition", "[", 
  RowBox[{"\"\<1234abcd54321\>\"", ",", "NumberString"}], "]"}]], "Input",
 CellLabel->"In[95]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "13"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657716297726*^9, 3.4658598466156*^9, 
  3.468597745904969*^9, 3.468597868935231*^9, 3.470067183462472*^9},
 CellLabel->"Out[95]="]
}, Open  ]],

Cell[TextData[{
 "With ",
 StyleBox["Overlaps \[Rule] False", "Literal"],
 ", you only get matches on substrings that don\[CloseCurlyQuote]t share \
characters with prior matches."
}], "Text",
 CellChangeTimes->{{3.470502489761158*^9, 3.470502490204006*^9}, 
   3.470503891874243*^9, 3.4705167371265717`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringPosition", "[", 
  RowBox[{"\"\<1234abcd54321\>\"", ",", "NumberString", ",", " ", 
   RowBox[{"Overlaps", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellLabel->"In[96]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "13"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.465771629991*^9, 3.4658598466376*^9, 
  3.468597745932933*^9, 3.468597868989999*^9, 3.470067183499654*^9},
 CellLabel->"Out[96]="]
}, Open  ]]
}, Open  ]],

Cell["Discussion", "Heading2", "ProductionPageBreak"],

Cell[TextData[{
 StyleBox["StringMatchQ[]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" and ",
  FontTracking->"Plain"],
 StyleBox["StringFreeQ[]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" very ",
  FontTracking->"Plain"],
 StyleBox["often find application in ",
  FontTracking->"SemiCondensed"],
 StyleBox["restricting inputs to functions.",
  FontTracking->"Plain"]
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"classify", "[", 
   RowBox[{"word_String", "/;", 
    RowBox[{"StringMatchQ", "[", 
     RowBox[{"word", ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<I\>\"", ",", " ", "\"\<me\>\"", ",", " ", "\"\<we\>\"", ",", 
        "\"\<you\>\"", ",", " ", "\"\<they\>\"", ",", " ", "\"\<him\>\"", ",",
         " ", "\"\<her\>\"", ",", " ", "\"\<it\>\""}], "}"}]}], "]"}]}], 
   "]"}], " ", ":=", " ", 
  RowBox[{"pronoun", "[", "word", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classify", "[", 
   RowBox[{"word_String", " ", "/;", " ", 
    RowBox[{"StringMatchQ", "[", 
     RowBox[{"word", ",", " ", 
      RowBox[{"{", 
       RowBox[{
       "\"\<and\>\"", ",", " ", "\"\<or\>\"", ",", " ", "\"\<nor\>\"", ",", 
        " ", 
        RowBox[{
        "\"\<after,\>\"", " ", "\"\<although,\>\"", " ", "\"\<as,\>\"", " ", 
         "\"\<because,\>\"", " ", "\"\<before,\>\"", " ", "\"\<how,\>\"", 
         " ", "\"\<if,\>\"", " ", "\"\<once,\>\"", " ", "\"\<since,\>\"", 
         " ", "\"\<than,\>\"", " ", "\"\<that,\>\"", " ", "\"\<though,\>\"", 
         " ", "\"\<till,\>\"", " ", "\"\<until,\>\"", " ", "\"\<when,\>\"", 
         " ", "\"\<where,\>\"", " ", "\"\<whether,\>\""}], ",", " ", 
        "\"\<while\>\""}], "}"}]}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"conjunction", "[", "word", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classify", "[", 
   RowBox[{"word_String", "/;", 
    RowBox[{"StringMatchQ", "[", 
     RowBox[{"word", ",", 
      RowBox[{"DatePattern", "[", 
       RowBox[{"{", "\"\<DayName\>\"", "}"}], "]"}]}], "]"}]}], "]"}], " ", ":=",
   " ", 
  RowBox[{"dayofweek", "[", "word", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"classify", "[", 
    RowBox[{"word_String", "/;", 
     RowBox[{"StringMatchQ", "[", 
      RowBox[{"word", ",", 
       RowBox[{"DatePattern", "[", 
        RowBox[{"{", "\"\<MonthName\>\"", "}"}], "]"}]}], "]"}]}], "]"}], " ",
    ":=", " ", 
   RowBox[{"month", "[", "word", "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", "...", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"classify", "[", "word_String", "]"}], " ", ":=", " ", 
   RowBox[{"other", "[", "word", "]"}]}], " ", ";"}]}], "Input",
 CellChangeTimes->{{3.470503902389833*^9, 3.470503903633299*^9}, 
   3.470578675143223*^9},
 CellLabel->"In[97]:="],

Cell[TextData[{
 StyleBox["You can also use them as input to other functions, like ",
  FontTracking->"Plain"],
 StyleBox["Pick[]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" in the following grep implementation adapted from an example in \
Mathematica documentation. Recall that in the standard Unix grep, ",
  FontTracking->"Plain"],
 StyleBox["option -v", "LiteralItalic",
  FontTracking->"Plain"],
 StyleBox[" instructs grep to return lines that don\[CloseCurlyQuote]t match \
the pattern. Here ",
  FontTracking->"Plain"],
 StyleBox["Transpose", "Literal",
  FontTracking->"Plain"],
 StyleBox[" and ",
  FontTracking->"Plain"],
 StyleBox["Range", "Literal",
  FontTracking->"Plain"],
 StyleBox[" are used to number each line so the result contains a list of \
pairs ",
  FontTracking->"Plain"],
 StyleBox["{line, match text}", "Literal",
  FontTracking->"Plain"],
 StyleBox[". This grep function was implemented in terms of ",
  FontTracking->"Plain"],
 StyleBox["StringFreeQ", "Literal",
  FontTracking->"Plain"],
 StyleBox[" rather than ",
  FontTracking->"Plain"],
 StyleBox["StringMatchQ", "Literal",
  FontTracking->"Plain"],
 StyleBox[" since the latter only succeeds if the entire string matches.",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{{3.470503933567778*^9, 3.470503938993474*^9}, {
   3.4705043328479843`*^9, 3.470504352747953*^9}, 3.470516745620812*^9, {
   3.4755889371470547`*^9, 3.475588944883623*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"grep", "[", 
   RowBox[{"file_", ",", " ", "patt_", ",", " ", "\"\<-v\>\""}], "]"}], " ", ":=",
   " ", 
  RowBox[{"grepImpl", "[", 
   RowBox[{"file", ",", " ", "patt", ",", "True"}], " ", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"grep", "[", 
   RowBox[{"file_", ",", " ", "patt_"}], "]"}], " ", ":=", " ", 
  RowBox[{"grepImpl", "[", 
   RowBox[{"file", ",", " ", "patt", ",", " ", "False"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"grepImpl", "[", 
   RowBox[{"file_", ",", "patt_", ",", " ", "value_"}], "]"}], ":=", " ", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"data", "=", 
      RowBox[{"Import", "[", 
       RowBox[{"file", ",", "\"\<Lines\>\""}], "]"}]}], "}"}], ",", 
    RowBox[{"Pick", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "data", "]"}], "]"}], ",", "data"}], "}"}], 
       "]"}], ",", 
      RowBox[{"StringFreeQ", "[", 
       RowBox[{"data", ",", " ", 
        RowBox[{"RegularExpression", "[", "patt", "]"}]}], "]"}], ",", 
      "value"}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{3.4716255077002563`*^9},
 CellLabel->"In[102]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"grep", "[", 
   RowBox[{
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<greptest.txt\>\""}],
       "}"}], "]"}], ",", "\"\<bar\>\""}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellChangeTimes->{{3.4658588220296*^9, 3.4658588771886*^9}},
 CellLabel->"In[105]:="],

Cell[BoxData[
 TagBox[GridBox[{
    {"1", "\<\"bar\"\>"},
    {"4", "\<\"foo bar\"\>"},
    {"5", "\<\"foobar\"\>"},
    {"6", "\<\"barfo\"\>"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.7]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.4657716306618*^9, 3.4658573742156*^9, {3.4658588616216*^9, 
   3.4658588799245996`*^9}, 3.4658598466935997`*^9, 3.468597746107173*^9, 
   3.468597869219207*^9, 3.4700671836868267`*^9},
 CellLabel->"Out[105]//TableForm="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"grep", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<greptest.txt\>\""}], 
     "}"}], "]"}], ",", "\"\<bar$\>\""}], "]"}]], "Input",
 CellChangeTimes->{3.4658589253246*^9},
 CellLabel->"In[106]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "\<\"bar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "\<\"foo bar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "\<\"foobar\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.4657716308022003`*^9, {3.4658589146246*^9, 3.4658589276786003`*^9}, 
   3.4658598467306004`*^9, 3.468597746150629*^9, 3.468597869268992*^9, 
   3.470067183754451*^9},
 CellLabel->"Out[106]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"grep", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<greptest.txt\>\""}], 
     "}"}], "]"}], ",", "\"\<bar\>\"", ",", "\"\<-v\>\""}], "]"}]], "Input",
 CellChangeTimes->{3.4658589534026003`*^9},
 CellLabel->"In[107]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "\<\"foo\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "\<\"baz\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "\<\"fo o\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657716310206003`*^9, 3.4658589549866*^9, 
  3.4658598467736*^9, 3.468597746197348*^9, 3.468597869318962*^9, 
  3.470067183806649*^9},
 CellLabel->"Out[107]="]
}, Open  ]],

Cell[TextData[{
 "Both ",
 StyleBox["StringMatchQ[]", "Literal"],
 " and ",
 StyleBox["StringFreeQ[]", "Literal"],
 " support the ",
 StyleBox["IgnoreCase ", "Literal"],
 "\[RightArrow]",
 StyleBox[" True", "Literal"],
 " option. ",
 StyleBox["StringMatchQ", "Literal"],
 " also supports option ",
 StyleBox["SpellingCorrection ", "Literal"],
 "\[RightArrow]",
 StyleBox[" True", "Literal"],
 ", which allows the match to succeed even if a small number of characters \
are wrong. However, in many cases a small number can mean only 1, as the \
following example demonstrates, so I would not rely too heavily on this \
\[OpenCurlyDoubleQuote]feature.\[CloseCurlyDoubleQuote]"
}], "Text", "ProductionPageBreak",
 CellChangeTimes->{{3.470504589600647*^9, 3.470504600301676*^9}, {
   3.470504680376417*^9, 3.470504732799425*^9}, {3.47051618711797*^9, 
   3.470516197040903*^9}, 3.470577987222063*^9, {3.475588997484799*^9, 
   3.4755889988279543`*^9}}],

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<mississippi\>\"", ",", "\"\<missisippi\>\"", ",", " ", 
   RowBox[{"SpellingCorrection", "\[RightArrow]", "True"}]}], "]"}]], "Input",\

 CellLabel->"In[108]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716311610003`*^9, 3.4658598467946*^9, 
  3.468597746234723*^9, 3.468597869356947*^9, 3.470067183912798*^9},
 CellLabel->"Out[108]="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<mississippi\>\"", ",", "\"\<misisipi\>\"", ",", " ", 
   RowBox[{"SpellingCorrection", "\[RightArrow]", "True"}]}], "]"}]], "Input",\

 CellLabel->"In[109]:="],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.4657716312702*^9, 3.4658598468216*^9, 
  3.468597746268546*^9, 3.46859786940316*^9, 3.47006718394699*^9},
 CellLabel->"Out[109]="]
}, Open  ]],

Cell[TextData[{
 "The output of ",
 StyleBox["StringPosition[]", "Literal"],
 " can be used as the input to ",
 StyleBox["StringTake", "Literal"],
 ". "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"str", "=", "\"\<1234abcd54321\>\""}], "}"}], ",", " ", 
   RowBox[{"StringTake", "[", 
    RowBox[{"str", ",", " ", 
     RowBox[{"StringPosition", "[", 
      RowBox[{"str", ",", " ", "NumberString"}], "]"}]}], "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[110]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"1234\"\>", ",", "\<\"234\"\>", ",", "\<\"34\"\>", 
   ",", "\<\"4\"\>", ",", "\<\"54321\"\>", ",", "\<\"4321\"\>", 
   ",", "\<\"321\"\>", ",", "\<\"21\"\>", ",", "\<\"1\"\>"}], "}"}]], "Output",\

 CellChangeTimes->{3.4657716314105997`*^9, 3.4658598468436003`*^9, 
  3.468597746305958*^9, 3.468597869572637*^9, 3.4700671839977283`*^9},
 CellLabel->"Out[110]="]
}, Open  ]],

Cell[TextData[{
 "If you want to use it with ",
 StyleBox["StringDrop[]", "Literal"],
 ", you need to map ",
 StyleBox["StringDrop[]", "Literal"],
 " over the list returned by ",
 StyleBox["StringPosition[]", "Literal"],
 ". This will give you a list with each matching segment dropped. More than \
likely, you will want to set ",
 StyleBox["Overlaps ", "Literal"],
 "\[RightArrow]",
 StyleBox[" False", "Literal"],
 " in this case. Try ",
 StyleBox["Overlaps \[Rule] True", "Literal"],
 " with the expression given below to see why it is undesirable."
}], "Text",
 CellChangeTimes->{
  3.470504788176113*^9, {3.4705059730024776`*^9, 3.470506021897561*^9}, {
   3.4705062449748373`*^9, 3.4705062519801207`*^9}, {3.475589010915723*^9, 
   3.475589012279274*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"str", "=", "\"\<1234abcd54321\>\""}], "}"}], ",", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"StringDrop", "[", 
      RowBox[{"str", ",", " ", "#"}], "]"}], "&"}], " ", "/@", " ", 
    RowBox[{"StringPosition", "[", 
     RowBox[{"str", ",", " ", "NumberString", ",", " ", 
      RowBox[{"Overlaps", "\[Rule]", "False"}]}], "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[111]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"abcd54321\"\>", ",", "\<\"1234abcd\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.465771631551*^9, 3.4658598468696003`*^9, 
  3.468597746351954*^9, 3.468597869706504*^9, 3.470067184047016*^9},
 CellLabel->"Out[111]="]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2"],

Cell[TextData[{
 "See Recipes ",
 ButtonBox["5.3",
  BaseStyle->"Hyperlink",
  ButtonData->"Extracting Characters and Substrings"],
 " and ",
 ButtonBox["5.2",
  BaseStyle->"Hyperlink",
  ButtonData->"Removing and Replacing Characters from Strings"],
 " for usage of ",
 StyleBox["StringTake[]", "Literal"],
 " and ",
 StyleBox["StringDrop[]", "Literal"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4705062836335382`*^9, 3.4705063056376047`*^9}}]
}, Open  ]],

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Tokenizing Text"
}], "Heading1", "ProductionPageBreak",
 CellTags->"Tokenizing"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["\<\
You want to break a string into tokens based on a character or pattern.\
\>", "Text"]
}, Open  ]],

Cell["Solution", "Heading2"],

Cell[TextData[{
 StyleBox["StringSplit[]", "Literal"],
 " provides a variety of options for tokenizing text. The default is simply \
to tokenize on whitespace."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringSplit", "[", 
  "\"\<The quick brown fox\\njumped over the lazy programmer\>\"", 
  "]"}]], "Input",
 CellLabel->"In[112]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"The\"\>", ",", "\<\"quick\"\>", ",", "\<\"brown\"\>", 
   ",", "\<\"fox\"\>", ",", "\<\"jumped\"\>", ",", "\<\"over\"\>", 
   ",", "\<\"the\"\>", ",", "\<\"lazy\"\>", ",", "\<\"programmer\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4657716317226*^9, 3.4658598468915997`*^9, 
  3.468597746390483*^9, 3.4685978697574863`*^9, 3.470067184083943*^9},
 CellLabel->"Out[112]="]
}, Open  ]],

Cell["\<\
Other delimiters can be specified as literals or more general patterns. Here \
you specify comma delimiters with zero or more whitespace characters.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringSplit", "[", 
  RowBox[{"\"\<2008/01/20, test1, 100.3, 77.8,33.77\>\"", ",", " ", 
   RowBox[{"\"\<,\>\"", "~~", 
    RowBox[{"WhitespaceCharacter", "..."}]}]}], "]"}]], "Input",
 CellLabel->"In[113]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"2008/01/20\"\>", ",", "\<\"test1\"\>", ",", "\<\"100.3\"\>", 
   ",", "\<\"77.8\"\>", ",", "\<\"33.77\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.465771631863*^9, 3.4658598469126*^9, 
  3.4685977464351053`*^9, 3.468597869790205*^9, 3.470067184116806*^9},
 CellLabel->"Out[113]="]
}, Open  ]],

Cell["\<\
If there are several delimiters, give each pattern in a list. Here you decide \
to parse the date along with the comma-delimited text.\
\>", "Text",
 CellChangeTimes->{{3.4705063560050077`*^9, 3.47050638383676*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringSplit", "[", 
  RowBox[{"\"\<2008/01/20, test1, 100.3, 77.8,33.77\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<,\>\"", "~~", 
      RowBox[{"WhitespaceCharacter", "..."}]}], ",", "\"\</\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[114]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"2008\"\>", ",", "\<\"01\"\>", ",", "\<\"20\"\>", 
   ",", "\<\"test1\"\>", ",", "\<\"100.3\"\>", ",", "\<\"77.8\"\>", 
   ",", "\<\"33.77\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.465771632097*^9, 3.4658598469396*^9, 
  3.468597746473662*^9, 3.4685978698377037`*^9, 3.470067184163925*^9},
 CellLabel->"Out[114]="]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 StyleBox["StringSplit", "Literal",
  FontTracking->"Extended"],
 StyleBox[" supports rules as",
  FontTracking->"Extended"],
 StyleBox[" well as patterns, which leads to s",
  FontTracking->"Plain"],
 StyleBox["ome interesting ",
  FontTracking->"Extended"],
 StyleBox["applications, such as a means of highlighting output. Here is an \
example that stylizes XML ",
  FontTracking->"SemiCondensed"],
 StyleBox["by rendering directives, comments, and tags in specific font \
styles and colors. (The colors will not be visible in a monochrome print, but \
you can try the code on your own to see the effect.)",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{{3.4705063919079227`*^9, 3.47050641544168*^9}, {
  3.475589027414863*^9, 3.475589063358006*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"StringSplit", "[", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<..\>\"", ",", 
         "\"\<data\>\"", ",", "\"\<ch02\>\"", ",", "\"\<data1.xml\>\""}], 
        "}"}], "]"}], ",", "\"\<text\>\""}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"x", ":", 
        RowBox[{"(", 
         RowBox[{"\"\<<!--\>\"", "~~", 
          RowBox[{
           RowBox[{"Except", "[", "\"\<>\>\"", "]"}], ".."}], "~~", 
          "\"\<>\>\""}], ")"}]}], "\[RuleDelayed]", 
       RowBox[{"Style", "[", 
        RowBox[{"x", ",", 
         RowBox[{"FontSlant", "\[Rule]", "Italic"}], ",", 
         RowBox[{"FontColor", "\[Rule]", "Brown"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"x", ":", 
        RowBox[{"(", 
         RowBox[{"\"\<<?\>\"", "~~", 
          RowBox[{
           RowBox[{"Except", "[", "\"\<>\>\"", "]"}], ".."}], "~~", 
          "\"\<>\>\""}], ")"}]}], "\[RuleDelayed]", 
       RowBox[{"Style", "[", 
        RowBox[{"x", ",", 
         RowBox[{"FontColor", "\[Rule]", "Red"}]}], "]"}]}], ",", " ", 
      RowBox[{
       RowBox[{"x", ":", 
        RowBox[{"(", 
         RowBox[{"\"\<<\>\"", "~~", 
          RowBox[{
           RowBox[{"Except", "[", "\"\<>\>\"", "]"}], ".."}], "~~", 
          "\"\<>\>\""}], ")"}]}], "\[RuleDelayed]", 
       RowBox[{"Style", "[", 
        RowBox[{"x", ",", 
         RowBox[{"FontWeight", "\[Rule]", "Bold"}], ",", " ", 
         RowBox[{"FontColor", "\[Rule]", "Blue"}]}], "]"}]}]}], "}"}]}], 
   "]"}], " ", "//", "Row"}]], "Input",
 CellChangeTimes->{{3.4658593195256*^9, 3.4658593783976*^9}},
 CellLabel->"In[115]:="]
}, Open  ]],

Cell[BoxData[
 TemplateBox[{
  StyleBox["\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"", 
    StripOnInput -> False, FontColor -> RGBColor[1, 0, 0]],"\"\\n\"",StyleBox[
   "\"<!-- Some data to use as a test for Mathematica's XML import -->\"", 
    StripOnInput -> False, FontSlant -> Italic, FontColor -> 
    RGBColor[0.6, 0.4, 0.2]],"\"\\n\"",StyleBox[
   "\"<?test Just for didactic purposes?>\"", StripOnInput -> False, 
    FontColor -> RGBColor[1, 0, 0]],"\"\\n\"",StyleBox[
   "\"<data>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\"",StyleBox[
   "\"<item>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<name>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"Leonardo\"",StyleBox[
   "\"</name>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<sex>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"male\"",StyleBox[
   "\"</sex>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<age>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"8\"",StyleBox[
   "\"</age>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<height>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"4.7\"",StyleBox[
   "\"</height>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\"",StyleBox[
   "\"</item>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\"",StyleBox[
   "\"<item>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<name>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"Salvatore\"",StyleBox[
   "\"</name>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<sex>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"male\"",StyleBox[
   "\"</sex>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<age>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"5\"",StyleBox[
   "\"</age>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<height>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"4.1\"",StyleBox[
   "\"</height>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\"",StyleBox[
   "\"</item>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\"",StyleBox[
   "\"<item>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<name>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"Alexis\"",StyleBox[
   "\"</name>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<sex>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"female\"",StyleBox[
   "\"</sex>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<age>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"6\"",StyleBox[
   "\"</age>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\\t\"",StyleBox[
   "\"<height>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"4.4\"",StyleBox[
   "\"</height>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\\t\"",StyleBox[
   "\"</item>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\"",StyleBox[
   "\"</data>\"", StripOnInput -> False, FontWeight -> Bold, FontColor -> 
    RGBColor[0, 0, 1]],"\"\\n\"",StyleBox[
   "\"<!-- Comment at end -->\"", StripOnInput -> False, FontSlant -> Italic, 
    FontColor -> RGBColor[0.6, 0.4, 0.2]]},
  "Row",
  DisplayFunction->(
   RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
     "\[InvisibleSpace]", #4, "\[InvisibleSpace]", #5, 
     "\[InvisibleSpace]", #6, "\[InvisibleSpace]", #7, 
     "\[InvisibleSpace]", #8, "\[InvisibleSpace]", #9, 
     "\[InvisibleSpace]", #10, "\[InvisibleSpace]", #11, 
     "\[InvisibleSpace]", #12, "\[InvisibleSpace]", #13, 
     "\[InvisibleSpace]", #14, "\[InvisibleSpace]", #15, 
     "\[InvisibleSpace]", #16, "\[InvisibleSpace]", #17, 
     "\[InvisibleSpace]", #18, "\[InvisibleSpace]", #19, 
     "\[InvisibleSpace]", #20, "\[InvisibleSpace]", #21, 
     "\[InvisibleSpace]", #22, "\[InvisibleSpace]", #23, 
     "\[InvisibleSpace]", #24, "\[InvisibleSpace]", #25, 
     "\[InvisibleSpace]", #26, "\[InvisibleSpace]", #27, 
     "\[InvisibleSpace]", #28, "\[InvisibleSpace]", #29, 
     "\[InvisibleSpace]", #30, "\[InvisibleSpace]", #31, 
     "\[InvisibleSpace]", #32, "\[InvisibleSpace]", #33, 
     "\[InvisibleSpace]", #34, "\[InvisibleSpace]", #35, 
     "\[InvisibleSpace]", #36, "\[InvisibleSpace]", #37, 
     "\[InvisibleSpace]", #38, "\[InvisibleSpace]", #39, 
     "\[InvisibleSpace]", #40, "\[InvisibleSpace]", #41, 
     "\[InvisibleSpace]", #42, "\[InvisibleSpace]", #43, 
     "\[InvisibleSpace]", #44, "\[InvisibleSpace]", #45, 
     "\[InvisibleSpace]", #46, "\[InvisibleSpace]", #47, 
     "\[InvisibleSpace]", #48, "\[InvisibleSpace]", #49, 
     "\[InvisibleSpace]", #50, "\[InvisibleSpace]", #51, 
     "\[InvisibleSpace]", #52, "\[InvisibleSpace]", #53, 
     "\[InvisibleSpace]", #54, "\[InvisibleSpace]", #55, 
     "\[InvisibleSpace]", #56, "\[InvisibleSpace]", #57, 
     "\[InvisibleSpace]", #58, "\[InvisibleSpace]", #59, 
     "\[InvisibleSpace]", #60, "\[InvisibleSpace]", #61, 
     "\[InvisibleSpace]", #62, "\[InvisibleSpace]", #63, 
     "\[InvisibleSpace]", #64, "\[InvisibleSpace]", #65, 
     "\[InvisibleSpace]", #66, "\[InvisibleSpace]", #67, 
     "\[InvisibleSpace]", #68, "\[InvisibleSpace]", #69, 
     "\[InvisibleSpace]", #70, "\[InvisibleSpace]", #71}]& ),
  InterpretationFunction->(RowBox[{"Row", "[", 
     RowBox[{"{", 
       RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
         ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, ",", #13, ",", #14, 
         ",", #15, ",", #16, ",", #17, ",", #18, ",", #19, ",", #20, ",", #21,
          ",", #22, ",", #23, ",", #24, ",", #25, ",", #26, ",", #27, 
         ",", #28, ",", #29, ",", #30, ",", #31, ",", #32, ",", #33, ",", #34,
          ",", #35, ",", #36, ",", #37, ",", #38, ",", #39, ",", #40, 
         ",", #41, ",", #42, ",", #43, ",", #44, ",", #45, ",", #46, ",", #47,
          ",", #48, ",", #49, ",", #50, ",", #51, ",", #52, ",", #53, 
         ",", #54, ",", #55, ",", #56, ",", #57, ",", #58, ",", #59, ",", #60,
          ",", #61, ",", #62, ",", #63, ",", #64, ",", #65, ",", #66, 
         ",", #67, ",", #68, ",", #69, ",", #70, ",", #71}], "}"}], 
     "]"}]& )]], "Output",
 CellChangeTimes->{3.4657716323154*^9, 3.4658593846876*^9, 3.4658598469816*^9,
   3.468597746539575*^9, 3.4685978699197893`*^9, 3.470067184248849*^9},
 CellLabel->"Out[115]="],

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Working with Natural Language Dictionaries"
}], "Heading1",
 CellMargins->{{0, 72}, {2, 14}},
 CellTags->"Natural Language Dictionaries"],

Cell[CellGroupData[{

Cell["Problem", "Heading2"],

Cell["\<\
You want to do some simple linguistic processing driven by a reliable \
lexicon. \
\>", "Text",
 CellChangeTimes->{3.470506518347382*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2",
 CellMargins->{{0, 36}, {0, 11}}],

Cell["\<\
As of version 6, Mathematica comes bundled with many useful data sources. One \
of these sources is an integrated English language dictionary (dictionaries \
for other languages can be installed). \
\>", "Text",
 CellChangeTimes->{{3.4705065291062317`*^9, 3.4705065369465523`*^9}}],

Cell[TextData[{
 "Look up words that begin with ",
 StyleBox["th", "Emphasis"],
 " and end with ",
 StyleBox["y", "Emphasis"],
 "."
}], "Text", "ProductionPageBreak",
 CellChangeTimes->{{3.470506548105856*^9, 3.4705065691600523`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DictionaryLookup", "[", 
  RowBox[{"\"\<th\>\"", " ", "~~", " ", "___", " ", "~~", "\"\<y\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[116]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"thankfully\"\>", ",", "\<\"thanklessly\"\>", 
   ",", "\<\"theatricality\"\>", ",", "\<\"theatrically\"\>", 
   ",", "\<\"thematically\"\>", ",", "\<\"theocracy\"\>", 
   ",", "\<\"theologically\"\>", ",", "\<\"theology\"\>", 
   ",", "\<\"theoretically\"\>", ",", "\<\"theory\"\>", 
   ",", "\<\"theosophy\"\>", ",", "\<\"therapeutically\"\>", 
   ",", "\<\"therapy\"\>", ",", "\<\"thereby\"\>", ",", "\<\"thermally\"\>", 
   ",", "\<\"thermodynamically\"\>", ",", "\<\"thermostatically\"\>", 
   ",", "\<\"they\"\>", ",", "\<\"thickly\"\>", ",", "\<\"thievery\"\>", 
   ",", "\<\"thingummy\"\>", ",", "\<\"thingy\"\>", ",", "\<\"thinly\"\>", 
   ",", "\<\"thirdly\"\>", ",", "\<\"thirstily\"\>", ",", "\<\"thirsty\"\>", 
   ",", "\<\"thirty\"\>", ",", "\<\"thorny\"\>", ",", "\<\"thoroughly\"\>", 
   ",", "\<\"thoughtfully\"\>", ",", "\<\"thoughtlessly\"\>", 
   ",", "\<\"thready\"\>", ",", "\<\"threateningly\"\>", 
   ",", "\<\"threepenny\"\>", ",", "\<\"threnody\"\>", 
   ",", "\<\"thriftily\"\>", ",", "\<\"thrifty\"\>", 
   ",", "\<\"thrillingly\"\>", ",", "\<\"throatily\"\>", 
   ",", "\<\"throaty\"\>", ",", "\<\"throwaway\"\>", ",", "\<\"thruway\"\>", 
   ",", "\<\"thuggery\"\>", ",", "\<\"thunderously\"\>", 
   ",", "\<\"thundery\"\>", ",", "\<\"thy\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.465771632799*^9, 3.4658598470355997`*^9, 
  3.468597746749461*^9, 3.4685978699755173`*^9, 3.470067184652948*^9},
 CellLabel->"Out[116]="]
}, Open  ]],

Cell[TextData[{
 "Look up words that end in ",
 StyleBox["ee.", "Emphasis"]
}], "Text",
 CellChangeTimes->{{3.470506613772624*^9, 3.470506616353714*^9}, 
   3.471625686961995*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DictionaryLookup", "[", 
  RowBox[{"___", " ", "~~", " ", "\"\<ee\>\""}], "]"}]], "Input",
 CellLabel->"In[117]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"absentee\"\>", ",", "\<\"addressee\"\>", ",", "\<\"agree\"\>", 
   ",", "\<\"Aimee\"\>", ",", "\<\"Albee\"\>", ",", "\<\"amputee\"\>", 
   ",", "\<\"apogee\"\>", ",", "\<\"appointee\"\>", ",", "\<\"Ashlee\"\>", 
   ",", "\<\"attendee\"\>", ",", "\<\"Attlee\"\>", ",", "\<\"axletree\"\>", 
   ",", "\<\"banshee\"\>", ",", "\<\"bee\"\>", ",", "\<\"bootee\"\>", 
   ",", "\<\"bumblebee\"\>", ",", "\<\"bungee\"\>", ",", "\<\"carefree\"\>", 
   ",", "\<\"Chattahoochee\"\>", ",", "\<\"Cherokee\"\>", 
   ",", "\<\"chickadee\"\>", ",", "\<\"chimpanzee\"\>", ",", "\<\"coffee\"\>",
    ",", "\<\"committee\"\>", ",", "\<\"conferee\"\>", 
   ",", "\<\"consignee\"\>", ",", "\<\"coulee\"\>", ",", "\<\"Cree\"\>", 
   ",", "\<\"debauchee\"\>", ",", "\<\"decree\"\>", ",", "\<\"Dee\"\>", 
   ",", "\<\"degree\"\>", ",", "\<\"deportee\"\>", ",", "\<\"Desiree\"\>", 
   ",", "\<\"detainee\"\>", ",", "\<\"devotee\"\>", ",", "\<\"disagree\"\>", 
   ",", "\<\"divorcee\"\>", ",", "\<\"draftee\"\>", ",", "\<\"Dundee\"\>", 
   ",", "\<\"dungaree\"\>", ",", "\<\"Elysee\"\>", ",", "\<\"emcee\"\>", 
   ",", "\<\"employee\"\>", ",", "\<\"enlistee\"\>", ",", "\<\"entree\"\>", 
   ",", "\<\"epee\"\>", ",", "\<\"escapee\"\>", ",", "\<\"evacuee\"\>", 
   ",", "\<\"fat-free\"\>", ",", "\<\"fee\"\>", ",", "\<\"fiancee\"\>", 
   ",", "\<\"filigree\"\>", ",", "\<\"flee\"\>", ",", "\<\"foresee\"\>", 
   ",", "\<\"franchisee\"\>", ",", "\<\"free\"\>", ",", "\<\"fricassee\"\>", 
   ",", "\<\"Frisbee\"\>", ",", "\<\"fusee\"\>", ",", "\<\"Galilee\"\>", 
   ",", "\<\"garnishee\"\>", ",", "\<\"gee\"\>", ",", "\<\"ghee\"\>", 
   ",", "\<\"glee\"\>", ",", "\<\"goatee\"\>", ",", "\<\"grandee\"\>", 
   ",", "\<\"grantee\"\>", ",", "\<\"guarantee\"\>", ",", "\<\"gumtree\"\>", 
   ",", "\<\"honeybee\"\>", ",", "\<\"honoree\"\>", ",", "\<\"Humvee\"\>", 
   ",", "\<\"inductee\"\>", ",", "\<\"internee\"\>", 
   ",", "\<\"interviewee\"\>", ",", "\<\"invitee\"\>", 
   ",", "\<\"jamboree\"\>", ",", "\<\"Jaycee\"\>", ",", "\<\"jubilee\"\>", 
   ",", "\<\"kedgeree\"\>", ",", "\<\"Klee\"\>", ",", "\<\"knee\"\>", 
   ",", "\<\"lee\"\>", ",", "\<\"Lee\"\>", ",", "\<\"legatee\"\>", 
   ",", "\<\"Legree\"\>", ",", "\<\"lessee\"\>", ",", "\<\"levee\"\>", 
   ",", "\<\"licensee\"\>", ",", "\<\"manatee\"\>", ",", "\<\"marquee\"\>", 
   ",", "\<\"matinee\"\>", ",", "\<\"McGee\"\>", ",", "\<\"McKee\"\>", 
   ",", "\<\"melee\"\>", ",", "\<\"Menominee\"\>", ",", "\<\"Milwaukee\"\>", 
   ",", "\<\"mortgagee\"\>", ",", "\<\"Murrumbidgee\"\>", 
   ",", "\<\"Muskogee\"\>", ",", "\<\"nee\"\>", ",", "\<\"negligee\"\>", 
   ",", "\<\"nominee\"\>", ",", "\<\"Okeechobee\"\>", 
   ",", "\<\"Okefenokee\"\>", ",", "\<\"oversee\"\>", ",", "\<\"parolee\"\>", 
   ",", "\<\"Pawnee\"\>", ",", "\<\"payee\"\>", ",", "\<\"pedigree\"\>", 
   ",", "\<\"pee\"\>", ",", "\<\"peewee\"\>", ",", "\<\"Pelee\"\>", 
   ",", "\<\"perigee\"\>", ",", "\<\"pewee\"\>", ",", "\<\"pharisee\"\>", 
   ",", "\<\"Pharisee\"\>", ",", "\<\"pongee\"\>", ",", "\<\"prithee\"\>", 
   ",", "\<\"protegee\"\>", ",", "\<\"puree\"\>", ",", "\<\"puttee\"\>", 
   ",", "\<\"quadtree\"\>", ",", "\<\"ranee\"\>", ",", "\<\"referee\"\>", 
   ",", "\<\"refugee\"\>", ",", "\<\"Renee\"\>", ",", "\<\"repartee\"\>", 
   ",", "\<\"retiree\"\>", ",", "\<\"returnee\"\>", ",", "\<\"Rhee\"\>", 
   ",", "\<\"rupee\"\>", ",", "\<\"Sadducee\"\>", ",", "\<\"scree\"\>", 
   ",", "\<\"see\"\>", ",", "\<\"settee\"\>", ",", "\<\"Shawnee\"\>", 
   ",", "\<\"Sheree\"\>", ",", "\<\"shoetree\"\>", ",", "\<\"singletree\"\>", 
   ",", "\<\"sirree\"\>", ",", "\<\"Slurpee\"\>", ",", "\<\"soiree\"\>", 
   ",", "\<\"spree\"\>", ",", "\<\"squeegee\"\>", ",", "\<\"standee\"\>", 
   ",", "\<\"subcommittee\"\>", ",", "\<\"subtree\"\>", ",", "\<\"suttee\"\>",
    ",", "\<\"Suwanee\"\>", ",", "\<\"Swanee\"\>", ",", "\<\"Tallahassee\"\>",
    ",", "\<\"tee\"\>", ",", "\<\"Tennessee\"\>", ",", "\<\"tepee\"\>", 
   ",", "\<\"thee\"\>", ",", "\<\"three\"\>", ",", "\<\"toffee\"\>", 
   ",", "\<\"toll-free\"\>", ",", "\<\"topee\"\>", ",", "\<\"toupee\"\>", 
   ",", "\<\"towhee\"\>", ",", "\<\"townee\"\>", ",", "\<\"Toynbee\"\>", 
   ",", "\<\"trainee\"\>", ",", "\<\"transferee\"\>", ",", "\<\"tree\"\>", 
   ",", "\<\"trochee\"\>", ",", "\<\"Truckee\"\>", ",", "\<\"trustee\"\>", 
   ",", "\<\"Tuskegee\"\>", ",", "\<\"twee\"\>", ",", "\<\"Tweedledee\"\>", 
   ",", "\<\"Tyree\"\>", ",", "\<\"wannabee\"\>", ",", "\<\"wee\"\>", 
   ",", "\<\"whee\"\>", ",", "\<\"whiffletree\"\>", 
   ",", "\<\"whippletree\"\>", ",", "\<\"whoopee\"\>", ",", "\<\"Yahtzee\"\>",
    ",", "\<\"Yankee\"\>", ",", "\<\"yippee\"\>", ",", "\<\"Zebedee\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4657716330486*^9, 3.4658598471006002`*^9, 
  3.468597746794421*^9, 3.468597870053534*^9, 3.470067184696781*^9},
 CellLabel->"Out[117]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2", "ProductionPageBreak"],

Cell["\<\
There are a lot of neat applications for an integrated dictionary. \
\>", "Text",
 CellChangeTimes->{{3.470506650137227*^9, 3.470506659419592*^9}}],

Cell["Crossword puzzles", "Heading3",
 CellChangeTimes->{{3.4755890820780487`*^9, 3.4755890823971233`*^9}}],

Cell[TextData[{
 "Here is how you might cheat at a crosswo",
 StyleBox["rd puzzle. Say you hav",
  FontTracking->"Plain"],
 "e",
 StyleBox[" three letters of a six-let",
  FontTracking->"Plain"],
 "ter word and the clue is \[OpenCurlyDoubleQuote]51 down: unkeyed.\
\[CloseCurlyDoubleQuote]"
}], "Text",
 CellChangeTimes->{{3.4705067442139378`*^9, 3.470506795153767*^9}, {
  3.470516246253759*^9, 3.4705162498395023`*^9}, {3.475589088862859*^9, 
  3.475589089095682*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DictionaryLookup", "[", 
  RowBox[{
  "\"\<a\>\"", " ", "~~", " ", "_", " ", "~~", " ", "\"\<o\>\"", " ", "~~", 
   " ", "_", " ", "~~", " ", "_", "  ", "~~", " ", "\"\<l\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[118]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"amoral\"\>", ",", "\<\"atonal\"\>", ",", "\<\"avowal\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4657716333761997`*^9, 3.4658598471526003`*^9, 
  3.468597746838052*^9, 3.4685978701209803`*^9, 3.470067184731901*^9},
 CellLabel->"Out[118]="]
}, Open  ]],

Cell[TextData[{
 "Ah, ",
 StyleBox["atonal", "Emphasis"],
 " sounds right (pun intended)!"
}], "Text",
 CellChangeTimes->{{3.4705068188617496`*^9, 3.470506821490315*^9}}],

Cell[CellGroupData[{

Cell["Anagrams", "Heading3"],

Cell["\<\
You can also help your second grader impress the teacher on that November \
worksheet for finding all the words you can make out of the letters in \
\[OpenCurlyDoubleQuote]Thanksgiving\[CloseCurlyDoubleQuote] (i.e., anagrams). \
Here we use a pattern containing all combinations of the letters in \
\[OpenCurlyDoubleQuote]thanksgiving\[CloseCurlyDoubleQuote] and an extra \
constraint function to ensure letters are contained by their availability \
(count). Strictly speaking, an anagram must use all the letters of the input, \
but I ignore that here.\
\>", "Text",
 CellChangeTimes->{{3.470506843327417*^9, 3.470506858976563*^9}, {
   3.470516258710063*^9, 3.470516275899213*^9}, 3.470578073112742*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"thanksgivingQ", "[", "word_", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"StringCount", "[", 
      RowBox[{"word", ",", "\"\<t\>\""}], "]"}], " ", "<", " ", "2"}], " ", "&&",
     " ", 
    RowBox[{
     RowBox[{"StringCount", "[", 
      RowBox[{"word", ",", "\"\<h\>\""}], "]"}], " ", "<", " ", "2"}], " ", "&&",
     " ", 
    RowBox[{
     RowBox[{"StringCount", "[", 
      RowBox[{"word", ",", "\"\<a\>\""}], "]"}], " ", "<", " ", "2"}], " ", "&&",
     " ", 
    RowBox[{
     RowBox[{"StringCount", "[", 
      RowBox[{"word", ",", "\"\<n\>\""}], "]"}], " ", "<", " ", "3"}], "  ", "&&",
     " ", 
    RowBox[{
     RowBox[{"StringCount", "[", 
      RowBox[{"word", ",", "\"\<k\>\""}], "]"}], " ", "<", " ", "2"}], " ", "&&",
     " ", 
    RowBox[{
     RowBox[{"StringCount", "[", 
      RowBox[{"word", ",", "\"\<s\>\""}], "]"}], " ", "<", " ", "2"}], " ", "&&",
     " ", 
    RowBox[{
     RowBox[{"StringCount", "[", 
      RowBox[{"word", ",", "\"\<g\>\""}], "]"}], " ", "<", " ", "3"}], " ", "&&",
     " ", 
    RowBox[{
     RowBox[{"StringCount", "[", 
      RowBox[{"word", ",", "\"\<i\>\""}], "]"}], " ", "<", " ", "3"}], " ", "&&",
     " ", 
    RowBox[{
     RowBox[{"StringCount", "[", 
      RowBox[{"word", ",", "\"\<v\>\""}], "]"}], " ", "<", " ", "2"}]}]}], 
  " ", ";"}]], "Input",
 CellLabel->"In[119]:="],

Cell[BoxData[
 RowBox[{"DictionaryLookup", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"word", ":", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
       "\"\<t\>\"", " ", "|", " ", "\"\<h\>\"", " ", "|", " ", "\"\<a\>\"", 
        " ", "|", " ", "\"\<n\>\"", " ", "|", " ", "\"\<k\>\"", " ", "|", 
        " ", "\"\<s\>\"", " ", "|", " ", "\"\<g\>\"", " ", "|", " ", 
        "\"\<i\>\"", " ", "|", " ", "\"\<v\>\""}], " ", ")"}], ".."}]}], "/;", 
    RowBox[{"thanksgivingQ", "[", "word", "]"}]}], ",", " ", 
   RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.47558910452693*^9, 3.4755891131799097`*^9}},
 CellLabel->"In[120]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"aging\"\>", ",", "\<\"agings\"\>", 
   ",", "\<\"Agni\"\>", ",", "\<\"ah\"\>", ",", "\<\"Aisha\"\>", 
   ",", "\<\"akin\"\>", ",", "\<\"Akita\"\>", ",", "\<\"an\"\>", 
   ",", "\<\"Ana\"\>", ",", "\<\"angst\"\>", ",", "\<\"Anita\"\>", 
   ",", "\<\"ankh\"\>", ",", "\<\"ankhs\"\>", ",", "\<\"Ann\"\>", 
   ",", "\<\"Anna\"\>", ",", "\<\"ans\"\>", ",", "\<\"Anshan\"\>", 
   ",", "\<\"ant\"\>", ",", "\<\"anti\"\>", ",", "\<\"anting\"\>", 
   ",", "\<\"antis\"\>", ",", "\<\"ants\"\>", ",", "\<\"as\"\>", 
   ",", "\<\"ash\"\>", ",", "\<\"Ashanti\"\>", ",", "\<\"ashing\"\>", 
   ",", "\<\"Asia\"\>", ",", "\<\"Asian\"\>", ",", "\<\"ask\"\>", 
   ",", "\<\"asking\"\>", ",", "\<\"at\"\>", ",", "\<\"Atkins\"\>", 
   ",", "\<\"Ava\"\>", ",", "\<\"Avis\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"gags\"\>", ",", "\<\"gain\"\>", ",", "\<\"gaining\"\>", 
   ",", "\<\"gains\"\>", ",", "\<\"gait\"\>", ",", "\<\"gaits\"\>", 
   ",", "\<\"gang\"\>", ",", "\<\"gangs\"\>", ",", "\<\"gas\"\>", 
   ",", "\<\"gash\"\>", ",", "\<\"gashing\"\>", ",", "\<\"gating\"\>", 
   ",", "\<\"Gavin\"\>", ",", "\<\"ghat\"\>", ",", "\<\"ghats\"\>", 
   ",", "\<\"Ghats\"\>", ",", "\<\"GI\"\>", ",", "\<\"giant\"\>", 
   ",", "\<\"giants\"\>", ",", "\<\"gig\"\>", ",", "\<\"gigs\"\>", 
   ",", "\<\"gin\"\>", ",", "\<\"Gina\"\>", ",", "\<\"gins\"\>", 
   ",", "\<\"Gish\"\>", ",", "\<\"gist\"\>", ",", "\<\"git\"\>", 
   ",", "\<\"gits\"\>", ",", "\<\"giving\"\>", ",", "\<\"givings\"\>", 
   ",", "\<\"gnash\"\>", ",", "\<\"gnashing\"\>", ",", "\<\"gnat\"\>", 
   ",", "\<\"gnats\"\>", ",", "\<\"gs\"\>", ",", "\<\"ha\"\>", 
   ",", "\<\"hag\"\>", ",", "\<\"haggis\"\>", ",", "\<\"hags\"\>", 
   ",", "\<\"Hahn\"\>", ",", "\<\"Haiti\"\>", ",", "\<\"Han\"\>", 
   ",", "\<\"hang\"\>", ",", "\<\"hanging\"\>", ",", "\<\"hangings\"\>", 
   ",", "\<\"hangs\"\>", ",", "\<\"hank\"\>", ",", "\<\"Hank\"\>", 
   ",", "\<\"hanks\"\>", ",", "\<\"Hans\"\>", ",", "\<\"has\"\>", 
   ",", "\<\"hast\"\>", ",", "\<\"hasting\"\>", ",", "\<\"hat\"\>", 
   ",", "\<\"hating\"\>", ",", "\<\"hats\"\>", ",", "\<\"having\"\>", 
   ",", "\<\"hi\"\>", ",", "\<\"Higgins\"\>", ",", "\<\"hiking\"\>", 
   ",", "\<\"hinging\"\>", ",", "\<\"hint\"\>", ",", "\<\"hinting\"\>", 
   ",", "\<\"hints\"\>", ",", "\<\"his\"\>", ",", "\<\"histing\"\>", 
   ",", "\<\"hit\"\>", ",", "\<\"hits\"\>", ",", "\<\"HIV\"\>", 
   ",", "\<\"hiving\"\>", ",", "\<\"I\"\>", ",", "\<\"Ian\"\>", 
   ",", "\<\"in\"\>", ",", "\<\"Ina\"\>", ",", "\<\"ink\"\>", 
   ",", "\<\"inking\"\>", ",", "\<\"inks\"\>", ",", "\<\"inn\"\>", 
   ",", "\<\"innit\"\>", ",", "\<\"inns\"\>", ",", "\<\"ins\"\>", 
   ",", "\<\"insight\"\>", ",", "\<\"inti\"\>", ",", "\<\"is\"\>", 
   ",", "\<\"Isa\"\>", ",", "\<\"Isiah\"\>", ",", "\<\"it\"\>", 
   ",", "\<\"IT\"\>", ",", "\<\"its\"\>", ",", "\<\"Iva\"\>", 
   ",", "\<\"Ivan\"\>", ",", "\<\"Kan\"\>", ",", "\<\"Kans\"\>", 
   ",", "\<\"Kant\"\>", ",", "\<\"khan\"\>", ",", "\<\"Khan\"\>", 
   ",", "\<\"khans\"\>", ",", "\<\"kin\"\>", ",", "\<\"king\"\>", 
   ",", "\<\"King\"\>", ",", "\<\"kings\"\>", ",", "\<\"Kings\"\>", 
   ",", "\<\"kins\"\>", ",", "\<\"kit\"\>", ",", "\<\"Kit\"\>", 
   ",", "\<\"kith\"\>", ",", "\<\"kithing\"\>", ",", "\<\"kiths\"\>", 
   ",", "\<\"kiting\"\>", ",", "\<\"kits\"\>", ",", "\<\"knavish\"\>", 
   ",", "\<\"knight\"\>", ",", "\<\"Knight\"\>", ",", "\<\"knighting\"\>", 
   ",", "\<\"knights\"\>", ",", "\<\"knish\"\>", ",", "\<\"knit\"\>", 
   ",", "\<\"knits\"\>", ",", "\<\"ks\"\>", ",", "\<\"nag\"\>", 
   ",", "\<\"nags\"\>", ",", "\<\"nah\"\>", ",", "\<\"nan\"\>", 
   ",", "\<\"Nan\"\>", ",", "\<\"nans\"\>", ",", "\<\"NASA\"\>", 
   ",", "\<\"Nash\"\>", ",", "\<\"Nat\"\>", ",", "\<\"nigh\"\>", 
   ",", "\<\"night\"\>", ",", "\<\"nights\"\>", ",", "\<\"Nikita\"\>", 
   ",", "\<\"Nina\"\>", ",", "\<\"ninth\"\>", ",", "\<\"ninths\"\>", 
   ",", "\<\"Nisan\"\>", ",", "\<\"nit\"\>", ",", "\<\"Nita\"\>", 
   ",", "\<\"nits\"\>", ",", "\<\"nth\"\>", ",", "\<\"sag\"\>", 
   ",", "\<\"saint\"\>", ",", "\<\"saith\"\>", ",", "\<\"Saki\"\>", 
   ",", "\<\"Saks\"\>", ",", "\<\"San\"\>", ",", "\<\"sang\"\>", 
   ",", "\<\"Sang\"\>", ",", "\<\"saning\"\>", ",", "\<\"sank\"\>", 
   ",", "\<\"Sask\"\>", ",", "\<\"sat\"\>", ",", "\<\"SAT\"\>", 
   ",", "\<\"satin\"\>", ",", "\<\"sating\"\>", ",", "\<\"satining\"\>", 
   ",", "\<\"saving\"\>", ",", "\<\"sh\"\>", ",", "\<\"shag\"\>", 
   ",", "\<\"shaking\"\>", ",", "\<\"shank\"\>", ",", "\<\"shat\"\>", 
   ",", "\<\"shaving\"\>", ",", "\<\"shin\"\>", ",", "\<\"shining\"\>", 
   ",", "\<\"shiv\"\>", ",", "\<\"Shiva\"\>", ",", "\<\"sigh\"\>", 
   ",", "\<\"sighing\"\>", ",", "\<\"sight\"\>", ",", "\<\"sighting\"\>", 
   ",", "\<\"sign\"\>", ",", "\<\"signing\"\>", ",", "\<\"Sikh\"\>", 
   ",", "\<\"Sikhs\"\>", ",", "\<\"sin\"\>", ",", "\<\"Sinai\"\>", 
   ",", "\<\"sing\"\>", ",", "\<\"singing\"\>", ",", "\<\"sink\"\>", 
   ",", "\<\"Sinkiang\"\>", ",", "\<\"sinking\"\>", ",", "\<\"sit\"\>", 
   ",", "\<\"siting\"\>", ",", "\<\"Siva\"\>", ",", "\<\"Sivan\"\>", 
   ",", "\<\"ska\"\>", ",", "\<\"skating\"\>", ",", "\<\"ski\"\>", 
   ",", "\<\"skiing\"\>", ",", "\<\"skin\"\>", ",", "\<\"skint\"\>", 
   ",", "\<\"skit\"\>", ",", "\<\"skiting\"\>", ",", "\<\"skiving\"\>", 
   ",", "\<\"snag\"\>", ",", "\<\"snaking\"\>", ",", "\<\"snit\"\>", 
   ",", "\<\"stag\"\>", ",", "\<\"staging\"\>", ",", "\<\"stain\"\>", 
   ",", "\<\"staining\"\>", ",", "\<\"staking\"\>", ",", "\<\"Stan\"\>", 
   ",", "\<\"stank\"\>", ",", "\<\"staving\"\>", ",", "\<\"sting\"\>", 
   ",", "\<\"stinging\"\>", ",", "\<\"stink\"\>", ",", "\<\"stinking\"\>", 
   ",", "\<\"ta\"\>", ",", "\<\"tag\"\>", ",", "\<\"tags\"\>", 
   ",", "\<\"Tahiti\"\>", ",", "\<\"taking\"\>", ",", "\<\"takings\"\>", 
   ",", "\<\"tan\"\>", ",", "\<\"tang\"\>", ",", "\<\"tangs\"\>", 
   ",", "\<\"tank\"\>", ",", "\<\"tanking\"\>", ",", "\<\"tanks\"\>", 
   ",", "\<\"tans\"\>", ",", "\<\"task\"\>", ",", "\<\"tasking\"\>", 
   ",", "\<\"Thai\"\>", ",", "\<\"Thais\"\>", ",", "\<\"than\"\>", 
   ",", "\<\"thank\"\>", ",", "\<\"thanking\"\>", ",", "\<\"thanks\"\>", 
   ",", "\<\"thanksgiving\"\>", ",", "\<\"Thanksgiving\"\>", 
   ",", "\<\"Thant\"\>", ",", "\<\"thin\"\>", ",", "\<\"thing\"\>", 
   ",", "\<\"things\"\>", ",", "\<\"think\"\>", ",", "\<\"thinking\"\>", 
   ",", "\<\"thinks\"\>", ",", "\<\"thins\"\>", ",", "\<\"this\"\>", 
   ",", "\<\"ti\"\>", ",", "\<\"Tia\"\>", ",", "\<\"tin\"\>", 
   ",", "\<\"Tina\"\>", ",", "\<\"ting\"\>", ",", "\<\"Ting\"\>", 
   ",", "\<\"tinging\"\>", ",", "\<\"tings\"\>", ",", "\<\"tining\"\>", 
   ",", "\<\"tins\"\>", ",", "\<\"Tisha\"\>", ",", "\<\"Titan\"\>", 
   ",", "\<\"Titans\"\>", ",", "\<\"Titian\"\>", ",", "\<\"TNT\"\>", 
   ",", "\<\"ts\"\>", ",", "\<\"TV\"\>", ",", "\<\"TVs\"\>", 
   ",", "\<\"vain\"\>", ",", "\<\"van\"\>", ",", "\<\"Van\"\>", 
   ",", "\<\"Vang\"\>", ",", "\<\"vanish\"\>", ",", "\<\"vanishing\"\>", 
   ",", "\<\"vans\"\>", ",", "\<\"vast\"\>", ",", "\<\"vat\"\>", 
   ",", "\<\"VAT\"\>", ",", "\<\"vats\"\>", ",", "\<\"VHS\"\>", 
   ",", "\<\"via\"\>", ",", "\<\"viking\"\>", ",", "\<\"Viking\"\>", 
   ",", "\<\"vikings\"\>", ",", "\<\"Vikings\"\>", ",", "\<\"vining\"\>", 
   ",", "\<\"visa\"\>", ",", "\<\"Visa\"\>", ",", "\<\"visaing\"\>", 
   ",", "\<\"vising\"\>", ",", "\<\"visit\"\>", ",", "\<\"vista\"\>", 
   ",", "\<\"vistaing\"\>", ",", "\<\"vita\"\>", ",", "\<\"Vivian\"\>", 
   ",", "\<\"vs\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.4657716402869997`*^9, 3.4658598491456003`*^9, 
  3.468597748572736*^9, 3.4685978717126217`*^9, 3.4700671862353573`*^9},
 CellLabel->"Out[120]="],

Cell[TextData[{
 "Using ",
 StyleBox["Tally[]", "Literal"],
 " to count letter occurrences and doing a bit of set manipulation, we can \
g",
 StyleBox["eneralize this for any word. The condition checking for the empty \
complement at the end is not strictly needed here because we will never match \
a word in the dictionary that has a ",
  FontTracking->"Plain"],
 "letter that is not in the input word. However, it is needed to make the \
logic if ",
 StyleBox["isWordSubsetQ[]", "Literal"],
 " is correct as a general predicate."
}], "Text",
 CellChangeTimes->{{3.470506874656713*^9, 3.4705069306251593`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"isWordSubsetQ", "[", 
   RowBox[{"word1_", ",", " ", "word2_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"tally1", "=", 
       RowBox[{"Tally", "[", 
        RowBox[{"Characters", "[", "word1", "]"}], "]"}]}], ",", " ", 
      RowBox[{"tally2", " ", "=", " ", 
       RowBox[{"Tally", "[", 
        RowBox[{"Characters", "[", "word2", "]"}], "]"}]}]}], "}"}], ",", " ", 
    RowBox[{
     RowBox[{"And", " ", "@@", " ", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#1", "[", 
            RowBox[{"[", "2", "]"}], "]"}], " ", "\[GreaterEqual]", " ", 
           RowBox[{"#2", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Intersection", "[", 
           RowBox[{"tally1", ",", " ", "tally2", ",", " ", 
            RowBox[{"SameTest", "\[Rule]", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"#1", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "===", " ", 
                RowBox[{"#2", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], " ", "&"}], ")"}]}]}], 
           "]"}], ",", " ", 
          RowBox[{"Intersection", "[", 
           RowBox[{"tally2", ",", " ", "tally1", ",", " ", 
            RowBox[{"SameTest", "\[Rule]", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"#1", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "===", " ", 
                RowBox[{"#2", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], " ", "&"}], ")"}]}]}], 
           "]"}]}], "}"}]}], "]"}]}], " ", "&&", " ", 
     RowBox[{
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Characters", "[", "word2", "]"}], ",", " ", 
        RowBox[{"Characters", "[", "word1", "]"}]}], "]"}], " ", "===", " ", 
      RowBox[{"{", "}"}]}]}]}], "]"}]}]], "Input",
 CellLabel->"In[121]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isWordSubsetQ", "[", 
  RowBox[{"\"\<thanksgiving\>\"", ",", "\"\<visa\>\""}], "]"}]], "Input",
 CellLabel->"In[122]:="],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4657716405522003`*^9, 3.4658598494386*^9, 
  3.468597750360899*^9, 3.468597871940592*^9, 3.470067186401119*^9},
 CellLabel->"Out[122]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isWordSubsetQ", "[", 
  RowBox[{"\"\<thanksgiving\>\"", ",", "\"\<pork\>\""}], "]"}]], "Input",
 CellLabel->"In[123]:="],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.465771640677*^9, 3.4658598496136*^9, 
  3.468597750411215*^9, 3.4685978719745903`*^9, 3.470067186445558*^9},
 CellLabel->"Out[123]="]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"anagrams", "[", "word_", "]"}], " ", ":=", " ", 
  RowBox[{"DictionaryLookup", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"w", ":", 
      RowBox[{
       RowBox[{"Characters", "[", "word", "]"}], ".."}]}], "/;", 
     RowBox[{"isWordSubsetQ", "[", 
      RowBox[{"word", ",", "w"}], "]"}]}], ",", " ", 
    RowBox[{"IgnoreCase", "\[Rule]", " ", "True"}]}], "]"}]}]], "Input",
 CellLabel->"In[124]:="],

Cell["You can test the generality against other words.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"anagrams", "[", "\"\<winter\>\"", "]"}]], "Input",
 CellLabel->"In[125]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"en\"\>", ",", "\<\"er\"\>", ",", "\<\"in\"\>", 
   ",", "\<\"inert\"\>", ",", "\<\"inter\"\>", ",", "\<\"ire\"\>", 
   ",", "\<\"it\"\>", ",", "\<\"net\"\>", ",", "\<\"new\"\>", 
   ",", "\<\"newt\"\>", ",", "\<\"nit\"\>", ",", "\<\"niter\"\>", 
   ",", "\<\"re\"\>", ",", "\<\"rein\"\>", ",", "\<\"rent\"\>", 
   ",", "\<\"rite\"\>", ",", "\<\"ten\"\>", ",", "\<\"tern\"\>", 
   ",", "\<\"ti\"\>", ",", "\<\"tie\"\>", ",", "\<\"tier\"\>", 
   ",", "\<\"tin\"\>", ",", "\<\"tine\"\>", ",", "\<\"tire\"\>", 
   ",", "\<\"twin\"\>", ",", "\<\"twine\"\>", ",", "\<\"twiner\"\>", 
   ",", "\<\"we\"\>", ",", "\<\"weir\"\>", ",", "\<\"wen\"\>", 
   ",", "\<\"went\"\>", ",", "\<\"wet\"\>", ",", "\<\"win\"\>", 
   ",", "\<\"wine\"\>", ",", "\<\"winter\"\>", ",", "\<\"wire\"\>", 
   ",", "\<\"wit\"\>", ",", "\<\"wren\"\>", ",", "\<\"writ\"\>", 
   ",", "\<\"write\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.4657716520806*^9, 3.4658598540536003`*^9, 
  3.468597753966733*^9, 3.4685978755348043`*^9, 3.47006718997787*^9},
 CellLabel->"Out[125]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"anagrams", "[", "\"\<dog\>\"", "]"}]], "Input",
 CellLabel->"In[126]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"do\"\>", ",", "\<\"dog\"\>", ",", "\<\"go\"\>", 
   ",", "\<\"god\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.4657716542802*^9, 3.4658598550076*^9, 
  3.468597754715736*^9, 3.468597876291504*^9, 3.470067190885344*^9},
 CellLabel->"Out[126]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Palindromes", "Heading3"],

Cell["\<\
Here is a neat little palindrome finder (courtesy of the Mathematica \
documentation).\
\>", "Text",
 CellChangeTimes->{{3.470506944187592*^9, 3.470506945303966*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DictionaryLookup", "[", 
  RowBox[{"x__", "/;", 
   RowBox[{"x", "===", 
    RowBox[{"StringReverse", "[", "x", "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[127]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"aha\"\>", ",", "\<\"aka\"\>", 
   ",", "\<\"bib\"\>", ",", "\<\"bob\"\>", ",", "\<\"boob\"\>", 
   ",", "\<\"bub\"\>", ",", "\<\"CFC\"\>", ",", "\<\"civic\"\>", 
   ",", "\<\"dad\"\>", ",", "\<\"deed\"\>", ",", "\<\"deified\"\>", 
   ",", "\<\"did\"\>", ",", "\<\"dud\"\>", ",", "\<\"DVD\"\>", 
   ",", "\<\"eke\"\>", ",", "\<\"ere\"\>", ",", "\<\"eve\"\>", 
   ",", "\<\"ewe\"\>", ",", "\<\"eye\"\>", ",", "\<\"gag\"\>", 
   ",", "\<\"gig\"\>", ",", "\<\"huh\"\>", ",", "\<\"I\"\>", 
   ",", "\<\"kayak\"\>", ",", "\<\"kook\"\>", ",", "\<\"level\"\>", 
   ",", "\<\"ma'am\"\>", ",", "\<\"madam\"\>", ",", "\<\"mam\"\>", 
   ",", "\<\"MGM\"\>", ",", "\<\"minim\"\>", ",", "\<\"mom\"\>", 
   ",", "\<\"mum\"\>", ",", "\<\"nan\"\>", ",", "\<\"non\"\>", 
   ",", "\<\"noon\"\>", ",", "\<\"nun\"\>", ",", "\<\"oho\"\>", 
   ",", "\<\"pap\"\>", ",", "\<\"peep\"\>", ",", "\<\"pep\"\>", 
   ",", "\<\"pip\"\>", ",", "\<\"poop\"\>", ",", "\<\"pop\"\>", 
   ",", "\<\"pup\"\>", ",", "\<\"radar\"\>", ",", "\<\"redder\"\>", 
   ",", "\<\"refer\"\>", ",", "\<\"repaper\"\>", ",", "\<\"reviver\"\>", 
   ",", "\<\"rotor\"\>", ",", "\<\"sagas\"\>", ",", "\<\"sees\"\>", 
   ",", "\<\"seres\"\>", ",", "\<\"sexes\"\>", ",", "\<\"shahs\"\>", 
   ",", "\<\"sis\"\>", ",", "\<\"solos\"\>", ",", "\<\"SOS\"\>", 
   ",", "\<\"stats\"\>", ",", "\<\"stets\"\>", ",", "\<\"tat\"\>", 
   ",", "\<\"tenet\"\>", ",", "\<\"TNT\"\>", ",", "\<\"toot\"\>", 
   ",", "\<\"tot\"\>", ",", "\<\"tut\"\>", ",", "\<\"wow\"\>", 
   ",", "\<\"WWW\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.4657716576654*^9, 3.4658598561406*^9, 
  3.468597755745749*^9, 3.468597877303462*^9, 3.47006719189869*^9},
 CellLabel->"Out[127]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Spell-checker", "Heading3",
 CellChangeTimes->{
  3.47050695808071*^9, {3.4755891393845243`*^9, 3.475589139761415*^9}}],

Cell[TextData[{
 "By using all the words in the dictionary with ",
 StyleBox["Nearest[]", "Literal"],
 ", you can create a rudimentary spell-checker. For our first attempt, we\
\[CloseCurlyQuote]ll use ",
 StyleBox["Nearest", "Literal"],
 "\[CloseCurlyQuote]s default distance function. We\[CloseCurlyQuote]ll \
return a list for which the first element is True or False depending on the \
word\[CloseCurlyQuote]s inclusion in the dictionary and the second element is \
a list of potential correct spellings. "
}], "Text",
 CellChangeTimes->{{3.470507383705041*^9, 3.470507423084156*^9}, {
  3.470507460641879*^9, 3.470507530897046*^9}, {3.4705167596887283`*^9, 
  3.470516766033041*^9}, {3.475589148705813*^9, 3.475589150036663*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"nf1", " ", "=", " ", 
   RowBox[{"Nearest", "[", 
    RowBox[{"DictionaryLookup", "[", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SpellCheck1", "[", "word_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"corrections", "=", " ", 
      RowBox[{"nf1", "[", 
       RowBox[{"word", ",", " ", "15"}], "]"}]}], "}"}], ",", "  ", 
    RowBox[{"If", "[", " ", 
     RowBox[{
      RowBox[{"MemberQ", "[", " ", 
       RowBox[{"corrections", ",", "word"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "word"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "corrections"}], "}"}]}], "]"}]}], 
   "]"}]}]}], "Input",
 CellLabel->"In[128]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SpellCheck1", "[", "\"\<pickel\>\"", "]"}]], "Input",
 CellLabel->"In[130]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"nickel\"\>", ",", "\<\"picked\"\>", ",", "\<\"picker\"\>", 
     ",", "\<\"picket\"\>", ",", "\<\"bicker\"\>", ",", "\<\"dicker\"\>", 
     ",", "\<\"dickey\"\>", ",", "\<\"hickey\"\>", ",", "\<\"kicked\"\>", 
     ",", "\<\"kicker\"\>", ",", "\<\"licked\"\>", ",", "\<\"Michel\"\>", 
     ",", "\<\"mickey\"\>", ",", "\<\"Mickey\"\>", ",", "\<\"nicked\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657716585546*^9, 3.4658598563876*^9, 
  3.468597755925362*^9, 3.4685978774595633`*^9, 3.4700671920776587`*^9},
 CellLabel->"Out[130]="]
}, Open  ]],

Cell[TextData[{
 "We see that the default distance function used for strings (",
 StyleBox["EditDistance", "Literal"],
 ") does not make the greatest spell-checker: the obvious suggestion of ",
 StyleBox["pickle", "Emphasis"],
 " is not among the ",
 StyleBox["first 15 nearest words. You can experiment with other distance \
functions. Here is one that penalizes more heavily for mistakes i",
  FontTracking->"Plain"],
 StyleBox["n consonants than for mistakes in vowels. ",
  FontTracking->"SemiCondensed"]
}], "Text",
 CellChangeTimes->{{3.47050766633167*^9, 3.470507708289571*^9}, {
   3.475589168126853*^9, 3.475589169882436*^9}, 3.475589214145897*^9, {
   3.4766159721565523`*^9, 3.4766159724012117`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SpellDistance", "[", 
    RowBox[{"a_", ",", " ", "b_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vowelpat", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "\"\<a\>\"", "|", "\"\<e\>\"", "|", "\"\<i\>\"", "|", "\"\<o\>\"", 
          " ", "|", " ", "\"\<u\>\""}], ")"}], "\[Rule]", "\"\<\>\""}]}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"EditDistance", "[", 
       RowBox[{"a", ",", "b"}], "]"}], " ", "+", " ", 
      RowBox[{"EditDistance", "[", 
       RowBox[{
        RowBox[{"StringReplace", "[", 
         RowBox[{"a", ",", "vowelpat"}], "]"}], ",", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"b", ",", "vowelpat"}], "]"}]}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"nf2", " ", "=", " ", 
    RowBox[{"Nearest", "[", 
     RowBox[{
      RowBox[{"DictionaryLookup", "[", "]"}], ",", 
      RowBox[{"DistanceFunction", "\[Rule]", "SpellDistance"}]}], "]"}]}], 
   ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SpellCheck2", "[", "word_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"corrections", "=", " ", 
      RowBox[{"nf2", "[", 
       RowBox[{"word", ",", " ", "10"}], "]"}]}], "}"}], ",", "  ", 
    RowBox[{"If", "[", " ", 
     RowBox[{
      RowBox[{"MemberQ", "[", " ", 
       RowBox[{"corrections", ",", "word"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "word"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "corrections"}], "}"}]}], "]"}]}], "]"}], 
  " "}]}], "Input",
 CellChangeTimes->{{3.470578948933549*^9, 3.4705789494374237`*^9}},
 CellLabel->"In[131]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SpellCheck2", "[", "\"\<pickel\>\"", "]"}]], "Input",
 CellLabel->"In[134]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"nickel\"\>", ",", "\<\"picked\"\>", ",", "\<\"picker\"\>", 
     ",", "\<\"picket\"\>", ",", "\<\"pickle\"\>", ",", "\<\"packed\"\>", 
     ",", "\<\"packer\"\>", ",", "\<\"packet\"\>", ",", "\<\"pecked\"\>", 
     ",", "\<\"pick\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657716650442*^9, 3.4658598596046*^9, 
  3.468597758201667*^9, 3.4685978797855167`*^9, 3.470067194375227*^9},
 CellLabel->"Out[134]="]
}, Open  ]],

Cell[TextData[{
 "Here we test on some commonly misspelled words (according to the Oxford \
Dictionaries website: ",
 StyleBox[ButtonBox["http://bit.ly/KuIQ2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/KuIQ2"], None},
  ButtonNote->"http://bit.ly/KuIQ2"], "URL"],
 ") ."
}], "Text",
 CellChangeTimes->{{3.470507733628364*^9, 3.470507783369631*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SpellCheck2", "[", "\"\<accomodate\>\"", "]"}], "  "}]], "Input",
 CellLabel->"In[135]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"accommodate\"\>", ",", "\<\"accommodated\"\>", 
     ",", "\<\"accommodates\"\>", ",", "\<\"accumulate\"\>", 
     ",", "\<\"accelerate\"\>", ",", "\<\"accentuate\"\>", 
     ",", "\<\"acclimate\"\>", ",", "\<\"accolade\"\>", 
     ",", "\<\"accommodation\"\>", ",", "\<\"accordant\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4657716718613997`*^9, 3.4658598620986*^9, 
  3.468597760716936*^9, 3.468597882278366*^9, 3.470067196844016*^9},
 CellLabel->"Out[135]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SpellCheck2", "[", "\"\<alcahol\>\"", "]"}]], "Input",
 CellLabel->"In[136]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"alcohol\"\>", ",", "\<\"alcohols\"\>", 
     ",", "\<\"alcoholic\"\>", ",", "\<\"achoo\"\>", ",", "\<\"ahchoo\"\>", 
     ",", "\<\"algal\"\>", ",", "\<\"anchor\"\>", ",", "\<\"carol\"\>", 
     ",", "\<\"lethal\"\>", ",", "\<\"local\"\>"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.4657716783198*^9, 3.4658598657696*^9, 
  3.46859776318451*^9, 3.468597884665471*^9, 3.4700671991915617`*^9},
 CellLabel->"Out[136]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SpellCheck2", "[", "\"\<mispell\>\"", "]"}]], "Input",
 CellLabel->"In[137]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"misspell\"\>", ",", "\<\"Aspell\"\>", ",", "\<\"Ispell\"\>", 
     ",", "\<\"miscall\"\>", ",", "\<\"respell\"\>", ",", "\<\"spell\"\>", 
     ",", "\<\"dispel\"\>", ",", "\<\"dispels\"\>", ",", "\<\"misdeal\"\>", 
     ",", "\<\"misplay\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657716847469997`*^9, 3.4658598688786*^9, 
  3.4685977655741863`*^9, 3.468597887051145*^9, 3.470067201524056*^9},
 CellLabel->"Out[137]="]
}, Open  ]],

Cell["\<\
This returns useful results, but performance (speed) is poor. \
\>", "Text",
 CellChangeTimes->{{3.47050783453859*^9, 3.470507840725852*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SpellCheck2", "[", "\"\<pickel\>\"", "]"}], " ", "//", 
  "Timing"}]], "Input",
 CellLabel->"In[138]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.2253339999999753`", ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"nickel\"\>", ",", "\<\"picked\"\>", ",", "\<\"picker\"\>", 
       ",", "\<\"picket\"\>", ",", "\<\"pickle\"\>", ",", "\<\"packed\"\>", 
       ",", "\<\"packer\"\>", ",", "\<\"packet\"\>", ",", "\<\"pecked\"\>", 
       ",", "\<\"pick\"\>"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657716911274*^9, 3.4658598711446*^9, 
  3.4685977679137077`*^9, 3.468597889402104*^9, 3.470067203837963*^9},
 CellLabel->"Out[138]="]
}, Open  ]],

Cell[TextData[{
 "We can improve the speed using a divide-and-conquer approach: pick a large \
but manageable number (e.g., 100) of nearest words according to simple ",
 StyleBox["EditDistance", "Literal"],
 ", and then do a s",
 StyleBox["econd pass on the smaller set with the ",
  FontTracking->"Plain"],
 StyleBox["EditDistance", "Literal",
  FontTracking->"Plain"],
 StyleBox[" sans vowels. We define a distance func",
  FontTracking->"Plain"],
 "tion called ",
 StyleBox["ConsonantDistance[]", "Literal"],
 " for the second pass."
}], "Text",
 CellChangeTimes->{{3.470507860596795*^9, 3.470507898263805*^9}, 
   3.4705079419040318`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConsonantDistance", "[", 
   RowBox[{"a_", ",", " ", "b_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"vowelpat", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
        "\"\<a\>\"", "|", "\"\<e\>\"", "|", "\"\<i\>\"", "|", "\"\<o\>\"", 
         " ", "|", " ", "\"\<u\>\""}], ")"}], "\[Rule]", "\"\<\>\""}]}], 
     "}"}], ",", 
    RowBox[{"EditDistance", "[", 
     RowBox[{
      RowBox[{"StringReplace", "[", 
       RowBox[{"a", ",", "vowelpat"}], "]"}], ",", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"b", ",", "vowelpat"}], "]"}]}], "]"}]}], "]"}], 
  " "}]], "Input",
 CellLabel->"In[139]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"SpellCheck3", "[", "word_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"corrections", ",", "corrections2", ",", "nf"}], "}"}], ",", 
    RowBox[{
     RowBox[{"corrections", "=", " ", 
      RowBox[{"nf1", "[", 
       RowBox[{"word", ",", " ", "100"}], "]"}]}], ";", " ", 
     RowBox[{"nf", "=", " ", 
      RowBox[{"Nearest", "[", 
       RowBox[{"corrections", ",", " ", 
        RowBox[{"DistanceFunction", "\[Rule]", " ", "ConsonantDistance"}]}], 
       "]"}]}], ";", " ", 
     RowBox[{"corrections2", "=", 
      RowBox[{"nf", "[", 
       RowBox[{"word", ",", "10"}], "]"}]}], ";", 
     RowBox[{"If", "[", " ", 
      RowBox[{
       RowBox[{"MemberQ", "[", " ", 
        RowBox[{"corrections2", ",", "word"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"True", ",", "word"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"False", ",", "corrections2"}], "}"}]}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[140]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SpellCheck3", "[", "\"\<pickel\>\"", "]"}], " ", "//", 
  "Timing"}]], "Input",
 CellLabel->"In[141]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0559729999999945`", ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"pickle\"\>", ",", "\<\"nickel\"\>", ",", "\<\"picked\"\>", 
       ",", "\<\"picker\"\>", ",", "\<\"picket\"\>", ",", "\<\"packed\"\>", 
       ",", "\<\"packer\"\>", ",", "\<\"packet\"\>", ",", "\<\"pecked\"\>", 
       ",", "\<\"pick\"\>"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657716914238*^9, 3.4658598713206*^9, 
  3.468597768081469*^9, 3.4685978896012774`*^9, 3.470067204028023*^9},
 CellLabel->"Out[141]="]
}, Open  ]],

Cell["Good results and about 43 times faster! ", "Text"]
}, Open  ]],

Cell[TextData[{
 "Mathematica also provides ",
 StyleBox["WordData[]", "Literal"],
 ", which returns information about properties of words, such as parts of \
speech and definitions. "
}], "Text",
 CellChangeTimes->{{3.470508129470821*^9, 3.470508151630916*^9}, {
  3.4705092878387527`*^9, 3.470509288533342*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WordData", "[", "\"\<run\>\"", "]"}]], "Input",
 CellLabel->"In[142]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Score\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Travel\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"RegularTrip\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"ShortTrip\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"FootballPlay\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Endeavor\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", 
     ",", "\<\"Successiveness\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Flow\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Damage\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Footrace\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Campaign\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Streak\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Stream\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", 
     ",", "\<\"IndefiniteQuantity\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"Liberty\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Noun\"\>", ",", "\<\"TimePeriod\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Disintegrate\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"SplitUp\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Dissolve\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Treat\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Change\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Get\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Vie\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Race\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Catch\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Draw\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Operate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Function\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"CarryThrough\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Play\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Circularize\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Trip\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"GoThrough\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Hurry\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", 
     ",", "\<\"TravelRapidly\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Sport\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Accompany\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Sail\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"SpreadOut\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Flow\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"GoAway\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Displace\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"MoveFreely\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Trade\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Loose\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Direct\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Succeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Implement\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Occur\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Continue\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Endure\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Extend\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"MakePass\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Lean\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Incur\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Go\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"run\"\>", ",", "\<\"Verb\"\>", ",", "\<\"Range\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657717467258*^9, 3.4658598714376*^9, 
  3.468597783506219*^9, 3.4685978897514677`*^9, 3.4700672317012653`*^9},
 CellLabel->"Out[142]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "Heading2", "TopOfPage"],

Cell[TextData[{
 "Readers interested in spell-checkers should check out this approach \
(written in Python) by Peter Norvig of Google: ",
 StyleBox[ButtonBox["http://bit.ly/19gyjN",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/19gyjN"], None},
  ButtonNote->"http://bit.ly/19gyjN"], "URL"],
 ". "
}], "Text",
 CellChangeTimes->{{3.470507971439905*^9, 3.4705079819778223`*^9}, {
  3.470508013769361*^9, 3.470508021533765*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]",
 "Importing XML "
}], "Heading1",
 CellTags->"XML"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["You want to import and manipulate XML data in Mathematica.", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Use ",
 StyleBox["Import[]", "Literal"],
 " with format ",
 StyleBox["\"XMLObject\"", "Literal"],
 " to import XML and convert it to a special Mathematica expression form. \
Consider the following XML in file",
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["data1.xml", "Emphasis",
  FontColor->GrayLevel[0]],
 StyleBox[" (available for download at the book\[CloseCurlyQuote]s website).",
  
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.470509313324847*^9, 3.470509343384061*^9}, {
  3.4755892541843777`*^9, 3.475589272742959*^9}}],

Cell["\<\
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!-- Some data to use as a test for Mathematica's XML import -->
<?test Just for didactic purposes?>
<data>
\t<item>
\t\t<name>Leonardo</name>
\t\t<sex>male</sex>
\t\t<age>8</age>
\t\t<height>4.7</height>
\t</item>
\t<item>
\t\t<name>Salvatore</name>
\t\t<sex>male</sex>
\t\t<age>5</age>
\t\t<height>4.1</height>
\t</item>
\t<item>
\t\t<name>Alexis</name>
\t\t<sex>female</sex>
\t\t<age>6</age>
\t\t<height>4.4</height>
\t</item>
</data>\
\>", "Code",
 CellChangeTimes->{3.470509485829578*^9},
 CellTags->"XML"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<..\>\"", ",", 
       "\"\<data\>\"", ",", "\"\<ch02\>\"", ",", "\"\<data1.xml\>\""}], "}"}],
      "]"}], ",", " ", "\"\<XMLObject\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{3.4658597131296*^9},
 CellLabel->"In[143]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
      RowBox[{
       RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
       RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
      "[", "\<\" Some data to use as a test for Mathematica's XML import \
\"\>", "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"ProcessingInstruction\"\>", "]"}], "[", 
      RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"data\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"8\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Salvatore\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"5\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.1\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Alexis\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"female\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"6\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.4\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
     "[", "\<\" Comment at end \"\>", "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.4657717470534*^9, 3.4658597183076*^9, 3.4658598714916*^9,
   3.4685977848482943`*^9, 3.468597889816654*^9, 3.470067232432372*^9},
 CellLabel->"Out[143]="]
}, Open  ]]
}, Open  ]],

Cell["Discussion", "Heading2"],

Cell[TextData[{
 StyleBox["Mathematica imports XML into expression form. You can manipulate \
the expression just like you would any other Mathematica expression, but \
first you need to understand the structure, which is a bit unconventional. \
Mathematica uses two types of heads to encode XML. ",
  FontTracking->"Extended"],
 StyleBox["XMLObject[\"", "Literal",
  FontTracking->"Extended"],
 StyleBox["type", "LiteralItalic",
  FontTracking->"Extended"],
 StyleBox["\"]", "Literal",
  FontTracking->"Extended"],
 StyleBox[" is used to represent everything that is not an element, ",
  FontTracking->"Extended"],
 StyleBox["\[InvisibleSpace]",
  FontSize->0,
  FontTracking->"Extended"],
 StyleBox["including the entire document (type = ",
  FontTracking->"Extended"],
 StyleBox["\"Document\"", "Literal",
  FontTracking->"Extended"],
 StyleBox["), comments (type = ",
  FontTracking->"Extended"],
 StyleBox["\"Comment\"", "Literal",
  FontTracking->"Extended"],
 StyleBox["), CDATA sections (type = ",
  FontTracking->"Extended"],
 StyleBox["\"CDATASection\"", "Literal",
  FontTracking->"Extended"],
 StyleBox["), processing instructions ",
  FontTracking->"Extended"],
 StyleBox["(type = ",
  FontTracking->"Plain"],
 StyleBox["\"ProcessingInstruction\"", "Literal",
  FontTracking->"Plain"],
 StyleBox[")",
  FontTracking->"Plain"],
 StyleBox[", declarations (type = ",
  FontTracking->"Extended"],
 StyleBox["\"Declaration\"", "Literal",
  FontTracking->"Extended"],
 StyleBox["), and ",
  FontTracking->"Extended"],
 StyleBox["documen",
  FontTracking->"SemiCondensed"],
 StyleBox["t ",
  FontTracking->"Plain"],
 StyleBox["types (type = ",
  FontTracking->"Extended"],
 StyleBox["\"Doctype\"", "Literal",
  FontTracking->"Extended"],
 StyleBox["). In the XML above",
  FontTracking->"Extended"],
 StyleBox[", ",
  FontTracking->"Plain"],
 StyleBox["you",
  FontTracking->"Extended"],
 StyleBox[" see examples for document, declaration, ",
  FontTracking->"Plain"],
 StyleBox["\[InvisibleSpace]",
  FontSize->0,
  FontTracking->"Plain"],
 StyleBox["comment, and processing instruction. ",
  FontTracking->"Plain"],
 StyleBox["XMLElement[tag,{attr1", "Literal",
  FontTracking->"Plain"],
 StyleBox["\[RightArrow]",
  FontTracking->"Plain"],
 StyleBox["val1,...},{data1,...}]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" is used to represent ",
  FontTracking->"Plain"],
 StyleBox["ele",
  FontTracking->"Extended"],
 StyleBox["ment data for both simple (text values)",
  FontTracking->"Plain"],
 StyleBox[" and complex element types (those with child",
  FontTracking->"Extended"],
 StyleBox[" elements). Don\[CloseCurlyQuote]t get tripped up by the ",
  FontTracking->"Plain"],
 StyleBox["XMLObject", "Literal",
  FontTracking->"Plain"],
 StyleBox[" notation. The entire syntax ",
  FontTracking->"Extended"],
 StyleBox["XM", "Literal",
  FontTracking->"Extended"],
 StyleBox["LObject[\"type\"]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" is the head of the expression, while the remainder is a sequence \
of one or more arguments that depends on the type.",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{
  3.4705095409651527`*^9, {3.470509724336781*^9, 3.470509753937777*^9}, {
   3.470509817070513*^9, 3.470509830886651*^9}, 3.4705167984118757`*^9, {
   3.470582014644311*^9, 3.47058203076221*^9}, {3.47058206650458*^9, 
   3.470582111148645*^9}, {3.470666864709568*^9, 3.470666873489523*^9}, {
   3.4710088847899437`*^9, 3.4710089016188583`*^9}, {3.471696375979743*^9, 
   3.4716963920434837`*^9}, {3.471696438723857*^9, 3.471696446467093*^9}, {
   3.47661664895022*^9, 3.476616650043003*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Head", "[", "data", "]"}], "//", "InputForm"}]], "Input",
 CellLabel->"In[144]:="],

Cell[TextData[StyleBox["XMLObject[\"Document\"]",
 FontFamily->"WriTheSansMonoCond BoldItalic"]], "Output",
 CellChangeTimes->{3.465771747225*^9, 3.4658598715165997`*^9, 
  3.468597784974839*^9, 3.468597889860384*^9, 3.470067232546483*^9},
 CellLabel->"Out[144]//InputForm="]
}, Open  ]],

Cell[TextData[{
 "The document version consists of three arguments: ",
 StyleBox["a list containing the declaration and pos",
  FontTracking->"Plain"],
 "sibly other objects, the document content, and a list of any objects (such \
as comments) that might appear past the last XML element. A very crude way to \
access structure is through ",
 StyleBox["Part[]", "Literal"],
 " or, equivalently, ",
 StyleBox["[[n]]", "Literal"],
 "."
}], "Text",
 CellChangeTimes->{{3.470509838545542*^9, 3.4705098603554497`*^9}, {
  3.470510189397567*^9, 3.4705102046654882`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellLabel->"In[145]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
    RowBox[{
     RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
     RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], ",", 
   RowBox[{
    RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
    "[", "\<\" Some data to use as a test for Mathematica's XML import \"\>", 
    "]"}], ",", 
   RowBox[{
    RowBox[{"XMLObject", "[", "\<\"ProcessingInstruction\"\>", "]"}], "[", 
    RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
    "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657717475058002`*^9, 3.4658598715396*^9, 
  3.468597785029379*^9, 3.468597889898549*^9, 3.470067232590404*^9},
 CellLabel->"Out[145]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellLabel->"In[146]:="],

Cell[BoxData[
 RowBox[{"XMLElement", "[", 
  RowBox[{"\<\"data\"\>", ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLElement", "[", 
      RowBox[{"\<\"item\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"name\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "]"}], ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"sex\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"age\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"8\"\>", "}"}]}], "]"}], ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"height\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
     
     RowBox[{"XMLElement", "[", 
      RowBox[{"\<\"item\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"name\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"Salvatore\"\>", "}"}]}], "]"}], ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"sex\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"age\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"5\"\>", "}"}]}], "]"}], ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"height\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"4.1\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
     
     RowBox[{"XMLElement", "[", 
      RowBox[{"\<\"item\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"name\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"Alexis\"\>", "}"}]}], "]"}], ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"sex\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"female\"\>", "}"}]}], "]"}], ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"age\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"6\"\>", "}"}]}], "]"}], ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\<\"height\"\>", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "\<\"4.4\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
    "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.4657717476306*^9, 3.4658598715526*^9, 
  3.4685977850797777`*^9, 3.468597889944779*^9, 3.470067232647807*^9},
 CellLabel->"Out[146]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", "3", "]"}], "]"}]], "Input",
 CellLabel->"In[147]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
   "[", "\<\" Comment at end \"\>", "]"}], "}"}]], "Output",
 CellChangeTimes->{3.4657717477553997`*^9, 3.4658598715656*^9, 
  3.468597785125287*^9, 3.468597889993969*^9, 3.470067232691155*^9},
 CellLabel->"Out[147]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{"[", "2", "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "The", " ", "tag", " ", "of", " ", "the", " ", "root", " ", "element"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{
  3.470510425433655*^9, {3.47661614695959*^9, 3.4766161473959084`*^9}},
 CellLabel->"In[148]:="],

Cell[BoxData["\<\"data\"\>"], "Output",
 CellChangeTimes->{3.4657717480674*^9, 3.4658598715786*^9, 
  3.468597785175001*^9, 3.4685978900310793`*^9, 3.4700672327280483`*^9},
 CellLabel->"Out[148]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"data", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "[", 
    RowBox[{"[", "3", "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"The", " ", "first", " ", "child"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.470510429039328*^9, 3.470510430959094*^9}, {
  3.47661615157228*^9, 3.476616151988154*^9}},
 CellLabel->"In[149]:="],

Cell[BoxData[
 RowBox[{"XMLElement", "[", 
  RowBox[{"\<\"item\"\>", ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLElement", "[", 
      RowBox[{"\<\"name\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "]"}], ",", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\<\"sex\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\<\"age\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"8\"\>", "}"}]}], "]"}], ",", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\<\"height\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}]], "Output",\

 CellChangeTimes->{3.4657717482078*^9, 3.4658598715926*^9, 
  3.468597785229801*^9, 3.468597890060554*^9, 3.470067232775653*^9},
 CellLabel->"Out[149]="]
}, Open  ]],

Cell[TextData[{
 "Pattern matching is much more elegant and more resilient to changes in \
document structure. Here we extract male elements using ",
 StyleBox["Cases", "Literal"],
 " with a pattern and an infinite ",
 StyleBox["level specification. This is roughly equivalent to ",
  FontTracking->"SemiCondensed"],
 StyleBox["using ",
  FontTracking->"Plain"],
 StyleBox["XPath", "Techical Italic",
  FontTracking->"Plain"],
 StyleBox[" in native XML processing.",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{{3.470510483291348*^9, 3.470510520238419*^9}, {
  3.471625956928392*^9, 3.471625957864642*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"data", ",", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"_", ",", "_", ",", " ", 
      RowBox[{"{", 
       RowBox[{"_", ",", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<sex\>\"", ",", " ", "_", ",", " ", 
          RowBox[{"{", "\"\<male\>\"", "}"}]}], "]"}], ",", " ", "___"}], 
       "}"}]}], "]"}], ",", " ", "Infinity"}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellLabel->"In[150]:="],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"XMLElement[item, {}, {XMLElement[name, {}, {Leonardo}], \
XMLElement[sex,\"","\"\\n\"",
        "\" {}, {male}], XMLElement[age, {}, {8}], XMLElement[height, {}, \
{4.7}]}]\""},
       "Row",
       DisplayFunction->(
        RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3}]& ),
       InterpretationFunction->(RowBox[{"Row", "[", 
          RowBox[{"{", 
            RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]},
     {
      TemplateBox[{
       "\"XMLElement[item, {}, {XMLElement[name, {}, {Salvatore}], \
XMLElement[sex,\"","\"\\n\"",
        "\" {}, {male}], XMLElement[age, {}, {5}], XMLElement[height, {}, \
{4.1}]}]\""},
       "Row",
       DisplayFunction->(
        RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3}]& ),
       InterpretationFunction->(RowBox[{"Row", "[", 
          RowBox[{"{", 
            RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->"Out[150]//TableForm="],

Cell[TextData[{
 StyleBox["Sometimes, the ",
  FontTracking->"Plain"],
 StyleBox["XMLObject", "Literal",
  FontTracking->"Plain"],
 StyleBox[" and ",
  FontTracking->"Plain"],
 StyleBox["XMLElement", "Literal",
  FontTracking->"Plain"],
 StyleBox[" notation can be a bit too heavy, and it is easier to work with \
simple nested lists. This can be done with ",
  FontTracking->"Plain"],
 StyleBox["Apply", "Literal",
  FontTracking->"Plain"],
 StyleBox[" plus ",
  FontTracking->"Plain"],
 StyleBox["List", "Literal",
  FontTracking->"Plain"],
 StyleBox[", specifying all levels.",
  FontTracking->"Plain"]
}], "Text", "ProductionPageBreak",
 CellChangeTimes->{{3.470510539762495*^9, 3.4705105608141613`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", " ", "=", " ", 
  RowBox[{"Apply", "[", 
   RowBox[{"List", ",", "data", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "Infinity"}], "}"}]}], "]"}], " "}]], "Input",
 CellLabel->"In[151]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\<\"Version\"\>", ",", "\<\"1.0\"\>"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\<\"Encoding\"\>", ",", "\<\"UTF-8\"\>"}], "}"}]}], "}"}], 
     ",", 
     RowBox[{
     "{", "\<\" Some data to use as a test for Mathematica's XML import \"\>",
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"data\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"8\"\>", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "}"}]}], "}"}]}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Salvatore\"\>", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"5\"\>", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.1\"\>", "}"}]}], "}"}]}], "}"}]}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Alexis\"\>", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"female\"\>", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"6\"\>", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.4\"\>", "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", "\<\" Comment at end \"\>", "}"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.4657717487382*^9, 3.4658598716296*^9, 3.4685977853267*^9,
   3.4685978901324663`*^9, 3.4700672329440203`*^9},
 CellLabel->"Out[151]="]
}, Open  ]],

Cell["This can shorten the patterns needed to extract content.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"list", ",", 
   RowBox[{"{", 
    RowBox[{"___", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<sex\>\"", ",", "_", ",", 
       RowBox[{"{", "\"\<male\>\"", "}"}]}], "}"}], ",", "___"}], "}"}], ",", 
   " ", "Infinity"}], "]"}]], "Input",
 CellLabel->"In[152]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"name\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"sex\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"male\"\>", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"age\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"8\"\>", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"height\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"name\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"Salvatore\"\>", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"sex\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"male\"\>", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"age\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"5\"\>", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"height\"\>", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\<\"4.1\"\>", "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.4657717488786*^9, 3.4658598716546*^9, 
  3.468597785382629*^9, 3.46859789017802*^9, 3.470067233126981*^9},
 CellLabel->"Out[152]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["Another useful transformation is to change all heads to the \
symbolic form of the ele",
  FontTracking->"Extended"],
 StyleBox["ment tag. Here we use",
  FontTracking->"Plain"],
 StyleBox[" ",
  FontTracking->"Plain"],
 StyleBox["//. ", "Literal",
  FontTracking->"Plain"],
 StyleBox["(",
  FontTracking->"Plain"],
 StyleBox["ReplaceAll", "Literal",
  FontTracking->"Plain"],
 StyleBox[") with rules that strip ",
  FontTracking->"Plain"],
 StyleBox["XMLObject", "Literal",
  FontTracking->"Plain"],
 StyleBox[" and convert ",
  FontTracking->"Plain"],
 StyleBox["XMLElement", "Literal",
  FontTracking->"Plain"],
 StyleBox[" expressions. I show the output in tree form to make it clear what \
this transformation does. ",
  FontTracking->"Plain"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "//.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"XMLObject", "[", "\"\<Document\>\"", "]"}], "[", 
       RowBox[{"_", ",", "content_", ",", "_"}], "]"}], " ", "\[RuleDelayed]",
       " ", "content"}], ",", 
     RowBox[{
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<data\>\"", ",", "attrs_", ",", " ", "content_"}], "]"}], 
      " ", "\[RuleDelayed]", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<items\>\"", ",", "attrs", ",", " ", "content"}], "]"}]}], 
     ",", " ", 
     RowBox[{
      RowBox[{"XMLElement", "[", 
       RowBox[{"tag_String", ",", " ", "_", ",", " ", 
        RowBox[{"{", "content___", "}"}]}], "]"}], " ", "\[RuleDelayed]", " ", 
      RowBox[{
       RowBox[{"Symbol", "[", "tag", "]"}], " ", "@@", " ", 
       RowBox[{"{", "content", "}"}]}]}]}], "}"}]}], "//", 
  RowBox[{
   RowBox[{"TreeForm", "[", 
    RowBox[{"#", ",", 
     RowBox[{"ImageSize", "\[Rule]", "600"}]}], "]"}], "&"}]}]], "Input",
 CellLabel->"In[153]:="],

Cell[BoxData[
 GraphicsBox[InsetBox[
   GraphicsBox[InsetBox[
     GraphicsBox[InsetBox[
       GraphicsBox[InsetBox[
         GraphicsBox[InsetBox[
           GraphicsBox[InsetBox[
             GraphicsBox[
              TagBox[GraphicsComplexBox[CompressedData["
1:eJwLyk9STGVgYGACYhkQ7cA1+WWCu/EM+z//ir6sOvzG/g2U/hzis1imaR4D
FNg/RuWjic+FycP4cPnPaPKf0eRh9sLkoXyYPNx9UPc4MKOaB+PD1XNoxp9+
vNgVLg/lw+V5UO2D8eHyAi8P8+345AWXh/Lh8mJfpBk33paGu0cYzT3CaO4R
3XfNvEHoI1weyofLS6C5VwLNvVJQ/8PkoXyYPABF5KEW
                "], {
                 {RGBColor[0.55, 0.45, 0.45], 
                  LineBox[{{1, 2}, {1, 11}, {1, 20}, {2, 3}, {2, 5}, {2, 7}, {
                   2, 9}, {3, 4}, {5, 6}, {7, 8}, {9, 10}, {11, 12}, {11, 
                   14}, {11, 16}, {11, 18}, {12, 13}, {14, 15}, {16, 17}, {18,
                    19}, {20, 21}, {20, 23}, {20, 25}, {20, 27}, {21, 22}, {
                   23, 24}, {25, 26}, {27, 28}}]}, {
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["items", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 1],
                    TagBox[
                    RowBox[{"items", "[", 
                    RowBox[{
                    RowBox[{"item", "[", 
                    RowBox[{
                    RowBox[{"name", "[", "\"Leonardo\"", "]"}], ",", 
                    RowBox[{"sex", "[", "\"male\"", "]"}], ",", 
                    RowBox[{"age", "[", "\"8\"", "]"}], ",", 
                    RowBox[{"height", "[", "\"4.7\"", "]"}]}], "]"}], ",", 
                    RowBox[{"item", "[", 
                    RowBox[{
                    RowBox[{"name", "[", "\"Salvatore\"", "]"}], ",", 
                    RowBox[{"sex", "[", "\"male\"", "]"}], ",", 
                    RowBox[{"age", "[", "\"5\"", "]"}], ",", 
                    RowBox[{"height", "[", "\"4.1\"", "]"}]}], "]"}], ",", 
                    RowBox[{"item", "[", 
                    RowBox[{
                    RowBox[{"name", "[", "\"Alexis\"", "]"}], ",", 
                    RowBox[{"sex", "[", "\"female\"", "]"}], ",", 
                    RowBox[{"age", "[", "\"6\"", "]"}], ",", 
                    RowBox[{"height", "[", "\"4.4\"", "]"}]}], "]"}]}], "]"}],
                     HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`items[
                    $CellContext`item[
                    $CellContext`name["Leonardo"], 
                    $CellContext`sex["male"], 
                    $CellContext`age["8"], 
                    $CellContext`height["4.7"]], 
                    $CellContext`item[
                    $CellContext`name["Salvatore"], 
                    $CellContext`sex["male"], 
                    $CellContext`age["5"], 
                    $CellContext`height["4.1"]], 
                    $CellContext`item[
                    $CellContext`name["Alexis"], 
                    $CellContext`sex["female"], 
                    $CellContext`age["6"], 
                    $CellContext`height["4.4"]]]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["item", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 2],
                    TagBox[
                    RowBox[{"item", "[", 
                    RowBox[{
                    RowBox[{"name", "[", "\"Leonardo\"", "]"}], ",", 
                    RowBox[{"sex", "[", "\"male\"", "]"}], ",", 
                    RowBox[{"age", "[", "\"8\"", "]"}], ",", 
                    RowBox[{"height", "[", "\"4.7\"", "]"}]}], "]"}], 
                    HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`item[
                    $CellContext`name["Leonardo"], 
                    $CellContext`sex["male"], 
                    $CellContext`age["8"], 
                    $CellContext`height["4.7"]]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["name", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 3],
                    TagBox[
                    RowBox[{"name", "[", "\"Leonardo\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`name["Leonardo"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"Leonardo\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 4],
                    TagBox["\"Leonardo\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["Leonardo"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["sex", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 5],
                    TagBox[
                    RowBox[{"sex", "[", "\"male\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`sex["male"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"male\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 6],
                    TagBox["\"male\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["male"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["age", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 7],
                    TagBox[
                    RowBox[{"age", "[", "\"8\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`age["8"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"8\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 8],
                    TagBox["\"8\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["8"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["height", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 9],
                    TagBox[
                    RowBox[{"height", "[", "\"4.7\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`height["4.7"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"4.7\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 10],
                    TagBox["\"4.7\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["4.7"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["item", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 11],
                    TagBox[
                    RowBox[{"item", "[", 
                    RowBox[{
                    RowBox[{"name", "[", "\"Salvatore\"", "]"}], ",", 
                    RowBox[{"sex", "[", "\"male\"", "]"}], ",", 
                    RowBox[{"age", "[", "\"5\"", "]"}], ",", 
                    RowBox[{"height", "[", "\"4.1\"", "]"}]}], "]"}], 
                    HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`item[
                    $CellContext`name["Salvatore"], 
                    $CellContext`sex["male"], 
                    $CellContext`age["5"], 
                    $CellContext`height["4.1"]]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["name", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 12],
                    TagBox[
                    RowBox[{"name", "[", "\"Salvatore\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`name["Salvatore"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"Salvatore\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 13],
                    TagBox["\"Salvatore\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["Salvatore"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["sex", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 14],
                    TagBox[
                    RowBox[{"sex", "[", "\"male\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`sex["male"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"male\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 15],
                    TagBox["\"male\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["male"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["age", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 16],
                    TagBox[
                    RowBox[{"age", "[", "\"5\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`age["5"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"5\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 17],
                    TagBox["\"5\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["5"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["height", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 18],
                    TagBox[
                    RowBox[{"height", "[", "\"4.1\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`height["4.1"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"4.1\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 19],
                    TagBox["\"4.1\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["4.1"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["item", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 20],
                    TagBox[
                    RowBox[{"item", "[", 
                    RowBox[{
                    RowBox[{"name", "[", "\"Alexis\"", "]"}], ",", 
                    RowBox[{"sex", "[", "\"female\"", "]"}], ",", 
                    RowBox[{"age", "[", "\"6\"", "]"}], ",", 
                    RowBox[{"height", "[", "\"4.4\"", "]"}]}], "]"}], 
                    HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`item[
                    $CellContext`name["Alexis"], 
                    $CellContext`sex["female"], 
                    $CellContext`age["6"], 
                    $CellContext`height["4.4"]]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["name", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 21],
                    TagBox[
                    RowBox[{"name", "[", "\"Alexis\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`name["Alexis"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"Alexis\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 22],
                    TagBox["\"Alexis\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["Alexis"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["sex", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 23],
                    TagBox[
                    RowBox[{"sex", "[", "\"female\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`sex["female"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"female\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 24],
                    TagBox["\"female\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["female"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["age", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 25],
                    TagBox[
                    RowBox[{"age", "[", "\"6\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`age["6"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"6\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 26],
                    TagBox["\"6\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["6"], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["height", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 27],
                    TagBox[
                    RowBox[{"height", "[", "\"4.4\"", "]"}], HoldForm]],
                   Annotation[#, 
                    HoldForm[
                    $CellContext`height["4.4"]], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"4.4\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.016326530612244896`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 28],
                    TagBox["\"4.4\"", HoldForm]],
                   Annotation[#, 
                    HoldForm["4.4"], "Tooltip"]& ]}}],
               Annotation[#, VertexCoordinateRules -> CompressedData["
1:eJwLyk9STGVgYGACYhkQ7cA1+WWCu/EM+z//ir6sOvzG/g2U/hzis1imaR4D
FNg/RuWjic+FycP4cPnPaPKf0eRh9sLkoXyYPNx9UPc4MKOaB+PD1XNoxp9+
vNgVLg/lw+V5UO2D8eHyAi8P8+345AWXh/Lh8mJfpBk33paGu0cYzT3CaO4R
3XfNvEHoI1weyofLS6C5VwLNvVJQ/8PkoXyYPABF5KEW
                 "]]& ],
              
              AspectRatio->NCache[
               Rational[2, 7] 2^Rational[1, 2], 0.4040610178208843],
              Background->None,
              FrameTicks->Automatic,
              ImageMargins->0.,
              ImageSize->600,
              PlotRange->All,
              PlotRangePadding->Scaled[0.1]], {5.684341886080802*^-14, 0.}, 
             ImageScaled[{0., 0.}], {598.0262628251377, 241.6391004407448},
             ContentSelectable->True],
            AspectRatio->0.40447130272019555`,
            Background->None,
            ContentSelectable->True,
            ImageMargins->0.,
            ImagePadding->0.,
            ImageSize->{599.3913760063293, 242.4366106925306},
            
            PlotRange->{{0.6066218873342857, 598.0262628251377}, {0., 
             241.6391004407448}},
            PlotRangePadding->None], {5.684341886080802*^-14, 0.}, 
           ImageScaled[{0., 0.}], {598.1515169950908, 241.68971076814236`},
           ContentSelectable->True],
          AspectRatio->0.40397640660456274`,
          Background->None,
          ContentSelectable->True,
          ImageMargins->0.,
          ImagePadding->0.,
          ImageSize->{600.1256675611817, 242.4366106925306},
          
          PlotRange->{{-0.12528040392983142`, 598.1515169950908}, {0., 
           241.68971076814236`}},
          PlotRangePadding->None], {0., 0.}, ImageScaled[{0., 0.}], {599.1412716693928, 242.08963204923384`},
         
         ContentSelectable->True],
        AspectRatio->0.40339352703031145`,
        Background->None,
        ContentSelectable->True,
        ImageMargins->0.,
        ImagePadding->0.,
        ImageSize->{600.9928133386078, 242.4366106925306},
        PlotRange->{{-0.991392410372989, 599.1412716693928}, {0., 
         242.08963204923384`}},
        PlotRangePadding->None], {5.684341886080802*^-14, 0.}, 
       ImageScaled[{0., 0.}], {600., 242.4366106925306},
       ContentSelectable->True],
      AspectRatio->0.40348272008205643`,
      Background->None,
      ContentSelectable->True,
      ImageMargins->0.,
      ImagePadding->0.,
      ImageSize->{600.8599591160339, 242.4366106925306},
      PlotRange->{{-0.8599591160339592, 600.}, {0., 242.4366106925306}},
      PlotRangePadding->None], {5.684341886080802*^-14, 0.}, 
     ImageScaled[{0., 0.}], {600., 242.4366106925306},
     ContentSelectable->True],
    AspectRatio->0.41090950964835693`,
    Background->None,
    ContentSelectable->True,
    ImageMargins->0.,
    ImagePadding->0.,
    ImageSize->{590., 242.4366106925306},
    PlotRange->{{10.000000000000032`, 600.}, {0., 242.4366106925306}},
    PlotRangePadding->None], {0., 0.}, ImageScaled[{0., 0.}], {600., 242.4366106925306},
   
   ContentSelectable->True],
  AspectRatio->0.41977777777777886`,
  Background->None,
  ContentSelectable->True,
  ImageMargins->{{0.9900990099009881, 0.}, {2.9702970297029054`, 
   5.595524044110789*^-14}},
  ImagePadding->0.,
  ImageSize->{311.88118811881185`, 130.92079207920824`},
  PlotRange->{{23.999999999999993`, 566.6899128268992}, {9.548633464854042, 
   237.73573193601138`}},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.4657717493622*^9, 3.4658598717356*^9, 
  3.468597785451694*^9, 3.4685978902483587`*^9, 3.470067233737067*^9},
 GraphicsBoxOptions->{BaseStyle->{Magnification -> 0.99}},
 CellLabel->"Out[153]//TreeForm="],

Cell[TextData[{
 StyleBox["When converting strings to symbols, you need to be cognizant of \
whether a symbol already exists and has a value. This bit me when I was \
preparing this recipe, because I failed to recognize that the top-level \
element tag name was ",
  FontTracking->"SemiCondensed"],
 StyleBox["\[OpenCurlyDoubleQuote]data,\[CloseCurlyDoubleQuote] which, of \
course, turned out to be the name of the variable that I was transforming. \
Infinite recursion! The solution was to include the",
  FontTracking->"Plain"],
 StyleBox[" ",
  FontTracking->"SemiCondensed"],
 StyleBox["transformation from ",
  FontTracking->"Plain"],
 StyleBox["XMLElement[\"data\", attrs_, content_]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" to",
  FontTracking->"Plain"],
 StyleBox[" ",
  FontTracking->"SemiCondensed"],
 StyleBox["XMLElement[\"items\", attrs, content]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" as the first transformation.",
  FontTracking->"Plain"]
}], "NoteWarning", "ProductionPageBreak",
 CellChangeTimes->{{3.4705107349096622`*^9, 3.47051085512136*^9}, {
   3.470516353638049*^9, 3.470516359634657*^9}, 3.4705780843034277`*^9, 
   3.470579453022264*^9}],

Cell[CellGroupData[{

Cell["See Also", "Heading2",
 CellMargins->{{0, 36}, {0, 12}}],

Cell[TextData[{
 StyleBox["Recipes ",
  FontTracking->"SemiCondensed"],
 StyleBox[ButtonBox["5.9",
  BaseStyle->"Hyperlink",
  ButtonData->"Transforming XML Using Rules"],
  FontTracking->"SemiCondensed"],
 StyleBox[" and ",
  FontTracking->"SemiCondensed"],
 StyleBox[ButtonBox["5.10",
  BaseStyle->"Hyperlink",
  ButtonData->"Transforming XML Using Recursion"],
  FontTracking->"SemiCondensed"],
 StyleBox[" show you how",
  FontTracking->"SemiCondensed"],
 StyleBox[" to transform imported XML into other structures.",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{{3.470510940523563*^9, 3.470510980940319*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]Transforming XML Using Patterns and Rules"
}], "Heading1",
 CellMargins->{{0, 72}, {2, 12}},
 CellChangeTimes->{3.470510991949554*^9},
 CellTags->"Transforming XML Using Rules"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["\<\
You want to transform imported XML into something more suitable to \
mathematical manipulation.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2",
 CellMargins->{{0, 36}, {0, 11}}],

Cell[TextData[{
 StyleBox["The format of imported XML is a bit heavy. You use pattern \
matching and",
  FontTracking->"Extended"],
 " ",
 StyleBox["ReplaceAll", "Literal",
  FontTracking->"Extended"],
 StyleBox[" to transform it into something more digestible. Here we take our \
row-oriented XML data into a simple matrix.",
  FontTracking->"Extended"]
}], "Text",
 CellChangeTimes->{{3.470511015262952*^9, 3.470511015691725*^9}, 
   3.470579475551968*^9, {3.471626145072914*^9, 3.4716261491608067`*^9}, 
   3.485522437728921*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<..\>\"", ",", 
        "\"\<data\>\"", ",", "\"\<ch02\>\"", ",", "\"\<data1.xml\>\""}], 
       "}"}], "]"}], ",", " ", "\"\<XMLObject\>\""}], "]"}]}], ";"}]], "Input",\

 CellMargins->{{53, 0}, {0, 3}},
 CellChangeTimes->{3.4658597345956*^9},
 CellLabel->"In[154]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{"data", " ", ",", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<item\>\"", ",", " ", "_", ",", " ", "_"}], "]"}], ",", 
       " ", "Infinity"}], "]"}], "  ", "/.", " ", 
     RowBox[{
      RowBox[{"XMLElement", "[", 
       RowBox[{"_", ",", "_", " ", ",", 
        RowBox[{"{", "val_", "}"}]}], "]"}], " ", "\[RuleDelayed]", " ", 
      "val"}]}], " ", "/.", " ", 
    RowBox[{
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<item\>\"", ",", "_", ",", "list_"}], "]"}], " ", 
     "\[RuleDelayed]", " ", "list"}]}], " ", "/.", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_", ",", " ", "s_", ",", " ", "age_", ",", " ", "ht_"}], "}"}],
     " ", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", " ", "s", ",", " ", 
      RowBox[{"ToExpression", "[", "age", "]"}], ",", " ", 
      RowBox[{"ToExpression", "[", "ht", "]"}]}], "}"}]}]}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->"In[155]:="],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\<\"Leonardo\"\>", "\<\"male\"\>", "\<\"8\"\>", "\<\"4.7\"\>"},
     {"\<\"Salvatore\"\>", "\<\"male\"\>", "\<\"5\"\>", "\<\"4.1\"\>"},
     {"\<\"Alexis\"\>", "\<\"female\"\>", "\<\"6\"\>", "\<\"4.4\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.4657717496586*^9, 3.4658597449076*^9, 3.4658598717836*^9,
   3.468597785525671*^9, 3.4685978903280153`*^9, 3.470067233910222*^9},
 CellLabel->"Out[155]//MatrixForm="]
}, Open  ]],

Cell[TextData[{
 StyleBox["This technique has two basic steps. First, you use ",
  FontTracking->"SemiCondensed"],
 StyleBox["Cases", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[" to extract the relevant elements. Second, you use a series of one \
or more transformations to massage the data into the form ",
  FontTracking->"SemiCondensed"],
 StyleBox["you want. In the first transformation, elements are taken to \
primitive values. Here you rely ",
  FontTracking->"Plain"],
 StyleBox["on the column position to determine when strings need conversion \
into numbers via ",
  FontTracking->"SemiCondensed"],
 StyleBox["ToExpression[]", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox[". The second",
  FontTracking->"SemiCondensed"],
 StyleBox[" transformation strips out the remaining ",
  FontTracking->"Plain"],
 StyleBox["XMLElement", "Literal",
  FontTracking->"Plain"],
 StyleBox[" con",
  FontTracking->"Plain"],
 StyleBox["tent. Until you have some experience with these types of \
transformations it is unlikely that ",
  FontTracking->"SemiCondensed"],
 StyleBox["you\[CloseCurlyQuote]ll whip them up off the top of your head. The \
final form of this transformation reflects the fact that I developed it in \
stages. Here are the successive refinements.",
  FontTracking->"Plain"]
}], "Text",
 CellMargins->{{0, 0}, {2, 2}},
 CellChangeTimes->{{3.470511050776997*^9, 3.470511145192811*^9}, 
   3.470516812492365*^9, 3.4705780886249533`*^9}],

Cell["Choose the relevant elements.", "Text", "ProductionPageBreak"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"data", " ", ",", " ", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<item\>\"", ",", " ", "_", ",", " ", "_"}], "]"}], ",", " ", 
   "Infinity"}], "]"}]], "Input",
 CellLabel->"In[156]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"item\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"name\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"sex\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"age\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"8\"\>", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"height\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"item\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"name\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"Salvatore\"\>", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"sex\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"age\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"5\"\>", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"height\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"4.1\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"item\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"name\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"Alexis\"\>", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"sex\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"female\"\>", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"age\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"6\"\>", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"height\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\<\"4.4\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4657717498302*^9, 3.4658598718076*^9, 
  3.4685977855591707`*^9, 3.468597890360918*^9, 3.4700672339581423`*^9},
 CellLabel->"Out[156]="]
}, Open  ]],

Cell["Strip out the data-level XML structure.", "Text",
 CellMargins->{{0, 0}, {2, 2}},
 CellChangeTimes->{3.4705111627500772`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"data", " ", ",", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<item\>\"", ",", " ", "_", ",", " ", "_"}], "]"}], ",", " ", 
    "Infinity"}], "]"}], "  ", "/.", " ", 
  RowBox[{
   RowBox[{"XMLElement", "[", 
    RowBox[{"_", ",", "_", " ", ",", 
     RowBox[{"{", "val_", "}"}]}], "]"}], " ", "\[RuleDelayed]", " ", 
   "val"}]}]], "Input",
 CellLabel->"In[157]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"item\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Leonardo\"\>", ",", "\<\"male\"\>", ",", "\<\"8\"\>", 
       ",", "\<\"4.7\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"item\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Salvatore\"\>", ",", "\<\"male\"\>", ",", "\<\"5\"\>", 
       ",", "\<\"4.1\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"item\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Alexis\"\>", ",", "\<\"female\"\>", ",", "\<\"6\"\>", 
       ",", "\<\"4.4\"\>"}], "}"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657717500174*^9, 3.4658598718326*^9, 
  3.468597785614315*^9, 3.4685978903987513`*^9, 3.470067234361714*^9},
 CellLabel->"Out[157]="]
}, Open  ]],

Cell["\<\
Strip out the row-level XML structure, leaving the data in matrix form but \
all the primitive values as strings.\
\>", "Text",
 CellMargins->{{0, 0}, {2, 2}},
 CellChangeTimes->{{3.4705111742621937`*^9, 3.470511188589675*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cases", "[", 
    RowBox[{"data", " ", ",", " ", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<item\>\"", ",", " ", "_", ",", " ", "_"}], "]"}], ",", " ",
      "Infinity"}], "]"}], "  ", "/.", " ", 
   RowBox[{
    RowBox[{"XMLElement", "[", 
     RowBox[{"_", ",", "_", " ", ",", 
      RowBox[{"{", "val_", "}"}]}], "]"}], " ", "\[RuleDelayed]", " ", 
    "val"}]}], " ", "/.", " ", 
  RowBox[{
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<item\>\"", ",", "_", ",", "list_"}], "]"}], " ", 
   "\[RuleDelayed]", " ", "list"}]}]], "Input",
 CellLabel->"In[158]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Leonardo\"\>", ",", "\<\"male\"\>", ",", "\<\"8\"\>", 
     ",", "\<\"4.7\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Salvatore\"\>", ",", "\<\"male\"\>", ",", "\<\"5\"\>", 
     ",", "\<\"4.1\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Alexis\"\>", ",", "\<\"female\"\>", ",", "\<\"6\"\>", 
     ",", "\<\"4.4\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657717502981997`*^9, 3.4658598718576*^9, 
  3.468597785660798*^9, 3.468597890444577*^9, 3.4700672343972893`*^9},
 CellLabel->"Out[158]="]
}, Open  ]],

Cell["Finally, do the type conversion.", "Text",
 CellMargins->{{0, 0}, {2, 2}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Cases", "[", 
     RowBox[{"data", " ", ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<item\>\"", ",", " ", "_", ",", " ", "_"}], "]"}], ",", 
      " ", "Infinity"}], "]"}], "  ", "/.", " ", 
    RowBox[{
     RowBox[{"XMLElement", "[", 
      RowBox[{"_", ",", "_", " ", ",", 
       RowBox[{"{", "val_", "}"}]}], "]"}], " ", "\[RuleDelayed]", " ", 
     "val"}]}], " ", "/.", " ", 
   RowBox[{
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<item\>\"", ",", "_", ",", "list_"}], "]"}], " ", 
    "\[RuleDelayed]", " ", "list"}]}], " ", "/.", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n_", ",", " ", "s_", ",", " ", "age_", ",", " ", "ht_"}], "}"}], 
   " ", "\[Rule]", " ", 
   RowBox[{"{", 
    RowBox[{"n", ",", " ", "s", ",", " ", 
     RowBox[{"ToExpression", "[", "age", "]"}], ",", " ", 
     RowBox[{"ToExpression", "[", "ht", "]"}]}], "}"}]}]}]], "Input",
 CellLabel->"In[159]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Leonardo\"\>", ",", "\<\"male\"\>", ",", "\<\"8\"\>", 
     ",", "\<\"4.7\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Salvatore\"\>", ",", "\<\"male\"\>", ",", "\<\"5\"\>", 
     ",", "\<\"4.1\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Alexis\"\>", ",", "\<\"female\"\>", ",", "\<\"6\"\>", 
     ",", "\<\"4.4\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4657717504854*^9, 3.4658598718816*^9, 
  3.468597785709642*^9, 3.4685978905436993`*^9, 3.4700672344432793`*^9},
 CellLabel->"Out[159]="]
}, Open  ]]
}, Open  ]],

Cell["Discussion", "Heading2",
 CellMargins->{{0, 36}, {0, 11}}],

Cell[TextData[{
 "There are always many ways to solve the same transformation problem. The \
trade-offs involve brevity, clarity, generality, and performance. The \
solution has clarity, because it accomplishes the transformation in a \
step-by-step fashion. However, it is neither brief nor very general. The \
following transformation does the same thing but is more general. It will \
work on any two-level XML document because it does not match on specific \
element names (like ",
 StyleBox["\"item\"", "Literal"],
 "). It also does not hardcode which columns contain numeric data. However, \
it is a bit more cryptic because it does not mention ",
 StyleBox["XMLElement", "Literal"],
 " at all. Rather, i",
 StyleBox["t immediately converts t",
  FontTracking->"Plain"],
 StyleBox["he data to a list (using ",
  FontTracking->"Extended"],
 StyleBox["Ap", "Literal",
  FontTracking->"Extended"],
 StyleBox["ply", "Literal"],
 " with head ",
 StyleBox["List", "Literal"],
 "), and it uses ",
 StyleBox["[[n]]", "Literal"],
 " to pick out the relevant items."
}], "Text",
 CellChangeTimes->{{3.470511207143716*^9, 3.470511337252656*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"toMatrix", "[", "xml_", "]"}], " ", ":=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"List", ",", 
       RowBox[{"xml", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "Infinity"}], "}"}]}], "]"}], "[", 
     RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"_", ",", " ", 
       RowBox[{"{", "}"}], ",", " ", "row_"}], "}"}], " ", "\[RuleDelayed]", 
     " ", "row"}]}], "  ", "/.", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", " ", 
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{"{", "val_", "}"}]}], "}"}], " ", "\[RuleDelayed]", " ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"val", ",", "NumberString"}], "]"}], ",", 
      RowBox[{"ToExpression", "[", "val", "]"}], ",", "val"}], 
     "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toMatrix", "[", "data", "]"}], "//", "MatrixForm"}]}], "Input",
 CellLabel->"In[160]:="],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\<\"Leonardo\"\>", "\<\"male\"\>", "8", "4.7`"},
     {"\<\"Salvatore\"\>", "\<\"male\"\>", "5", "4.1`"},
     {"\<\"Alexis\"\>", "\<\"female\"\>", "6", "4.4`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.4657717507194*^9, 3.4658598235746*^9, 3.4658598719056*^9,
   3.468597785764659*^9, 3.4685978905779057`*^9, 3.470067234509495*^9},
 CellLabel->"Out[161]//MatrixForm="]
}, Open  ]],

Cell["\<\
I demonstrate the generality by processing an XML file with a different \
number of rows, columns, and data types. \
\>", "Text",
 CellChangeTimes->{{3.470511353108714*^9, 3.4705113633535748`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"toMatrix", "[", 
   RowBox[{"Import", "[", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<..\>\"", ",", 
        "\"\<data\>\"", ",", "\"\<ch02\>\"", ",", "\"\<data2.xml\>\""}], 
       "}"}], "]"}], ",", " ", "\"\<XMLObject\>\""}], "]"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.4658598146616*^9, 3.4658598178336*^9}},
 CellLabel->"In[162]:="],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1.`", "88.33`", "8", "1000", "4.7`"},
     {"2.`", "99.66`", "5", "1001", "4.1`"},
     {"3.`", "89.7`", "6", "1002", "4.4`"},
     {"1.5`", "99.7`", "6", "1008", "4.45`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.4657717509222*^9, 3.4658598184996*^9, 3.4658598719556*^9,
   3.4685977858424788`*^9, 3.4685978906372013`*^9, 3.470067234602544*^9},
 CellLabel->"Out[162]//MatrixForm="]
}, Open  ]],

Cell["XML-to-XML transformations", "Heading3",
 CellChangeTimes->{{3.4705113766577883`*^9, 3.470511377867867*^9}, 
   3.4755895251674633`*^9}],

Cell[TextData[{
 "You may find that you need to transform XML for reasons other than using \
the data in Mathematica. Unless you already know a language specifically \
designed for this ",
 StyleBox["purpose (",
  FontTracking->"SemiCondensed"],
 StyleBox["like XSLT), Mathematica is a good choice. Mathematica\
\[CloseCurlyQuote]s pattern-matching capa",
  FontTracking->"Plain"],
 "bilities are well suited to many types of XML transformations. Consider the \
problem of converting elements to attributes. "
}], "Text",
 CellChangeTimes->{{3.4705113843073177`*^9, 3.4705114118876123`*^9}, 
   3.470516815971347*^9, 3.470578095311427*^9, {3.470587187078782*^9, 
   3.470587191339837*^9}, 3.471008943458293*^9, {3.471009085061493*^9, 
   3.471009087385766*^9}, {3.471010372253868*^9, 3.4710103820512533`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataUsingAttr", " ", "=", " ", 
  RowBox[{"data", " ", "/.", " ", 
   RowBox[{
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<item\>\"", ",", " ", 
      RowBox[{"{", "}"}], ",", " ", "childElements_"}], "]"}], " ", ":>", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<item\>\"", ",", " ", 
      RowBox[{"childElements", " ", "/.", " ", 
       RowBox[{
        RowBox[{"XMLElement", "[", 
         RowBox[{"tag_", ",", " ", "_", ",", " ", 
          RowBox[{"{", "val_", "}"}]}], "]"}], " ", ":>", " ", 
        RowBox[{"Rule", "[", 
         RowBox[{"tag", ",", "val"}], "]"}]}]}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}]}]}]], "Input",
 CellLabel->"In[163]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
      RowBox[{
       RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
       RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
      "[", "\<\" Some data to use as a test for Mathematica's XML import \
\"\>", "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"ProcessingInstruction\"\>", "]"}], "[", 
      RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"data\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Leonardo\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"age\"\>", "\[Rule]", "\<\"8\"\>"}], ",", 
           RowBox[{"\<\"height\"\>", "\[Rule]", "\<\"4.7\"\>"}]}], "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Salvatore\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"age\"\>", "\[Rule]", "\<\"5\"\>"}], ",", 
           RowBox[{"\<\"height\"\>", "\[Rule]", "\<\"4.1\"\>"}]}], "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Alexis\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"age\"\>", "\[Rule]", "\<\"6\"\>"}], ",", 
           RowBox[{"\<\"height\"\>", "\[Rule]", "\<\"4.4\"\>"}]}], "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
     "[", "\<\" Comment at end \"\>", "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.465771751125*^9, 3.4658598719806004`*^9, 
  3.468597785876837*^9, 3.4685978906785*^9, 3.470067234645722*^9},
 CellLabel->"Out[163]="]
}, Open  ]],

Cell[TextData[{
 "It is a bit easier to see how this worked by converting back to XML text. \
The stripping of carriage returns (",
 StyleBox["\\r", "Literal"],
 ") is only for formatting purposes."
}], "Text",
 CellChangeTimes->{{3.470511449524744*^9, 3.470511459842864*^9}}],

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{
   RowBox[{"ExportString", "[", 
    RowBox[{"dataUsingAttr", ",", " ", "\"\<XML\>\""}], "]"}], ",", " ", 
   RowBox[{"\"\<\\r\>\"", " ", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]], "Input",\

 CellLabel->"In[164]:="],

Cell[BoxData["\<\"<?xml version='1.0' encoding='UTF-8'?>\\n<!-- Some data to \
uses as a test for Mathematica's XML import -->\\n<?test Just for didactic \
purposes?>\\n<data>\\n <item name='Leonardo'\\n     sex='male'\\n     age='8'\
\\n     height='4.7' />\\n <item name='Salvatore'\\n     sex='male'\\n     \
age='5'\\n     height='4.1' />\\n <item name='Alexis'\\n     sex='female'\\n  \
    age='6'\\n     height='4.4' />\\n</data>\\n<!-- Comment at end \
-->\\n\"\>"], "Output",
 CellChangeTimes->{3.4657717514681997`*^9, 3.4658598720095997`*^9, 
  3.468597786019287*^9, 3.4685978907115*^9, 3.4700672348329067`*^9},
 CellLabel->"Out[164]="],

Cell[TextData[{
 "A transformation from attributes to elements follows similar lines. The use \
of ",
 StyleBox["Join[]", "Literal"],
 " here is not strictly necessary, but it shows you how to handle cases in \
which you don\[CloseCurlyQuote]t want to lose preexisting child elements at \
the point where you are injecting attribute content."
}], "Text",
 CellChangeTimes->{{3.470511507643713*^9, 3.470511544137526*^9}, 
   3.470516835931774*^9}],

Cell[BoxData[
 RowBox[{"dataUsingElems", " ", "=", 
  RowBox[{"dataUsingAttr", " ", "/.", " ", 
   RowBox[{
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<item\>\"", ",", " ", "attrs_", ",", " ", "childElements_"}],
      "]"}], " ", "\[RuleDelayed]", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<item\>\"", ",", " ", 
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{"Join", "[", 
       RowBox[{"childElements", ",", " ", 
        RowBox[{"attrs", " ", "/.", " ", 
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{"tag_", ",", "val_"}], "]"}], " ", "\[RuleDelayed]", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"tag", ",", 
            RowBox[{"{", "}"}], ",", " ", 
            RowBox[{"{", "val", "}"}]}], "]"}]}]}]}], "]"}]}], 
     "]"}]}]}]}]], "Input",
 CellLabel->"In[165]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
      RowBox[{
       RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
       RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
      "[", "\<\" Some data to use as a test for Mathematica's XML import \
\"\>", "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"ProcessingInstruction\"\>", "]"}], "[", 
      RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"data\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"8\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Salvatore\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"5\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.1\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Alexis\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"female\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"6\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.4\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
     "[", "\<\" Comment at end \"\>", "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.4657717515150003`*^9, 3.4658598720346003`*^9, 
  3.468597786060906*^9, 3.468597890749291*^9, 3.47006723489389*^9},
 CellLabel->"Out[165]="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{
   RowBox[{"ExportString", "[", 
    RowBox[{"dataUsingElems", ",", " ", "\"\<XML\>\""}], "]"}], ",", " ", 
   RowBox[{"\"\<\\r\>\"", " ", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]], "Input",\

 CellLabel->"In[166]:="],

Cell[BoxData["\<\"<?xml version='1.0' encoding='UTF-8'?>\\n<!-- Some data to \
use as a test for Mathematica's XML import -->\\n<?test Just for didactic \
purposes?>\\n<data>\\n <item>\\n  <name>Leonardo</name>\\n  \
<sex>male</sex>\\n  <age>8</age>\\n  <height>4.7</height>\\n </item>\\n \
<item>\\n  <name>Salvatore</name>\\n  <sex>male</sex>\\n  <age>5</age>\\n  \
<height>4.1</height>\\n </item>\\n <item>\\n  <name>Alexis</name>\\n  \
<sex>female</sex>\\n  <age>6</age>\\n  <height>4.4</height>\\n \
</item>\\n</data>\\n<!-- Comment at end -->\\n\"\>"], "Output",
 CellChangeTimes->{3.4657717516085997`*^9, 3.4658598720646*^9, 
  3.46859778611101*^9, 3.4685978907944202`*^9, 3.470067234928533*^9},
 CellLabel->"Out[166]="]
}, Open  ]],

Cell["See Also", "Heading2",
 CellMargins->{{0, 36}, {0, -2}}],

Cell[TextData[{
 "See the tutorial ",
 StyleBox[ButtonBox["XML/tutorial/TransformingXML",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/XML/tutorial/\
TransformingXML.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/XML/tutorial/TransformingXML.\
html"], "URL"],
 " in the Mathematica documentation (also at ",
 StyleBox[ButtonBox["http://bit.ly/4tS1Ce",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/4tS1Ce"], None},
  ButtonNote->"http://bit.ly/4tS1Ce"], "URL"],
 ")."
}], "Text",
 CellChangeTimes->{{3.470511752518691*^9, 3.470511753330401*^9}, {
  3.470511855590723*^9, 3.470511855598257*^9}, {3.470511898584804*^9, 
  3.470511908197702*^9}}],

Cell[TextData[{
 ButtonBox["Recipe 5.10",
  BaseStyle->"Hyperlink",
  ButtonData->"Transforming XML Using Recursion"],
 " shows alternate techniques for XML transformation."
}], "Text",
 CellChangeTimes->{{3.4705119864329987`*^9, 3.4705120146132603`*^9}, {
  3.4705121902991734`*^9, 3.4705122131977367`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive Functions (",
 "\[AGrave]",
 " la XSLT)"
}], "Heading1",
 CellChangeTimes->{{3.4705122683598003`*^9, 3.470512273885315*^9}, 
   3.470587312506523*^9, 3.471009445321418*^9},
 CellTags->"Transforming XML Using Recursion"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell[TextData[{
 "The pure pattern-based approach ",
 StyleBox["of ",
  FontColor->GrayLevel[0]],
 ButtonBox["Recipe 5.9",
  BaseStyle->"Hyperlink",
  ButtonData->"Transforming XML Using Rules"],
 " is too awkward, cryptic, or complex for your particular transformation \
problem."
}], "Text",
 CellChangeTimes->{{3.470512314456347*^9, 3.4705123213784857`*^9}, {
  3.471626216990192*^9, 3.471626217483534*^9}, {3.471626256833211*^9, 
  3.471626256866446*^9}}]
}, Open  ]],

Cell["Solution", "Heading2"],

Cell[TextData[{
 "Consider using an approach inspired by Extensible Stylesheet Language \
Transforms (XSLT). XSLT is a language that is specifically designed to \
transform XML. There are some rough similarities between XSLT and a style of \
Mathematica programming that exploits functions, patterns, and recursion. \
Here is how you use Mathematica to process XML in ways similar to XSLT. \
Consider the ",
 ButtonBox["Recipe 5.9",
  BaseStyle->"Hyperlink",
  ButtonData->"Transforming XML Using Rules"],
 " transformation of elements to attributes. Rather than rely on replacement, \
we use a set of mutually recursive functions with patterns to navigate the \
XML tree while surgically inserting transformations at the correct places. "
}], "Text",
 CellChangeTimes->{{3.470512956945063*^9, 3.470512966124346*^9}, 
   3.4705130019320374`*^9, {3.4705130364730988`*^9, 3.47051308553546*^9}, {
   3.471626283943305*^9, 3.471626286448329*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<..\>\"", ",", 
       "\"\<data\>\"", ",", "\"\<ch02\>\"", ",", "\"\<data1.xml\>\""}], "}"}],
      "]"}], ",", " ", "\"\<XMLObject\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{3.4658597721846*^9},
 CellLabel->"In[167]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
      RowBox[{
       RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
       RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
      "[", "\<\" Some data to use as a test for Mathematica's XML import \
\"\>", "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"ProcessingInstruction\"\>", "]"}], "[", 
      RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"data\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"8\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Salvatore\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"5\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.1\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Alexis\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"sex\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"female\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"6\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.4\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
     "[", "\<\" Comment at end \"\>", "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.465771751671*^9, 3.4658597752576*^9, 3.4658598721166*^9, 
  3.468597786190054*^9, 3.468597890866527*^9, 3.470067235008219*^9},
 CellLabel->"Out[167]="]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "transform", "]"}], "\n", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{
    RowBox[{"XMLObject", "[", "\"\<Document\>\"", "]"}], "[", 
    RowBox[{"decl_", ",", "content_", ",", "rest_"}], "]"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"XMLObject", "[", "type", "]"}], "[", 
     RowBox[{"decl", ",", " ", 
      RowBox[{"transform", "[", "content", "]"}], ",", "rest"}], "]"}]}], " ",
    "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{
    RowBox[{"XMLObject", "[", "type_", "]"}], "[", "args___", "]"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"XMLObject", "[", "type", "]"}], "[", "args", " ", "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<item\>\"", ",", "_", ",", " ", "elements__"}], "]"}], " ", 
   "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<item\>\"", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"asAttribute", "[", "#", "]"}], "&"}], " ", "/@", " ", 
       "elements"}], ",", " ", 
      RowBox[{"{", "}"}]}], "]"}]}], " ", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"tag_String", ",", " ", "attrs_List", ",", " ", "child_List"}], 
    "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"tag", ",", " ", "attrs", ",", " ", 
      RowBox[{"transform", "[", "child", "]"}]}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", "list_List", "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"transform", "[", "#", "]"}], "&"}], " ", "/@", " ", "list"}]}],
    "  ", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"asAttribute", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"tag_", ",", " ", 
     RowBox[{"{", "}"}], ",", " ", 
     RowBox[{"{", "val_", "}"}]}], "]"}], "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"Rule", "[", 
     RowBox[{"tag", ",", "val"}], "]"}]}], " ", "]"}]}]}], "Input",
 CellLabel->"In[168]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transform", "[", "data", "]"}]], "Input",
 CellLabel->"In[175]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "type", "]"}], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
      RowBox[{
       RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
       RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
      "[", "\<\" Some data to use as a test for Mathematica's XML import \
\"\>", "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"ProcessingInstruction\"\>", "]"}], "[", 
      RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"data\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Leonardo\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"age\"\>", "\[Rule]", "\<\"8\"\>"}], ",", 
           RowBox[{"\<\"height\"\>", "\[Rule]", "\<\"4.7\"\>"}]}], "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Salvatore\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"age\"\>", "\[Rule]", "\<\"5\"\>"}], ",", 
           RowBox[{"\<\"height\"\>", "\[Rule]", "\<\"4.1\"\>"}]}], "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Alexis\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"age\"\>", "\[Rule]", "\<\"6\"\>"}], ",", 
           RowBox[{"\<\"height\"\>", "\[Rule]", "\<\"4.4\"\>"}]}], "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
     "[", "\<\" Comment at end \"\>", "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.4657717518894*^9, 3.4658598721466*^9, 
  3.468597786242387*^9, 3.4685978909452143`*^9, 3.470067235145794*^9},
 CellLabel->"Out[175]="]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "A natural objection to using this style of transformation rather than using \
replacement rules is that it is more verbose. This verbosity comes with some \
advantages. The first advantage is that when things go wrong, it is generally \
easier to debug a set of discrete functions than a replacement pattern. Most \
of the action of a replacement pattern is happening under the covers. The \
second advantage comes in cases where you need to make many changes at \
different levels in the XML hierarchy. Here the overhead of the recursive \
approach is less bothersome. We implement a transformation that changes \
elements to attributes, renames the ",
 StyleBox["\"item\"", "Literal"],
 " element to ",
 StyleBox["\"row\"", "Literal"],
 ",",
 StyleBox[" ", "Literal"],
 "changes ",
 StyleBox["\"sex\"", "Literal"],
 " to ",
 StyleBox["\"gender\"", "Literal"],
 ", and converts the height from feet to meters\[LongDash]all with very \
little extra overhead."
}], "Text",
 CellChangeTimes->{{3.470513138103593*^9, 3.470513222704771*^9}, {
  3.470513267987494*^9, 3.470513294246023*^9}, {3.471626366132874*^9, 
  3.471626391143961*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "transform", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{
    RowBox[{"XMLObject", "[", "\"\<Document\>\"", "]"}], "[", 
    RowBox[{"decl_", ",", "content_", ",", "rest_"}], "]"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\"\<Document\>\"", "]"}], "[", 
     RowBox[{"decl", ",", " ", 
      RowBox[{"transform", "[", "content", "]"}], ",", "rest"}], "]"}]}], " ",
    "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{
    RowBox[{"XMLObject", "[", "type_", "]"}], "[", "args___", "]"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"XMLObject", "[", "type", "]"}], "[", "args", " ", "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<item\>\"", ",", "_", ",", " ", "elements__"}], "]"}], " ", 
   "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<row\>\"", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"asAttribute", "[", "#", "]"}], "&"}], " ", "/@", " ", 
       "elements"}], ",", " ", 
      RowBox[{"{", "}"}]}], "]"}]}], " ", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", "list_List", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"transform", "[", "#", "]"}], "&"}], " ", "/@", " ", "list"}]}],
    " ", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"tag_String", ",", " ", "attrs_List", ",", " ", "child_List"}], 
    "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"tag", ",", " ", "attrs", ",", " ", 
      RowBox[{"transform", "[", "child", "]"}]}], "]"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"asAttribute", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<sex\>\"", ",", " ", 
     RowBox[{"{", "}"}], ",", " ", 
     RowBox[{"{", "val_", "}"}]}], "]"}], "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"Rule", "[", 
     RowBox[{"\"\<gender\>\"", ",", "val"}], "]"}]}], " ", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"asAttribute", "[", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<height\>\"", ",", " ", 
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{"{", "val_", "}"}]}], "]"}], "]"}], " ", ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", " ", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<height\>\"", ",", 
       RowBox[{"ToString", "[", 
        RowBox[{"0.3048", "*", " ", 
         RowBox[{"ToExpression", "[", "val", "]"}]}], "]"}]}], "]"}]}], " ", 
    "]"}]}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"asAttribute", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"tag_", ",", " ", 
     RowBox[{"{", "}"}], ",", " ", 
     RowBox[{"{", "val_", "}"}]}], "]"}], "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"Rule", "[", 
     RowBox[{"tag", ",", "val"}], "]"}]}], " ", "]"}]}]}], "Input",
 CellLabel->"In[176]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data2", " ", "=", " ", 
  RowBox[{"transform", "[", "data", "]"}]}]], "Input",
 CellLabel->"In[185]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
      RowBox[{
       RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
       RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
      "[", "\<\" Some data to use as a test for Mathematica's XML import \
\"\>", "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"ProcessingInstruction\"\>", "]"}], "[", 
      RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"data\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"row\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Leonardo\"\>"}], ",", 
           RowBox[{"\<\"gender\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"age\"\>", "\[Rule]", "\<\"8\"\>"}], ",", 
           RowBox[{"\<\"height\"\>", "\[Rule]", "\<\"1.43256\"\>"}]}], "}"}], 
         ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"row\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Salvatore\"\>"}], ",", 
           RowBox[{"\<\"gender\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"age\"\>", "\[Rule]", "\<\"5\"\>"}], ",", 
           RowBox[{"\<\"height\"\>", "\[Rule]", "\<\"1.24968\"\>"}]}], "}"}], 
         ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"row\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Alexis\"\>"}], ",", 
           RowBox[{"\<\"gender\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"age\"\>", "\[Rule]", "\<\"6\"\>"}], ",", 
           RowBox[{"\<\"height\"\>", "\[Rule]", "\<\"1.34112\"\>"}]}], "}"}], 
         ",", 
         RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
     "[", "\<\" Comment at end \"\>", "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.4657717519674*^9, 3.4658598722665997`*^9, 
  3.46859778632778*^9, 3.468597891011468*^9, 3.470067235321817*^9},
 CellLabel->"Out[185]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ExportString", "[", 
   RowBox[{"data2", ",", "\"\<XML\>\""}], "]"}], " ", "//", 
  RowBox[{
   RowBox[{"StringReplace", "[", 
    RowBox[{"#", ",", 
     RowBox[{"\"\<\\r\>\"", " ", "\[Rule]", " ", "\"\<\>\""}]}], "]"}], "&"}],
   " "}]], "Input",
 CellLabel->"In[186]:="],

Cell[BoxData["\<\"<?xml version='1.0' encoding='UTF-8'?>\\n<!-- Some data to \
use as a test for Mathematica's XML import -->\\n<?test Just for didactic \
purposes?>\\n<data>\\n <row name='Leonardo'\\n     gender='male'\\n     \
age='8'\\n     height='1.43256' />\\n <row name='Salvatore'\\n     \
gender='male'\\n     age='5'\\n     height='1.24968' />\\n <row name='Alexis'\
\\n     gender='female'\\n     age='6'\\n     height='1.34112' \
/>\\n</data>\\n<!-- Comment at end -->\\n\"\>"], "Output",
 CellChangeTimes->{3.4657717520298*^9, 3.4658598722966003`*^9, 
  3.468597786365696*^9, 3.468597891044786*^9, 3.470067235363205*^9},
 CellLabel->"Out[186]="]
}, Open  ]],

Cell["\<\
One of the first things you learn about XSLT is that if you create an empty \
stylesheet (XSLT\[CloseCurlyQuote]s equivalent of a program), you get some \
default transformation rules that act to output just the text nodes of the \
XML data. We can emulate that behavior in Mathematica with the following \
functions.\
\>", "Text",
 CellChangeTimes->{{3.4705134001814213`*^9, 3.470513405968535*^9}, 
   3.470516860946835*^9}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "transform", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"transform", "[", 
    RowBox[{
     RowBox[{"XMLObject", "[", "type_", "]"}], "[", "content__", "]"}], "]"}],
    " ", ":=", " ", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"transform", "[", "#", "]"}], "&"}], " ", "/@", " ", 
     RowBox[{"List", "[", "content", "]"}]}], "]"}]}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"tag_", ",", " ", "attrs_List", ",", " ", "data_List"}], "]"}], 
   "]"}], " ", ":=", " ", 
  RowBox[{"StringJoin", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"transform", "[", "#", "]"}], "&"}], " ", "/@", " ", "data"}], 
   " ", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", "text_String", "]"}], " ", ":=", " ", 
  "text"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", "_", "]"}], " ", ":=", " ", 
  "\"\<\>\""}]}], "Input",
 CellLabel->"In[187]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transform", "[", "data", "]"}]], "Input",
 CellLabel->"In[192]:="],

Cell[BoxData["\<\"Leonardomale84.7Salvatoremale54.1Alexisfemale64.4\"\>"], \
"Output",
 CellChangeTimes->{3.4657717520922003`*^9, 3.4658598723255997`*^9, 
  3.46859778644452*^9, 3.468597891111246*^9, 3.470067235446719*^9},
 CellLabel->"Out[192]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["So far, so good, but can we do something more interesting? Suppose \
we want to clone our XML document but replace all occurrences of the element ",
  FontTracking->"Plain"],
 StyleBox["\"sex\"", "Literal",
  FontTracking->"Plain"],
 StyleBox[" with the element ",
  FontTracking->"Plain"],
 StyleBox["\"gender\"", "Literal",
  FontTracking->"Plain"],
 "."
}], "Text", "ProductionPageBreak",
 CellChangeTimes->{{3.470513415340472*^9, 3.4705134217239532`*^9}, {
  3.4705134526391068`*^9, 3.470513503837237*^9}, {3.471626424188183*^9, 
  3.4716264275934362`*^9}}],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "transform", "]"}]], "Input",
 CellLabel->"In[193]:="],

Cell[BoxData[{
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{
    RowBox[{"XMLObject", "[", "type_", "]"}], "[", "content__", "]"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"XMLObject", "[", "type", "]"}], "[", 
     RowBox[{"transform", "[", 
      RowBox[{"List", "[", "content", "]"}], "]"}], "]"}]}], " ", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<sex\>\"", ",", " ", "attrs_List", ",", " ", "data_List"}], 
    "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<gender\>\"", ",", " ", "attrs", ",", " ", 
      RowBox[{"transform", "[", "data", "]"}]}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"tag_String", ",", " ", "attrs_List", ",", " ", "data_List"}], 
    "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"tag", ",", " ", "attrs", ",", " ", 
      RowBox[{"transform", "[", "data", "]"}]}], "]"}]}], " ", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", "list_List", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"transform", "[", "#", "]"}], "&"}], " ", "/@", " ", "list"}]}],
    " ", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", "text_String", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", "text"}], 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellLabel->"In[194]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transform", "[", "data", "]"}]], "Input",
 CellLabel->"In[199]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"transform", "[", 
          RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], "]"}], ",", 
         RowBox[{"transform", "[", 
          RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}], "]"}]}], 
        "}"}], "]"}], ",", 
      RowBox[{
       RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], "[", 
       RowBox[{
       "{", "\<\" Some data to use as a test for Mathematica's XML import \
\"\>", "}"}], "]"}], ",", 
      RowBox[{
       RowBox[{"XMLObject", "[", "\<\"ProcessingInstruction\"\>", "]"}], "[", 
       
       RowBox[{"{", 
        RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
        "}"}], "]"}]}], "}"}], ",", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\<\"data\"\>", ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"XMLElement", "[", 
         RowBox[{"\<\"item\"\>", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"name\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"gender\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"age\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"8\"\>", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"height\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
        ",", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\<\"item\"\>", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"name\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"Salvatore\"\>", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"gender\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"age\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"5\"\>", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"height\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"4.1\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
        ",", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\<\"item\"\>", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"name\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"Alexis\"\>", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"gender\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"female\"\>", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"age\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"6\"\>", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\<\"height\"\>", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\<\"4.4\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
       "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], "[", 
      RowBox[{"{", "\<\" Comment at end \"\>", "}"}], "]"}], "}"}]}], "}"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.4657717522794*^9, 3.4658598723626003`*^9, 
  3.4685977865619802`*^9, 3.468597891212051*^9, 3.470067235527717*^9},
 CellLabel->"Out[199]="]
}, Open  ]],

Cell[TextData[{
 "This recursive transformational approach is overkill in this scenario since \
we can more easily express this transformation using ",
 StyleBox["ReplaceAll", "Literal"],
 "."
}], "Text", "ProductionPageBreak",
 CellChangeTimes->{{3.470513552856827*^9, 3.470513567145612*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", " ", "/.", " ", 
  RowBox[{"\"\<sex\>\"", " ", "\[Rule]", " ", "\"\<gender\>\""}]}]], "Input",
 CellLabel->"In[200]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
      RowBox[{
       RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
       RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
      "[", "\<\" Some data to use as a test for Mathematica's XML import \
\"\>", "]"}], ",", 
     RowBox[{
      RowBox[{"XMLObject", "[", "\<\"ProcessingInstruction\"\>", "]"}], "[", 
      RowBox[{"\<\"test\"\>", ",", "\<\"Just for didactic purposes\"\>"}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"data\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Leonardo\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"gender\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"8\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.7\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Salvatore\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"gender\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"male\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"5\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.1\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"item\"\>", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"name\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"Alexis\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"gender\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"female\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"age\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"6\"\>", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"height\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\<\"4.4\"\>", "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\<\"Comment\"\>", "]"}], 
     "[", "\<\" Comment at end \"\>", "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.4657717523262*^9, 3.4658598723876*^9, 
  3.4685977866005087`*^9, 3.468597891246333*^9, 3.470067235565366*^9},
 CellLabel->"Out[200]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["There are certain types of structure-adding transformations that \
were difficult to do in XSLT until a grouping construct was added (",
  FontTracking->"SemiCondensed"],
 StyleBox["xsl:for-ea", "Literal",
  FontTracking->"SemiCondensed"],
 StyleBox["ch-group", "Literal",
  FontTracking->"Plain"],
 StyleBox[") in XSLT 2.0. Here is a solution to a grouping problem using \
Mathematica\[CloseCurlyQuote]s ",
  FontTracking->"Plain"],
 StyleBox["Sort[]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" and ",
  FontTracking->"Plain"],
 StyleBox["Split[]", "Literal",
  FontTracking->"Plain"],
 StyleBox[" functions.",
  FontTracking->"Plain"]
}], "Text", "ProductionPageBreak",
 CellChangeTimes->{3.470513589157179*^9, 3.470516868346156*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{"employees", " ", "=", "  ", "\[IndentingNewLine]", 
   RowBox[{"Import", "[", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<..\>\"", ",", 
        "\"\<data\>\"", ",", "\"\<ch02\>\"", ",", "\"\<employee.xml\>\""}], 
       "}"}], "]"}], ",", "\"\<XMLObject\>\""}], "]"}]}],
  FontTracking->"Plain"]], "Input",
 CellChangeTimes->{{3.4700647780356207`*^9, 3.470064808369624*^9}, {
  3.470064877993928*^9, 3.4700648883729258`*^9}},
 CellLabel->"In[201]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
     RowBox[{
      RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
      RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], 
    "}"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"Employees\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Jil Michel\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Nancy Pratt\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Phill McKraken\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1003\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Ima Little\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Betsy Ross\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1007\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Jane Doe\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1003\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Walter H. Potter\"\>"}], 
           ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Wendy B.K. McDonald\"\>"}],
            ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2003\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Craig F. Frye\"\>"}], ",", 
           
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Hardy Hamburg\"\>"}], ",", 
           
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Rich Shaker\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Mike Rosenbaum\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2003\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Cindy Post-Kellog\"\>"}], 
           ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Allen Bran\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Frank N. Berry\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Jack Apple\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Oscar A. Winner\"\>"}], 
           ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3003\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Jack Nickolas\"\>"}], ",", 
           
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"R.P. McMurphy\"\>"}], ",", 
           
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Tom Hanks\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Forest Gump\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2003\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Andrew Beckett\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Susan Sarandon\"\>"}], ",", 
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"employee\"\>", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Helen Prejean\"\>"}], ",", 
           
           RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
           RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], ",", 
         
         RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.4657717523886003`*^9, 3.4658598724186*^9, 
  3.4685977866481943`*^9, 3.468597891288309*^9, 3.470064900061987*^9, 
  3.4700672356563177`*^9},
 CellLabel->"Out[201]="]
}, Open  ]],

Cell[TextData[{
 "The goal of this transformation is to group all employees in the same \
department under a new element ",
 StyleBox["<Dept dept=\"", "Literal"],
 StyleBox["num", "UserInput"],
 StyleBox["\">", "Literal"],
 ". Notice how this is accomplish",
 StyleBox["ed w",
  FontTracking->"Plain"],
 StyleBox["ith little ad",
  FontTracking->"SemiCondensed"],
 StyleBox["ditional code. Helper functions define an ordering and an \
equivalence relation for ",
  FontTracking->"Extended"],
 StyleBox["Sort", "Literal",
  FontTracking->"Extended"],
 StyleBox[" and ",
  FontTracking->"Extended"],
 StyleBox["OrderQ", "Literal",
  FontTracking->"Extended"],
 StyleBox[", respectively, and a ",
  FontTracking->"Extended"],
 StyleBox["transform[]", "Literal",
  FontTracking->"Extended"],
 StyleBox[" applies the additional level of group",
  FontTracking->"Extended"],
 "ing when it matches the ",
 StyleBox["\"employees\"", "Literal"],
 " element."
}], "Text", "ProductionPageBreak",
 CellChangeTimes->{{3.470513616646398*^9, 3.47051375602306*^9}, {
  3.471626455990369*^9, 3.471626465358632*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "transform", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getDept", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"_", ",", 
     RowBox[{"{", 
      RowBox[{"__", ",", 
       RowBox[{"\"\<dept\>\"", "\[Rule]", "dept_"}]}], "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], "]"}], " ", ":=", " ", 
  "dept"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sameDeptQ", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"Order", "[", 
      RowBox[{
       RowBox[{"getDept", "[", "a", "]"}], ",", " ", 
       RowBox[{"getDept", "[", "b", "]"}]}], "]"}], " ", "\[Equal]", " ", 
     "0"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orderDept", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"Order", "[", 
      RowBox[{
       RowBox[{"getDept", "[", "a", "]"}], ",", " ", 
       RowBox[{"getDept", "[", "b", "]"}]}], "]"}], " ", "\[Equal]", " ", 
     "1"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{
    RowBox[{"XMLObject", "[", "\"\<Document\>\"", "]"}], "[", 
    RowBox[{"decl_", ",", "content_", ",", "rest_"}], "]"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\"\<Document\>\"", "]"}], "[", 
     RowBox[{"decl", ",", " ", 
      RowBox[{"transform", "[", "content", "]"}], ",", "rest"}], "]"}]}], " ",
    "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{
    RowBox[{"XMLObject", "[", "type_", "]"}], "[", "args___", "]"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"XMLObject", "[", "type", "]"}], "[", "args", " ", "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<Employees\>\"", ",", "_", ",", " ", "elements__"}], "]"}], 
   " ", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<Employees\>\"", ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<Dept\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"\"\<dept\>\"", " ", "\[Rule]", " ", 
            RowBox[{"getDept", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", "#"}], 
         "]"}], "&"}], " ", "/@", " ", 
       RowBox[{"Split", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"elements", ",", "orderDept"}], "]"}], ",", "sameDeptQ"}], 
        "]"}]}]}], " ", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", "list_List", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"transform", "[", "#", "]"}], "&"}], " ", "/@", " ", "list"}]}],
    " ", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transform", "[", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"tag_String", ",", " ", "attrs_List", ",", " ", "child_List"}], 
    "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"tag", ",", " ", "attrs", ",", " ", 
      RowBox[{"transform", "[", "child", "]"}]}], "]"}]}], 
   "]"}]}], "\n"}], "Input",
 CellLabel->"In[202]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transform", "[", "employees", "]"}]], "Input",
 CellLabel->"In[211]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
     RowBox[{
      RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], ",", 
      RowBox[{"\<\"Encoding\"\>", "\[Rule]", "\<\"UTF-8\"\>"}]}], "]"}], 
    "}"}], ",", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\<\"Employees\"\>", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"Dept\"\>", ",", 
         RowBox[{"{", 
          RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Susan Sarandon\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"R.P. McMurphy\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Jack Nickolas\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Frank N. Berry\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Craig F. Frye\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Ima Little\"\>"}], ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Nancy Pratt\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Jil Michel\"\>"}], ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"Dept\"\>", ",", 
         RowBox[{"{", 
          RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1003\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Jane Doe\"\>"}], ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1003\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Phill McKraken\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1003\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"Dept\"\>", ",", 
         RowBox[{"{", 
          RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1007\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\<\"employee\"\>", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Betsy Ross\"\>"}], ",", 
              
              RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
              RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"1007\"\>"}]}], "}"}], 
            ",", 
            RowBox[{"{", "}"}]}], "]"}], "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"Dept\"\>", ",", 
         RowBox[{"{", 
          RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Helen Prejean\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Tom Hanks\"\>"}], ",", 
               
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Jack Apple\"\>"}], ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Rich Shaker\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Hardy Hamburg\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               
               RowBox[{"\<\"name\"\>", 
                "\[Rule]", "\<\"Walter H. Potter\"\>"}], ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"Dept\"\>", ",", 
         RowBox[{"{", 
          RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2003\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Forest Gump\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2003\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Mike Rosenbaum\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2003\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               
               RowBox[{"\<\"name\"\>", 
                "\[Rule]", "\<\"Wendy B.K. McDonald\"\>"}], ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"2003\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"Dept\"\>", ",", 
         RowBox[{"{", 
          RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3001\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Andrew Beckett\"\>"}], 
               ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Allen Bran\"\>"}], ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"employee\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               
               RowBox[{"\<\"name\"\>", 
                "\[Rule]", "\<\"Cindy Post-Kellog\"\>"}], ",", 
               RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
               RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3001\"\>"}]}], "}"}], 
             ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\<\"Dept\"\>", ",", 
         RowBox[{"{", 
          RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3003\"\>"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\<\"employee\"\>", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Oscar A. Winner\"\>"}], 
              ",", 
              RowBox[{"\<\"sex\"\>", "\[Rule]", "\<\"male\"\>"}], ",", 
              RowBox[{"\<\"dept\"\>", "\[Rule]", "\<\"3003\"\>"}]}], "}"}], 
            ",", 
            RowBox[{"{", "}"}]}], "]"}], "}"}]}], "]"}]}], "}"}]}], "]"}], 
   ",", 
   RowBox[{"{", "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.465771752451*^9, 3.4658598724476*^9, 
  3.468597786727496*^9, 3.468597891360012*^9, 3.470064913968224*^9, 
  3.47006723573289*^9},
 CellLabel->"Out[211]="]
}, Open  ]],

Cell[TextData[{
 "Of course, there are significant differences between these transformations \
and XSLT. For example, in XSLT, you operate on a tree and, hence, can \
navigate upward from child elements to parent elements. This is not the case \
for Mathematica\[CloseCurlyQuote]s representation of XML. The tutorial \
mentioned in ",
 ButtonBox["the following \[OpenCurlyDoubleQuote]See Also\
\[CloseCurlyDoubleQuote] section",
  BaseStyle->"Hyperlink",
  ButtonData->"SeeAlso5.10"],
 " provides some guidance for working around these issues."
}], "Text",
 CellChangeTimes->{{3.4705137781326733`*^9, 3.4705138298419933`*^9}, {
   3.470513871970058*^9, 3.470513871982133*^9}, {3.4705164668749733`*^9, 
   3.4705164783088903`*^9}, 3.4705168718202887`*^9, {3.4755896305597343`*^9, 
   3.475589632134266*^9}}]
}, Open  ]],

Cell["See Also", "Heading2",
 CellTags->"SeeAlso5.10"],

Cell[TextData[{
 "The tutorial ",
 StyleBox[ButtonBox["XML/tutorial/TransformingXML",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/XML/tutorial/\
TransformingXML.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/XML/tutorial/TransformingXML.\
html"], "URL"],
 " in the Mathematica documentation (also at ",
 StyleBox[ButtonBox["http://bit.ly/4tS1Ce",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/4tS1Ce"], None},
  ButtonNote->"http://bit.ly/4tS1Ce"], "URL"],
 ") has a section comparing Mathematica to XSLT and can provide further help \
in exploiting these techniques."
}], "Text",
 CellChangeTimes->{{3.4705139269598503`*^9, 3.4705139450385523`*^9}}],

Cell[TextData[{
 StyleBox["You can learn more about XSLT at the XSL Working ",
  FontTracking->"SemiCondensed"],
 StyleBox["Group\[CloseCurlyQuote]s website: ",
  FontTracking->"Plain"],
 StyleBox[ButtonBox["http://bit.ly/1fJsB",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/1fJsB"], None},
  ButtonNote->"http://bit.ly/1fJsB"], "URL",
  FontTracking->"Plain"],
 StyleBox[".",
  FontTracking->"Plain"]
}], "Text",
 CellChangeTimes->{{3.470513953874242*^9, 3.470514001537202*^9}, {
   3.470514054230842*^9, 3.4705141089437523`*^9}, 3.470516877010749*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["ChapterLabel"],
 ".",
 
 CounterBox["Heading1"],
 "\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars ",
 " ",
 "in Mathematica"
}], "Heading1",
 CellChangeTimes->{3.470514123341688*^9, 3.4710095766551847`*^9, 
  3.485522439240369*^9},
 CellTags->"Writing Parsers"],

Cell[CellGroupData[{

Cell["Problem", "Heading2WithHeadAbove"],

Cell["You want to write a parser in Mathematica.", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Heading2"],

Cell[TextData[{
 "The easiest type of parser to write in Mathematica is a recursive descent \
parser. Before writing the parser, we need to know the grammar of the \
language we will parse. The most common notation for grammars ",
 StyleBox["is Backus-Naur Form (BNF), but for rea",
  FontTracking->"Extended"],
 "sons that will become a",
 StyleBox["pparent in the discussion, I use Mathematica itself to represent \
the grammar. For this exa",
  FontTracking->"Plain"],
 "mple, I use a simplified English grammar. The presentation here is a \
variation of one developed ",
 StyleBox["and given by Daniel Lichtblau of Wol",
  FontTracking->"Extended"],
 "fram Research at the Wolfram Developer\[CloseCurlyQuote]s Conference in \
1999. Refer to ",
 ButtonBox["the \[OpenCurlyDoubleQuote]See Also\[CloseCurlyDoubleQuote] \
section on page 235",
  BaseStyle->"Hyperlink",
  ButtonData->"SeeAlso5.11"],
 " for more information."
}], "Text",
 CellChangeTimes->{{3.470514265398357*^9, 3.470514306355591*^9}, {
   3.470514358870009*^9, 3.470514436308517*^9}, {3.47051448167852*^9, 
   3.470514481685122*^9}, {3.470516486721876*^9, 3.470516493382245*^9}, 
   3.470516880773604*^9, {3.471626489327177*^9, 3.4716265004232407`*^9}, {
   3.4755896545585747`*^9, 3.4755896573764467`*^9}}],

Cell[TextData[{
 "First, we need some helper functions to make creating the grammar easier. \
We use two functions, ",
 StyleBox["sequence", "Literal"],
 " and ",
 StyleBox["choose", "Literal"],
 ", with attribute ",
 StyleBox["HoldAll", "Literal"],
 " to prevent them from evaluating their arguments and causing an infinite \
recursion. As its name would suggest, ",
 StyleBox["sequence[]", "Literal"],
 " represents a sequence of terms of the grammar. ",
 StyleBox["Choose", "Literal"],
 " represents a choice of one out of two or more possible terms. I allow ",
 StyleBox["choose", "Literal"],
 " to take an extra argument, which is a list of probabilities for the \
choices. More on that later. "
}], "Text",
 CellChangeTimes->{{3.4705145262402143`*^9, 3.4705145945500603`*^9}}],

Cell[BoxData[{
 RowBox[{"SetAttributes", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"sequence", ",", "choose"}], "}"}], ",", "HoldAll"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NILL", " ", "=", " ", "\"\<\>\""}], ";"}]}], "Input",
 CellChangeTimes->{3.4716265395557337`*^9},
 CellLabel->"In[212]:="],

Cell["This grammar is for a small subset of English.", "Text", "ProductionPageBreak"],

Cell[BoxData[{
 RowBox[{"sentence", " ", ":=", " ", 
  RowBox[{"choose", "[", 
   RowBox[{"declarative", ",", "interrogative", ",", " ", "imperative"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"declarative", " ", ":=", " ", 
  RowBox[{"sequence", "[", 
   RowBox[{"subject", ",", " ", "predicatepast"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"interrogative", " ", ":=", " ", 
  RowBox[{"sequence", "[", 
   RowBox[{"qverb", ",", " ", "subject", ",", " ", "predicatepresent"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"imperative", " ", ":=", " ", 
  RowBox[{"sequence", "[", 
   RowBox[{"actverb", ",", " ", "subject"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"subject", " ", ":=", " ", 
  RowBox[{"choose", "[", 
   RowBox[{"nounclause", ",", "  ", 
    RowBox[{"sequence", "[", 
     RowBox[{"nounclause", ",", " ", "prepositionclause"}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"nounclause", ":=", " ", 
  RowBox[{"sequence", "[", 
   RowBox[{"adjectiveclause", ",", " ", "noun"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"noun", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<skyscraper\>\"", ",", "\"\<ball\>\"", ",", "\"\<dog\>\"", ",", 
     "\"\<cow\>\"", ",", "\"\<shark\>\"", ",", "\"\<attorney\>\"", ",", 
     "\"\<hatter\>\"", ",", "\"\<programmer\>\"", ",", "\"\<city\>\"", ",", 
     "\"\<village\>\"", ",", "\"\<buffalo\>\"", ",", "\"\<moon\>\"", ",", 
     "\"\<librarian\>\"", ",", "\"\<sheep\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"adjectiveclause", " ", ":=", " ", 
  RowBox[{"sequence", "[", 
   RowBox[{"article", ",", " ", "adjectivelist"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"adjectivelist", " ", ":=", " ", 
  RowBox[{"choose", "[", 
   RowBox[{"NILL", ",", " ", 
    RowBox[{"sequence", "[", 
     RowBox[{"adjective", ",", " ", "adjectivelist"}], "]"}], ",", " ", 
    RowBox[{"{", "0.7", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"article", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", " ", "\"\<the\>\"", ",", " ", "\"\<this\>\"", ",", " ", 
     "\"\<that\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"adjective", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<big\>\"", ",", "\"\<wet\>\"", ",", "\"\<mad\>\"", ",", 
     "\"\<hideous\>\"", ",", "\"\<red\>\"", ",", "\"\<repugnant\>\"", ",", 
     "\"\<slimy\>\"", ",", "\"\<delectable\>\"", ",", "\"\<mild-mannered\>\"",
      ",", "\"\<lazy\>\"", ",", "\"\<silly\>\"", ",", "\"\<crazy\>\"", ",", 
     " ", "\"\<ferocious\>\"", ",", " ", "\"\<cute\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"prepositionclause", " ", ":=", " ", 
  RowBox[{"sequence", "[", 
   RowBox[{"preposition", ",", " ", "nounclause"}], " ", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"preposition", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<in\>\"", ",", "\"\<above\>\"", ",", "\"\<under\>\"", ",", 
     "\"\<from\>\"", ",", "\"\<near\>\"", ",", "\"\<at\>\"", ",", 
     "\"\<with\>\""}], "}"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{"predicatepresent", ":=", 
  RowBox[{"sequence", "[", 
   RowBox[{"verbpresent", ",", "subject"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"predicatepast", ":=", 
  RowBox[{"sequence", "[", 
   RowBox[{"verbclause", ",", "subject"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"verbclause", ":=", 
  RowBox[{"sequence", "[", 
   RowBox[{"adverblist", ",", "verbpast"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"adverblist", " ", ":=", " ", 
  RowBox[{"choose", "[", 
   RowBox[{"NILL", ",", " ", 
    RowBox[{"sequence", "[", 
     RowBox[{"adverb", ",", "adverblist"}], " ", "]"}], ",", " ", 
    RowBox[{"{", "0.6", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"adverb", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<swiftly\>\"", ",", "\"\<unflinchingly\>\"", ",", "\"\<smugly\>\"", 
     ",", "\"\<selflessly\>\"", ",", "\"\<oddly\>\"", ",", 
     "\"\<mightily\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"verbpast", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<ate\>\"", ",", "\"\<threw\>\"", ",", "\"\<gnashed\>\"", ",", 
     "\"\<boiled\>\"", ",", "\"\<grated\>\"", ",", "\"\<milked\>\"", ",", 
     "\"\<spanked\>\"", ",", "\"\<jumped\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"verbpresent", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<eat\>\"", ",", "\"\<throw\>\"", ",", "\"\<gnash\>\"", ",", 
     "\"\<boil\>\"", ",", "\"\<grate\>\"", ",", "\"\<milk\>\"", ",", 
     "\"\<spank\>\"", ",", "\"\<salivate\>\"", ",", "\"\<jump\>\""}], "}"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"qverb", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<did\>\"", ",", "\"\<will\>\"", ",", "\"\<could\>\"", ",", 
     "\"\<should\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"actverb", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<break\>\"", ",", "\"\<fix\>\"", ",", "\"\<launch\>\"", ",", 
     "\"\<squeeze\>\"", ",", "\"\<fetch\>\""}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.470587506753319*^9, 3.470587567364955*^9}, {
  3.470587629030017*^9, 3.470587639606626*^9}},
 CellLabel->"In[214]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ToU", 
    StyleBox["pperCase",
     FontTracking->"Plain"]}]], 
  StyleBox["[",
   FontTracking->"Plain"], 
  StyleBox[
   RowBox[{"StringTake", "[", 
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"Hold", "[", "sentence", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", 
       RowBox[{"-", "2"}]}], "}"}]}], "]"}],
   FontTracking->"Plain"], 
  StyleBox["]",
   FontTracking->"Plain"]}]], "Input",
 CellLabel->"In[236]:="],

Cell[BoxData["\<\"SENTENCE\"\>"], "Output",
 CellChangeTimes->{3.4657717525290003`*^9, 3.4658598724846*^9, 
  3.468597786844396*^9, 3.468597891461357*^9, 3.470067235816814*^9},
 CellLabel->"Out[236]="]
}, Open  ]],

Cell["\<\
This grammar becomes the specification for our parser. Recursive descent \
parsers are probably the easiest parsers to craft by hand because their \
structure mimics the grammar. The goal of this parser is to create a labeled \
parse tree from a sentence. The parser is very simple: it contains no \
provision for error handling and relies on the grammar being completely \
conflict free. For example, the major sentence types are completely \
determined by the first word. Real languages or even artificial languages \
(like programming languages) are rarely that clean. \
\>", "Text",
 CellChangeTimes->{{3.470514614476811*^9, 3.470514674209144*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Test", " ", "for", " ", "membership", " ", "of", " ", "a", " ", 
    "terminal", " ", "symbol", " ", "in", " ", "a", " ", "list", " ", "of", 
    " ", "terminal", " ", 
    RowBox[{"symbols", "."}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"isQ", "[", 
     RowBox[{"type_", ",", "word_"}], "]"}], ":=", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"type", ",", "word"}], "]"}]}], "\[IndentingNewLine]", 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   StyleBox[
    RowBox[{"(*", 
     RowBox[{"Get", " ", "next", " ", "word", " ", "for", " ", 
      RowBox[{"parser", "."}]}], "*)"}],
    FontTracking->"Plain"], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   StyleBox[
    RowBox[{
     RowBox[{"getNextWord", "[", 
      RowBox[{"{", "}"}], "]"}], ":=", "\"\<\>\""}],
    FontTracking->"Plain"], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   StyleBox[
    RowBox[{
     RowBox[{"getNextWord", "[", "words_List", "]"}], ":=", 
     RowBox[{"First", "[", "words", "]"}]}],
    FontTracking->"Plain"], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   StyleBox[
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Parse", " ", "a", " ", "single", " ", "word"}], ",", " ", 
      RowBox[{"classifying", " ", "it", " ", "as", " ", "head"}], ",", " ", 
      RowBox[{"and", " ", "return", " ", "length", " ", "of", " ", "1."}]}], 
     "*)"}],
    FontTracking->"SemiCondensed"], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   StyleBox[
    RowBox[{
     RowBox[{"atomParse", "[", 
      RowBox[{"head_", ",", "words_List"}], "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"head", "[", 
        RowBox[{"getNextWord", "[", "words", "]"}], "]"}], ",", "1"}], "}"}]}],
    FontTracking->"Plain"], "\[IndentingNewLine]", 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   RowBox[{"(*", 
    RowBox[{
    "Top", " ", "level", " ", "parse", " ", "function", " ", "for", " ", 
     RowBox[{"sentences", ".", " ", "Dispatches"}], " ", "based", " ", "on", 
     " ", "first", " ", 
     RowBox[{"word", "."}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sentenceParse", "[", "sentence_sentenceType", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"sentencelist", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"List", ",", "sentence"}], "]"}]}], ",", " ", "firstWord"}],
        " ", "}"}], ",", 
      RowBox[{
       RowBox[{"firstWord", " ", "=", " ", 
        RowBox[{"First", "[", "sentencelist", "]"}]}], ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"isQ", "[", 
          RowBox[{"qverb", ",", "firstWord"}], "]"}], ",", 
         RowBox[{"interrogativeParse", "[", "sentencelist", "]"}], ",", 
         "\[IndentingNewLine]", "  ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"isQ", "[", 
            RowBox[{"actverb", ",", "firstWord"}], "]"}], ",", 
           RowBox[{"imperativeParse", "[", "sentencelist", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"declarativeParse", "[", "sentencelist", "]"}]}], "]"}]}], 
        "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   RowBox[{"(*", 
    RowBox[{"declarative", " ", ":=", " ", 
     RowBox[{"sequence", "[", 
      RowBox[{"subject", ",", " ", "predicatepast"}], "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"declarativeParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"subject", "=", 
         RowBox[{"subjectParse", "[", "words", "]"}]}], ",", "predicate"}], 
       "}"}], ",", 
      RowBox[{
       RowBox[{"predicate", "=", 
        RowBox[{"predicatepastParse", "[", 
         RowBox[{"Drop", "[", 
          RowBox[{"words", ",", 
           RowBox[{"subject", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<DECLARATIVE SENTENCE\>\"", "[", 
        RowBox[{
         RowBox[{"subject", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"predicate", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "]"}]}], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   RowBox[{"(*", 
    RowBox[{"interrogative", " ", ":=", " ", 
     RowBox[{"sequence", "[", 
      RowBox[{"qverb", ",", " ", "subject", ",", " ", "predicatepresent"}], 
      "]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"interrogativeParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"qverb", "=", 
         RowBox[{"atomParse", "[", 
          RowBox[{"\"\<QUESTION VERB\>\"", ",", "words"}], "]"}]}], ",", 
        "subject", ",", "predicate"}], "}"}], ",", 
      RowBox[{
       RowBox[{"subject", "=", 
        RowBox[{"subjectParse", "[", 
         RowBox[{"Drop", "[", 
          RowBox[{"words", ",", 
           RowBox[{"qverb", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"predicate", "=", 
        RowBox[{"predicatepresentParse", "[", 
         RowBox[{"Drop", "[", 
          RowBox[{"words", ",", 
           RowBox[{
            RowBox[{"qverb", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "+", 
            RowBox[{"subject", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<INTERROGATIVE SENTENCE\>\"", "[", 
        RowBox[{
         RowBox[{"qverb", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"subject", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"predicate", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "]"}]}], 
   RowBox[{"(*", "*)"}], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   RowBox[{"(*", 
    RowBox[{"imperative", " ", ":=", " ", 
     RowBox[{"sequence", "[", 
      RowBox[{"actverb", ",", " ", "subject"}], "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"imperativeParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"actverb", "=", 
         RowBox[{"atomParse", "[", 
          RowBox[{"\"\<ACTION VERB\>\"", ",", "words"}], "]"}]}], ",", 
        "subject"}], "}"}], ",", 
      RowBox[{
       RowBox[{"subject", "=", 
        RowBox[{"subjectParse", "[", 
         RowBox[{"Drop", "[", 
          RowBox[{"words", ",", 
           RowBox[{"actverb", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<IMPERATIVE SENTENCE\>\"", "[", 
        RowBox[{
         RowBox[{"actverb", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"subject", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "]"}]}], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"subject", " ", ":=", " ", 
     RowBox[{"choose", "[", 
      RowBox[{"nounclause", ",", "  ", 
       RowBox[{"sequence", "[", 
        RowBox[{"nounclause", ",", " ", "prepositionclause"}], "]"}]}], 
      "]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"subjectParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"nounclause", "=", 
         RowBox[{"nounclauseParse", "[", "words", "]"}]}], ",", 
        "prepositionclause"}], "}"}], ",", 
      RowBox[{
       RowBox[{"prepositionclause", "=", 
        RowBox[{"Drop", "[", 
         RowBox[{"words", ",", 
          RowBox[{"nounclause", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"isQ", "[", 
           RowBox[{"preposition", ",", 
            RowBox[{"getNextWord", "[", "prepositionclause", "]"}]}], "]"}]}],
          ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<SUBJECT\>\"", "[", 
            RowBox[{"nounclause", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
           RowBox[{"nounclause", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
         RowBox[{
          RowBox[{"prepositionclause", "=", 
           RowBox[{
           "prepositionclauseParse", "[", "prepositionclause", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<SUBJECT\>\"", "[", 
             RowBox[{
              RowBox[{"nounclause", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"prepositionclause", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{"nounclause", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "+", 
             RowBox[{"prepositionclause", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}]}], "]"}]}]}], 
     "]"}]}], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"predicatepast", ":=", 
     RowBox[{"sequence", "[", 
      RowBox[{"verbclause", ",", "subject"}], "]"}]}], "*)"}], 
   StyleBox["\[IndentingNewLine]",
    FontTracking->"Plain"], 
   RowBox[{
    RowBox[{"predicatepastParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"verbclause", "=", 
         RowBox[{"verbclauseParse", "[", "words", "]"}]}], ",", "subject"}], 
       "}"}], ",", 
      RowBox[{
       RowBox[{"subject", "=", 
        RowBox[{"subjectParse", "[", 
         RowBox[{"Drop", "[", 
          RowBox[{"words", ",", 
           RowBox[{"verbclause", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PREDICATE\>\"", "[", 
          RowBox[{
           RowBox[{"verbclause", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"subject", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"verbclause", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "+", 
          RowBox[{"subject", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"predicatepresent", ":=", 
     RowBox[{"sequence", "[", 
      RowBox[{"verbpresent", ",", "subject"}], "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"predicatepresentParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"verb", "=", 
         RowBox[{"atomParse", "[", 
          RowBox[{"\"\<VERB (PRESENT TENSE)\>\"", ",", "words"}], "]"}]}], 
        ",", "subject"}], "}"}], ",", 
      RowBox[{
       RowBox[{"subject", "=", 
        RowBox[{"subjectParse", "[", 
         RowBox[{"Drop", "[", 
          RowBox[{"words", ",", 
           RowBox[{"verb", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PREDICATE\>\"", "[", 
          RowBox[{
           RowBox[{"verb", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"subject", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"verb", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "+", 
          RowBox[{"subject", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"verbclause", ":=", 
     RowBox[{"sequence", "[", 
      RowBox[{"adverblist", ",", "verbpast"}], "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"verbclauseParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"adverbs", "=", 
         RowBox[{"adverblistParse", "[", "words", "]"}]}], ",", "verb"}], 
       "}"}], ",", 
      RowBox[{
       RowBox[{"verb", "=", 
        RowBox[{"atomParse", "[", 
         RowBox[{"\"\<VERB (PAST TENSE)\>\"", ",", 
          RowBox[{"Drop", "[", 
           RowBox[{"words", ",", 
            RowBox[{"adverbs", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"adverbs", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "0"}], ",", "verb", 
         ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<VERB CLAUSE\>\"", "[", 
            RowBox[{
             RowBox[{"adverbs", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"verb", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{"adverbs", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "+", 
            RowBox[{"verb", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"nounclause", ":=", " ", 
     RowBox[{"sequence", "[", 
      RowBox[{"adjectiveclause", ",", " ", "noun"}], "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nounclauseParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"adjectiveclause", "=", 
         RowBox[{"adjectiveclauseParse", "[", "words", "]"}]}], ",", "noun"}],
        "}"}], ",", 
      RowBox[{
       RowBox[{"noun", "=", 
        RowBox[{"atomParse", "[", 
         RowBox[{"\"\<NOUN\>\"", ",", 
          RowBox[{"Drop", "[", 
           RowBox[{"words", ",", 
            RowBox[{"adjectiveclause", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<NOUN CLAUSE\>\"", "[", 
          RowBox[{
           RowBox[{"adjectiveclause", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"noun", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"adjectiveclause", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "+", 
          RowBox[{"noun", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"adjectiveclause", " ", ":=", " ", 
     RowBox[{"sequence", "[", 
      RowBox[{"article", ",", " ", "adjectivelist"}], "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"adjectiveclauseParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"art", "=", 
         RowBox[{"atomParse", "[", 
          RowBox[{"\"\<ARTICLE\>\"", ",", "words"}], "]"}]}], ",", 
        "adjlist"}], "}"}], ",", 
      RowBox[{
       RowBox[{"adjlist", "=", 
        RowBox[{"adjectivelistParse", "[", 
         RowBox[{"Drop", "[", 
          RowBox[{"words", ",", 
           RowBox[{"art", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"adjlist", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "0"}], ",", "art", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ADJECTIVE CLAUSE\>\"", "[", 
            RowBox[{
             RowBox[{"art", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"adjlist", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{"art", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "+", 
            RowBox[{"adjlist", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Parse", " ", 
     RowBox[{"(", 
      RowBox[{"possibly", " ", "empty"}], ")"}], " ", "list", " ", "of", " ", 
     
     RowBox[{"adjectives", "."}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"adjectivelist", " ", ":=", " ", 
     RowBox[{"choose", "[", 
      RowBox[{"NILL", ",", " ", 
       RowBox[{"sequence", "[", 
        RowBox[{"adjective", ",", " ", "adjectivelist"}], "]"}], ",", " ", 
       RowBox[{"{", "0.7", "}"}]}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"adjectivelistParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"words2", "=", "words"}], ",", "adj", ",", "result", ",", 
        RowBox[{"len", "=", "0"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"\"\<ADJECTIVE LIST\>\"", "[", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"isQ", "[", 
          RowBox[{"adjective", ",", 
           RowBox[{"getNextWord", "[", "words2", "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"adj", "=", 
           RowBox[{"atomParse", "[", 
            RowBox[{"\"\<ADJECTIVE\>\"", ",", "words2"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"len", "+=", 
           RowBox[{"adj", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"result", "=", 
           RowBox[{"\"\<ADJECTIVE LIST\>\"", "[", 
            RowBox[{"result", ",", 
             RowBox[{"adj", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"words2", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"words2", ",", 
             RowBox[{"adj", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"result", ",", "Infinity", ",", "\"\<ADJECTIVE LIST\>\""}], 
          "]"}], ",", "len"}], "}"}]}]}], "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"prepositionclause", " ", ":=", " ", 
     RowBox[{"sequence", "[", 
      RowBox[{"preposition", ",", " ", "nounclause"}], "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"prepositionclauseParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"preposition", "=", 
         RowBox[{"atomParse", "[", 
          RowBox[{"\"\<PREPOSITION\>\"", ",", "words"}], "]"}]}], ",", 
        "nounclause"}], "}"}], ",", 
      RowBox[{
       RowBox[{"nounclause", "=", 
        RowBox[{"nounclauseParse", "[", 
         RowBox[{"Drop", "[", 
          RowBox[{"words", ",", 
           RowBox[{"preposition", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PREPOSITION CLAUSE\>\"", "[", 
          RowBox[{
           RowBox[{"preposition", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"nounclause", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"preposition", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "+", 
          RowBox[{"nounclause", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Parse", " ", 
     RowBox[{"(", 
      RowBox[{"possibly", " ", "empty"}], ")"}], " ", "list", " ", "of", " ", 
     
     RowBox[{"adverbs", "."}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"adverblist", " ", ":=", " ", 
     RowBox[{"choose", "[", 
      RowBox[{"NILL", ",", " ", 
       RowBox[{"sequence", "[", 
        RowBox[{"adverb", ",", "adverblist"}], "]"}], ",", " ", 
       RowBox[{"{", "0.6", "}"}]}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"adverblistParse", "[", "words_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"words2", "=", "words"}], ",", "adv", ",", "result", ",", 
        RowBox[{"len", "=", "0"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"\"\<ADVERB LIST\>\"", "[", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"isQ", "[", 
          RowBox[{"adverb", ",", 
           RowBox[{"getNextWord", "[", "words2", "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"adv", "=", 
           RowBox[{"atomParse", "[", 
            RowBox[{"\"\<ADVERB\>\"", ",", "words2"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"len", "+=", 
           RowBox[{"adv", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"result", "=", 
           RowBox[{"\"\<ADVERB LIST\>\"", "[", 
            RowBox[{"result", ",", 
             RowBox[{"adv", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"words2", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"words2", ",", 
             RowBox[{"adv", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"result", ",", "Infinity", ",", "\"\<ADVERB LIST\>\""}], 
          "]"}], ",", "len"}], "}"}]}]}], "]"}]}]}]}]], "Input", \
"ProductionPageBreak",
 CellChangeTimes->{{3.470514680354445*^9, 3.470514801705139*^9}, {
   3.470587825082787*^9, 3.470587827442728*^9}, 3.470588228598132*^9, {
   3.4716265860867443`*^9, 3.471626587443756*^9}, 3.47162671596677*^9},
 CellLabel->"In[237]:="],

Cell["\<\
We can test the parser on a sentence that conforms to the grammar.\
\>", "Text", "ProductionPageBreak"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sentenceParse", "[", 
  RowBox[{"sentenceType", "[", 
   RowBox[{
   "\"\<will\>\"", ",", "\"\<the\>\"", ",", "\"\<wet\>\"", ",", 
    "\"\<programmer\>\"", ",", "\"\<spank\>\"", ",", "\"\<the\>\"", ",", 
    "\"\<moon\>\""}], "]"}], "]"}]], "Input",
 CellLabel->"In[254]:="],

Cell[BoxData[
 RowBox[{"\<\"INTERROGATIVE SENTENCE\"\>", "[", 
  RowBox[{
   RowBox[{"\<\"QUESTION VERB\"\>", "[", "\<\"will\"\>", "]"}], ",", 
   RowBox[{"\<\"SUBJECT\"\>", "[", 
    RowBox[{"\<\"NOUN CLAUSE\"\>", "[", 
     RowBox[{
      RowBox[{"\<\"ADJECTIVE CLAUSE\"\>", "[", 
       RowBox[{
        RowBox[{"\<\"ARTICLE\"\>", "[", "\<\"the\"\>", "]"}], ",", 
        RowBox[{"\<\"ADJECTIVE LIST\"\>", "[", 
         RowBox[{"\<\"ADJECTIVE\"\>", "[", "\<\"wet\"\>", "]"}], "]"}]}], 
       "]"}], ",", 
      RowBox[{"\<\"NOUN\"\>", "[", "\<\"programmer\"\>", "]"}]}], "]"}], 
    "]"}], ",", 
   RowBox[{"\<\"PREDICATE\"\>", "[", 
    RowBox[{
     RowBox[{"\<\"VERB (PRESENT TENSE)\"\>", "[", "\<\"spank\"\>", "]"}], ",", 
     RowBox[{"\<\"SUBJECT\"\>", "[", 
      RowBox[{"\<\"NOUN CLAUSE\"\>", "[", 
       RowBox[{
        RowBox[{"\<\"ARTICLE\"\>", "[", "\<\"the\"\>", "]"}], ",", 
        RowBox[{"\<\"NOUN\"\>", "[", "\<\"moon\"\>", "]"}]}], "]"}], "]"}]}], 
    "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.4657717526070004`*^9, 3.4658598725206003`*^9, 
  3.468597786911817*^9, 3.4685978916126003`*^9, 3.4700672358972273`*^9},
 CellLabel->"Out[254]="]
}, Open  ]]
}, Open  ]],

Cell["Discussion", "Heading2"],

Cell[TextData[{
 "You may wonder why I took the trouble to specify the grammar using \
Mathematica ",
 StyleBox["if I was going to write the parser by hand. First, I did not write \
this parser; I just pret",
  FontTracking->"Extended"],
 "tied up a parser written by Daniel Lichtblau! The more serious answer is \
that the grammar can be used to easily create a language generator to go \
along with the parser. The generator is very useful for testing the parser. \
Here I based a generator on Lichtblau\[CloseCurlyQuote]s implementation but \
made some significant improvements. The first improvement is that my \
implementation is more declarative than procedural because it leverages \
Mathematica\[CloseCurlyQuote]s pattern matching. The second improvement is \
that the generator absorbs all the complexity so the grammar can remain very \
clean. In Lichtblau\[CloseCurlyQuote]s original grammar, the representation \
was soiled by the presence of programmatic constructs, like ",
 StyleBox["Hold[]", "Literal"],
 " and his implementation of random choice. Other than the presence of \
probabilities, the grammar in the preceding \[OpenCurlyDoubleQuote]Solution\
\[CloseCurlyDoubleQuote] section is completely clean. In fact, it reads as \
easy as BNF. Refer to the URL in ",
 ButtonBox["the \[OpenCurlyDoubleQuote]See Also\[CloseCurlyDoubleQuote] \
section on page 235 ",
  BaseStyle->"Hyperlink",
  ButtonData->"SeeAlso5.11"],
 "to compare this implementation with the original."
}], "Text",
 CellChangeTimes->{{3.470514820040482*^9, 3.470514820547319*^9}, {
  3.4705149066423492`*^9, 3.470515028176475*^9}, {3.47051506834496*^9, 
  3.4705151003931513`*^9}, {3.470516567877797*^9, 3.470516583864945*^9}, {
  3.470516884901099*^9, 3.47051689306424*^9}, {3.470580310683394*^9, 
  3.4705803296327553`*^9}, {3.470588044615233*^9, 3.470588107405492*^9}, {
  3.470588262099287*^9, 3.470588265640936*^9}, {3.471009801954678*^9, 
  3.4710098258327293`*^9}, {3.475589684847843*^9, 3.4755897550434217`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"<<", "Combinatorica`"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"needed", " ", "for", " ", 
    RowBox[{"BinarySearch", "[", "]"}]}], "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"randomChoose", "[", 
      RowBox[{"parts_List", ",", "probs_List"}], "]"}], " ", "selects", " ", 
     "an", " ", "item", " ", "from", " ", "parts_List", " ", "based", " ", 
     "on", " ", "a", " ", "list", " ", "of", " ", "probabilities", " ", "the",
      " ", "length", " ", "of", " ", "which", " ", "must", " ", "be", " ", 
     "one", " ", "less", " ", "than", " ", "the", " ", "number", " ", "of", 
     " ", "parts", " ", "and", " ", "the", " ", "sum", " ", "of", " ", 
     "which", " ", "is", " ", "less", " ", "than", " ", 
     RowBox[{"one", ".", " ", "The"}], " ", "interpretation", " ", "is", " ", 
     "that", " ", "each", " ", "probability", " ", "corresponds", " ", "to", 
     " ", "the", " ", "probability", " ", "of", " ", "the", " ", "item", " ", 
     "in", " ", "the", " ", "same", " ", "position", " ", "except", " ", 
     "for", " ", "the", " ", "last", " ", "item"}], ",", " ", 
    RowBox[{"which", " ", "gets", " ", "the", " ", 
     RowBox[{"residual", "."}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomChoose", "[", 
    RowBox[{"parts_List", ",", "probs_List"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"weights", ",", "test", ",", "pos"}], "}"}], ",", 
     RowBox[{
      RowBox[{"weights", "=", 
       RowBox[{"N", "[", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"FoldList", "[", 
           RowBox[{"Plus", ",", 
            RowBox[{"First", "[", "probs", "]"}], ",", 
            RowBox[{"Rest", "[", "probs", "]"}]}], "]"}], ",", "1"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"test", "=", 
       RowBox[{"RandomReal", "[", "]"}]}], ";", 
      RowBox[{"pos", " ", "=", " ", 
       RowBox[{"Ceiling", "[", 
        RowBox[{"BinarySearch", "[", 
         RowBox[{"weights", ",", "test"}], "]"}], "]"}]}], ";", 
      RowBox[{"parts", "[", 
       RowBox[{"[", "pos", "]"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"randomPart", "[", "]"}], " ", "is", " ", "responsible", " ", 
     "for", " ", "interpreting", " ", "the", " ", "grammar", " ", "in", " ", 
     "a", " ", "random", " ", 
     RowBox[{"manner", ".", " ", "There"}], " ", "is", " ", "a", " ", 
     "variation", " ", "for", " ", "each", " ", "possible", " ", "term"}], 
    ",", " ", 
    RowBox[{
    "and", " ", "recursion", " ", "is", " ", "used", " ", "to", " ", "expand",
      " ", 
     RowBox[{"nonterminals", "."}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomPart", "[", 
   RowBox[{"sequence", "[", "parts__", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"randomPart", "[", "#", "]"}], "&"}], " ", "/@", " ", 
   RowBox[{"List", "[", "parts", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomPart", "[", 
   RowBox[{"choose", "[", 
    RowBox[{"parts__", ",", "probs_List"}], "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Union", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"List", "[", 
     RowBox[{"randomPart", "[", 
      RowBox[{"randomChoose", "[", 
       RowBox[{
        RowBox[{"List", "[", "parts", "]"}], ",", "probs"}], "]"}], "]"}], 
     "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomPart", "[", 
   RowBox[{"choose", "[", "parts__", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"partList", ",", " ", "numParts"}], "}"}], ",", " ", 
    RowBox[{
     RowBox[{"partList", " ", "=", " ", 
      RowBox[{"List", "[", "parts", "]"}]}], ";", " ", 
     RowBox[{"numParts", "=", 
      RowBox[{"Length", "[", "partList", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"randomPart", "[", 
      RowBox[{"randomChoose", "[", 
       RowBox[{"partList", ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"1", "/", "numParts"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"numParts", "-", "1"}], "}"}]}], "]"}]}], "]"}], "]"}]}]}],
    "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomPart", "[", "terminals_List", "]"}], " ", ":=", " ", 
  RowBox[{"terminals", "[", 
   RowBox[{"[", " ", 
    RowBox[{"RandomInteger", "[", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", " ", 
       RowBox[{"Length", "[", "terminals", "]"}]}], "}"}], "]"}], " ", "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomPart", "[", "NILL", "]"}], " ", ":=", " ", 
   RowBox[{"{", "}"}]}], 
  StyleBox["\[InvisibleSpace]",
   FontSize->0]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"randomSentence", "[", "]"}], " ", "is", " ", "the", " ", "entry",
     " ", "point", " ", "for", " ", "generating", " ", "a", " ", "random", 
    " ", "sentence", " ", "of", " ", "the", " ", 
    RowBox[{"grammar", "."}]}], "*)"}], " ", 
  RowBox[{
   RowBox[{"randomSentence", "[", "]"}], " ", ":=", " ", 
   RowBox[{"sentenceType", " ", "@@", " ", 
    RowBox[{"Flatten", "[", 
     RowBox[{"randomPart", "[", "sentence", "]"}], "]"}]}]}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "provide", " ", "a", " ", "nice", " ", "textual", " ", 
    "formatting", " ", "for", " ", "sentences", " ", "that", " ", "also", " ",
     "takes", " ", "care", " ", "of", " ", 
    RowBox[{"punctuation", "."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Format", "[", "sentence_sentenceType", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"word", "=", 
       RowBox[{"First", "[", "sentence", "]"}]}], ",", "words", ",", "punc"}],
      "}"}], ",", 
    RowBox[{
     RowBox[{"words", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"#", ",", "\"\< \>\""}], "]"}], "&"}], ",", "sentence"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"punc", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"isQ", "[", 
         RowBox[{"qverb", ",", "word"}], "]"}], ",", "\"\<?\>\"", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"isQ", "[", 
           RowBox[{"actverb", ",", "word"}], "]"}], ",", "\"\<!\>\"", ",", 
          "\"\<.\>\""}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"words", "[", 
       RowBox[{"[", 
        RowBox[{"Length", "[", "words", "]"}], "]"}], "]"}], "=", 
      RowBox[{"StringReplacePart", "[", 
       RowBox[{
        RowBox[{"Last", "[", "words", "]"}], ",", "punc", ",", 
        RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"words", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "=", 
      RowBox[{"StringReplacePart", "[", 
       RowBox[{
        RowBox[{"First", "[", "words", "]"}], ",", 
        RowBox[{"ToUpperCase", "[", 
         RowBox[{"StringTake", "[", 
          RowBox[{
           RowBox[{"First", "[", "words", "]"}], ",", "1"}], "]"}], "]"}], 
        ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Apply", "[", 
      RowBox[{"StringJoin", ",", "words"}], "]"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.470515120701642*^9, 3.470515122715168*^9}, {
   3.470515156937488*^9, 3.470515253474169*^9}, {3.470515355443964*^9, 
   3.470515370867638*^9}, {3.471009892095118*^9, 3.471009919909539*^9}, {
   3.471012441572363*^9, 3.47101248665457*^9}, 3.475589765870623*^9, 
   3.4855224430121317`*^9},
 CellLabel->"In[255]:="],

Cell["\<\
Here you can see the result of generating 10 random sentences. They are, for \
the most part, utter gibberish, but some are kind of funny. They all conform \
to the grammar, as we can see by running them through the parser.\
\>", "Text",
 CellChangeTimes->{{3.4705153861387463`*^9, 3.4705154002631903`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"randomSentence", "[", "]"}], " ", "//", " ", 
  "InputForm"}]], "Input",
 CellLabel->"In[264]:="],

Cell[TextData[StyleBox["sentenceType[\"a\", \"city\", \"in\", \"that\", \"mad\
\", \"village\", \"threw\", \"the\", \"shark\", \"at\", \"a\", \"ball\"]",
 FontFamily->"WriTheSansMonoCond BoldItalic"]], "Output",
 CellChangeTimes->{3.4657717535274*^9, 3.4658598727806*^9, 
  3.468597787182329*^9, 3.4685978917665777`*^9, 3.470067236913454*^9},
 CellLabel->"Out[264]//InputForm="]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"randomSentence", "[", "]"}], ",", 
    RowBox[{"{", "10", "}"}]}], "]"}], "//", "TableForm"}]], "Input",
 CellLabel->"In[265]:="],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\<\"Launch this moon from the city!\"\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]},
     {
      StyleBox["\<\"A skyscraper from a village ate a skyscraper in the \
attorney.\"\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]},
     {Cell["\<\
\"The delectable librarian above that red hatter spanked this buffalo above
the big sheep.\"\
\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]},
     {
      StyleBox["\<\"Will that programmer salivate that programmer?\"\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]},
     {
      StyleBox["\<\"Could that mad silly ball spank this moon at that \
buffalo?\"\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]},
     {
      StyleBox["\<\"This skyscraper under the cow boiled a village in that \
village.\"\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]},
     {
      StyleBox["\<\"Squeeze a ball!\"\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]},
     {Cell["\<\
\"The crazy mad city in the skyscraper unflinchingly jumped this village
above the skyscraper.\"\
\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]},
     {
      StyleBox["\<\"Could a programmer spank the attorney?\"\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]},
     {
      StyleBox["\<\"Fetch a programmer in this shark!\"\>",
       FontFamily->"WriTheSansMonoCond BoldItalic",
       FontWeight->"Plain"]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.475589871981992*^9, 3.475589888264233*^9}},
 CellLabel->"Out[265]//TableForm="],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "2", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sentenceParse", "[", 
   RowBox[{"randomSentence", "[", "]"}], "]"}], "//", 
  RowBox[{
   RowBox[{"TreeForm", "[", 
    RowBox[{"#", ",", 
     RowBox[{"ImageSize", "\[Rule]", "500"}]}], "]"}], "&"}]}]}], "Input",
 CellLabel->"In[266]:="],

Cell[BoxData[
 GraphicsBox[InsetBox[
   GraphicsBox[InsetBox[
     GraphicsBox[InsetBox[
       GraphicsBox[InsetBox[
         GraphicsBox[InsetBox[
           GraphicsBox[InsetBox[
             GraphicsBox[InsetBox[
               GraphicsBox[InsetBox[
                 GraphicsBox[
                  TagBox[GraphicsComplexBox[CompressedData["
1:eJwLyk9STGVgYGACYlEQbf9WcUdEfI2Sg7ifrnD9tEYGKHAQ/nm3LjcmD84X
WNr7Mlopxv4vVD1U3v7VopoVEy9MgcvfgvK5wPRkOJ8Zqv4zmM6Hy8P4UHkH
tkpJPWv2vzDzHBigNFQ9nA9Tz+OzpFjq7Vy4PDvEH3B5CJ1v/wvFHflQd0+A
6psCl4fx0eTRwwFuPszfUP0Af0CY5A==
                    "], {
                    {RGBColor[0.55, 0.45, 0.45], 
                    LineBox[{{1, 2}, {1, 4}, {2, 3}, {4, 5}, {4, 10}, {5, 
                    6}, {5, 8}, {6, 7}, {8, 9}, {10, 11}, {10, 13}, {11, 
                    12}, {13, 14}, {13, 20}, {14, 15}, {14, 17}, {15, 16}, {
                    17, 18}, {18, 19}, {20, 21}}]}, {
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    
                    StyleBox["\<\"IMPERATIVE SENTENCE\"\>", "StandardForm", 
                    "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 1],
                    TagBox[
                    RowBox[{"\"IMPERATIVE SENTENCE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ACTION VERB\"", "[", "\"break\"", "]"}], ",", 
                    RowBox[{"\"SUBJECT\"", "[", 
                    RowBox[{
                    RowBox[{"\"NOUN CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ARTICLE\"", "[", "\"that\"", "]"}], ",", 
                    RowBox[{"\"NOUN\"", "[", "\"dog\"", "]"}]}], "]"}], ",", 
                    RowBox[{"\"PREPOSITION CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"PREPOSITION\"", "[", "\"above\"", "]"}], ",", 
                    RowBox[{"\"NOUN CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ADJECTIVE CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ARTICLE\"", "[", "\"this\"", "]"}], ",", 
                    RowBox[{"\"ADJECTIVE LIST\"", "[", 
                    RowBox[{"\"ADJECTIVE\"", "[", "\"ferocious\"", "]"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"\"NOUN\"", "[", "\"cow\"", "]"}]}], "]"}]}], 
                    "]"}]}], "]"}]}], "]"}], HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "IMPERATIVE SENTENCE"[
                    "ACTION VERB"["break"], 
                    "SUBJECT"[
                    "NOUN CLAUSE"[
                    "ARTICLE"["that"], 
                    "NOUN"["dog"]], 
                    "PREPOSITION CLAUSE"[
                    "PREPOSITION"["above"], 
                    "NOUN CLAUSE"[
                    "ADJECTIVE CLAUSE"[
                    "ARTICLE"["this"], 
                    "ADJECTIVE LIST"[
                    "ADJECTIVE"["ferocious"]]], 
                    "NOUN"["cow"]]]]]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"ACTION VERB\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 2],
                    TagBox[
                    RowBox[{"\"ACTION VERB\"", "[", "\"break\"", "]"}], 
                    HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "ACTION VERB"["break"]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"break\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 3],
                    TagBox["\"break\"", HoldForm]],
                    Annotation[#, 
                    HoldForm["break"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"SUBJECT\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 4],
                    TagBox[
                    RowBox[{"\"SUBJECT\"", "[", 
                    RowBox[{
                    RowBox[{"\"NOUN CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ARTICLE\"", "[", "\"that\"", "]"}], ",", 
                    RowBox[{"\"NOUN\"", "[", "\"dog\"", "]"}]}], "]"}], ",", 
                    RowBox[{"\"PREPOSITION CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"PREPOSITION\"", "[", "\"above\"", "]"}], ",", 
                    RowBox[{"\"NOUN CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ADJECTIVE CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ARTICLE\"", "[", "\"this\"", "]"}], ",", 
                    RowBox[{"\"ADJECTIVE LIST\"", "[", 
                    RowBox[{"\"ADJECTIVE\"", "[", "\"ferocious\"", "]"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"\"NOUN\"", "[", "\"cow\"", "]"}]}], "]"}]}], 
                    "]"}]}], "]"}], HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "SUBJECT"[
                    "NOUN CLAUSE"[
                    "ARTICLE"["that"], 
                    "NOUN"["dog"]], 
                    "PREPOSITION CLAUSE"[
                    "PREPOSITION"["above"], 
                    "NOUN CLAUSE"[
                    "ADJECTIVE CLAUSE"[
                    "ARTICLE"["this"], 
                    "ADJECTIVE LIST"[
                    "ADJECTIVE"["ferocious"]]], 
                    "NOUN"["cow"]]]]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"NOUN CLAUSE\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 5],
                    TagBox[
                    RowBox[{"\"NOUN CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ARTICLE\"", "[", "\"that\"", "]"}], ",", 
                    RowBox[{"\"NOUN\"", "[", "\"dog\"", "]"}]}], "]"}], 
                    HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "NOUN CLAUSE"[
                    "ARTICLE"["that"], 
                    "NOUN"["dog"]]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"ARTICLE\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 6],
                    TagBox[
                    RowBox[{"\"ARTICLE\"", "[", "\"that\"", "]"}], HoldForm]],
                    
                    Annotation[#, 
                    HoldForm[
                    "ARTICLE"["that"]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"that\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 7],
                    TagBox["\"that\"", HoldForm]],
                    Annotation[#, 
                    HoldForm["that"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"NOUN\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 8],
                    TagBox[
                    RowBox[{"\"NOUN\"", "[", "\"dog\"", "]"}], HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "NOUN"["dog"]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"dog\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 9],
                    TagBox["\"dog\"", HoldForm]],
                    Annotation[#, 
                    HoldForm["dog"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    
                    StyleBox["\<\"PREPOSITION CLAUSE\"\>", "StandardForm", 
                    "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 10],
                    TagBox[
                    RowBox[{"\"PREPOSITION CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"PREPOSITION\"", "[", "\"above\"", "]"}], ",", 
                    RowBox[{"\"NOUN CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ADJECTIVE CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ARTICLE\"", "[", "\"this\"", "]"}], ",", 
                    RowBox[{"\"ADJECTIVE LIST\"", "[", 
                    RowBox[{"\"ADJECTIVE\"", "[", "\"ferocious\"", "]"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"\"NOUN\"", "[", "\"cow\"", "]"}]}], "]"}]}], 
                    "]"}], HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "PREPOSITION CLAUSE"[
                    "PREPOSITION"["above"], 
                    "NOUN CLAUSE"[
                    "ADJECTIVE CLAUSE"[
                    "ARTICLE"["this"], 
                    "ADJECTIVE LIST"[
                    "ADJECTIVE"["ferocious"]]], 
                    "NOUN"["cow"]]]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"PREPOSITION\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 11],
                    TagBox[
                    RowBox[{"\"PREPOSITION\"", "[", "\"above\"", "]"}], 
                    HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "PREPOSITION"["above"]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"above\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 12],
                    TagBox["\"above\"", HoldForm]],
                    Annotation[#, 
                    HoldForm["above"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"NOUN CLAUSE\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 13],
                    TagBox[
                    RowBox[{"\"NOUN CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ADJECTIVE CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ARTICLE\"", "[", "\"this\"", "]"}], ",", 
                    RowBox[{"\"ADJECTIVE LIST\"", "[", 
                    RowBox[{"\"ADJECTIVE\"", "[", "\"ferocious\"", "]"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"\"NOUN\"", "[", "\"cow\"", "]"}]}], "]"}], 
                    HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "NOUN CLAUSE"[
                    "ADJECTIVE CLAUSE"[
                    "ARTICLE"["this"], 
                    "ADJECTIVE LIST"[
                    "ADJECTIVE"["ferocious"]]], 
                    "NOUN"["cow"]]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    
                    StyleBox["\<\"ADJECTIVE CLAUSE\"\>", "StandardForm", 
                    "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 14],
                    TagBox[
                    RowBox[{"\"ADJECTIVE CLAUSE\"", "[", 
                    RowBox[{
                    RowBox[{"\"ARTICLE\"", "[", "\"this\"", "]"}], ",", 
                    RowBox[{"\"ADJECTIVE LIST\"", "[", 
                    RowBox[{"\"ADJECTIVE\"", "[", "\"ferocious\"", "]"}], 
                    "]"}]}], "]"}], HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "ADJECTIVE CLAUSE"[
                    "ARTICLE"["this"], 
                    "ADJECTIVE LIST"[
                    "ADJECTIVE"["ferocious"]]]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"ARTICLE\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 15],
                    TagBox[
                    RowBox[{"\"ARTICLE\"", "[", "\"this\"", "]"}], HoldForm]],
                    
                    Annotation[#, 
                    HoldForm[
                    "ARTICLE"["this"]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"this\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 16],
                    TagBox["\"this\"", HoldForm]],
                    Annotation[#, 
                    HoldForm["this"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    
                    StyleBox["\<\"ADJECTIVE LIST\"\>", "StandardForm", 
                    "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 17],
                    TagBox[
                    RowBox[{"\"ADJECTIVE LIST\"", "[", 
                    RowBox[{"\"ADJECTIVE\"", "[", "\"ferocious\"", "]"}], 
                    "]"}], HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "ADJECTIVE LIST"[
                    "ADJECTIVE"["ferocious"]]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"ADJECTIVE\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 18],
                    TagBox[
                    RowBox[{"\"ADJECTIVE\"", "[", "\"ferocious\"", "]"}], 
                    HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "ADJECTIVE"["ferocious"]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"ferocious\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 19],
                    TagBox["\"ferocious\"", HoldForm]],
                    Annotation[#, 
                    HoldForm["ferocious"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox["\<\"NOUN\"\>", "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 20],
                    TagBox[
                    RowBox[{"\"NOUN\"", "[", "\"cow\"", "]"}], HoldForm]],
                    Annotation[#, 
                    HoldForm[
                    "NOUN"["cow"]], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[InsetBox[
                    FrameBox[
                    StyleBox[
                    TagBox["\<\"cow\"\>",
                    HoldForm], "StandardForm", "Output",
                    StripOnInput->False,
                    $CellContext`FrontFaceColor -> GrayLevel[0],
                    $CellContext`BackFaceColor -> GrayLevel[0],
                    $CellContext`GraphicsColor -> GrayLevel[0],
                    FontSize->Scaled[0.023529411764705882`],
                    FontColor->GrayLevel[0]],
                    Background->RGBColor[1., 1., 0.871],
                    FrameStyle->GrayLevel[0.5],
                    StripOnInput->False], 21],
                    TagBox["\"cow\"", HoldForm]],
                    Annotation[#, 
                    HoldForm["cow"], "Tooltip"]& ]}}],
                   Annotation[#, VertexCoordinateRules -> CompressedData["
1:eJwLyk9STGVgYGACYlEQbf9WcUdEfI2Sg7ifrnD9tEYGKHAQ/nm3LjcmD84X
WNr7Mlopxv4vVD1U3v7VopoVEy9MgcvfgvK5wPRkOJ8Zqv4zmM6Hy8P4UHkH
tkpJPWv2vzDzHBigNFQ9nA9Tz+OzpFjq7Vy4PDvEH3B5CJ1v/wvFHflQd0+A
6psCl4fx0eTRwwFuPszfUP0Af0CY5A==
                    "]]& ],
                  
                  AspectRatio->NCache[
                   2 Rational[2, 17]^Rational[1, 2], 0.6859943405700354],
                  Background->None,
                  FrameTicks->Automatic,
                  ImageMargins->0.,
                  ImageSize->500,
                  PlotRange->All,
                  PlotRangePadding->Scaled[0.1]], {0., 0.}, 
                 ImageScaled[{0., 0.}], {499.93717411458505`, 342.95407208318176`},
                 
                 ContentSelectable->True],
                AspectRatio->0.6884788016929584,
                Background->None,
                ContentSelectable->True,
                ImageMargins->0.,
                ImagePadding->0.,
                ImageSize->{498.19568800316466`, 342.9971702850178},
                
                PlotRange->{{1.8040852818378075`, 499.93717411458505`}, {0., 
                 342.95407208318176`}},
                PlotRangePadding->None], {0., 0.}, ImageScaled[{0., 0.}], {500., 342.9971702850177},
               
               ContentSelectable->True],
              AspectRatio->0.6859081441663634,
              Background->None,
              ContentSelectable->True,
              ImageMargins->0.,
              ImagePadding->0.,
              ImageSize->{500.06283378059084`, 342.9971702850177},
              
              PlotRange->{{-0.06283378059079858, 500.}, {0., 
               342.9971702850177}},
              PlotRangePadding->None], {0., 0.}, ImageScaled[{0., 0.}], {500., 342.9971702850177},
             
             ContentSelectable->True],
            AspectRatio->0.686090421279112,
            Background->None,
            ContentSelectable->True,
            ImageMargins->0.,
            ImagePadding->0.,
            ImageSize->{499.92997955801695`, 342.9971702850177},
            PlotRange->{{0.07002044198306523, 500.}, {0., 342.9971702850177}},
            
            PlotRangePadding->None], {0., 0.}, ImageScaled[{0., 0.}], {500., 342.9971702850177},
           
           ContentSelectable->True],
          AspectRatio->0.6862727952963159,
          Background->None,
          ContentSelectable->True,
          ImageMargins->0.,
          ImagePadding->0.,
          ImageSize->{499.7971253354431, 342.9971702850177},
          PlotRange->{{0.20287466455687353`, 500.}, {0., 342.9971702850177}},
          PlotRangePadding->None], {0., 0.}, ImageScaled[{0., 0.}], {500., 342.9971702850177},
         
         ContentSelectable->True],
        AspectRatio->0.6864552662952722,
        Background->None,
        ContentSelectable->True,
        ImageMargins->0.,
        ImagePadding->0.,
        ImageSize->{499.66427111286924`, 342.9971702850177},
        PlotRange->{{0.33572888713073734`, 500.}, {0., 342.9971702850177}},
        PlotRangePadding->None], {0., 0.}, ImageScaled[{0., 0.}], {500., 342.9971702850177},
       
       ContentSelectable->True],
      AspectRatio->0.6866378343533597,
      Background->None,
      ContentSelectable->True,
      ImageMargins->0.,
      ImagePadding->0.,
      ImageSize->{499.5314168902954, 342.9971702850177},
      PlotRange->{{0.46858310970460115`, 500.}, {0., 342.9971702850177}},
      PlotRangePadding->None], {0., 0.}, ImageScaled[{0., 0.}], {500., 342.9971702850177},
     
     ContentSelectable->True],
    AspectRatio->0.6873690787274904,
    Background->None,
    ContentSelectable->True,
    ImageMargins->0.,
    ImagePadding->0.,
    ImageSize->{499., 342.9971702850177},
    PlotRange->{{1.0000000000000009`, 500.}, {0., 342.9971702850177}},
    PlotRangePadding->None], {0., 0.}, ImageScaled[{0., 0.}], {500., 342.9971702850177},
   
   ContentSelectable->True],
  AspectRatio->0.6895424836601307,
  Background->None,
  ContentSelectable->True,
  ImageMargins->{{3., 2.}, {0., 0.}},
  ImagePadding->0.,
  ImageSize->{306., 211.},
  PlotRange->{{3.444788753684618, 468.0763358778626}, {9.68224101898251, 
   331.6261734225429}},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.4657717538394003`*^9, 3.4658598728796*^9, 
  3.468597787300149*^9, 3.468597891855126*^9, 3.470067237035433*^9},
 CellLabel->"Out[267]//TreeForm="]
}, Open  ]],

Cell[TextData[{
 "The parser we wrote by hand is an instance of a ",
 StyleBox["predictive", "Techical Italic"],
 " recursive descent parser",
 " ",
 "because it looks ahead wherever there is a choice so that it does not take \
a wrong path through the grammar. In contrast, a backtracking parser simply \
starts over f",
 StyleBox["rom where it left off if a particular parse path fails. ",
  FontTracking->"Plain"],
 StyleBox["If you are ambitious, you can ",
  FontTracking->"Extended"],
 StyleBox["continue this recipe and write a backtracking parser generator in \
Mathematica. The ",
  FontTracking->"Plain"],
 StyleBox["references",
  FontTracking->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox[" in the following \[OpenCurlyDoubleQuote]See Also\
\[CloseCurlyDoubleQuote] section provide some background.",
  FontTracking->"Plain"]
}], "Text", "ProductionPageBreak",
 CellChangeTimes->{{3.470515410321411*^9, 3.470515446893731*^9}, 
   3.470515478074247*^9, {3.471626948069851*^9, 3.471626965465448*^9}, {
   3.471626997528104*^9, 3.471627023917832*^9}, {3.471696040298257*^9, 
   3.471696048273234*^9}, {3.475590153438449*^9, 3.475590155243936*^9}, 
   3.485522444020155*^9}],

Cell[CellGroupData[{

Cell["See Also", "Heading2",
 CellTags->"SeeAlso5.11"],

Cell[TextData[{
 "See Daniel Lichtblau\[CloseCurlyQuote]s original implementation at ",
 StyleBox[ButtonBox["http://bit.ly/zXhUm",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/zXhUm"], None},
  ButtonNote->"http://bit.ly/zXhUm"], "URL"],
 "."
}], "Text",
 CellChangeTimes->{{3.470515663386705*^9, 3.4705156633956947`*^9}, 
   3.470516897987055*^9}],

Cell[TextData[{
 "Packrat parsing is amenable to Mathematica implementation. See ",
 StyleBox[ButtonBox["http://bit.ly/RsNCe",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/RsNCe"], None},
  ButtonNote->"http://bit.ly/RsNCe"], "URL"],
 "."
}], "Text",
 CellChangeTimes->{{3.470515487818169*^9, 3.470515494122672*^9}, {
  3.470515648473825*^9, 3.470515648482224*^9}}],

Cell[TextData[{
 "A functional approach to parsing is discussed in \
\[OpenCurlyDoubleQuote]Monadic Parser Combinators\[CloseCurlyDoubleQuote] by \
Graham Hutton and Erik Meijer, published in ",
 StyleBox["Journal of Functional Programming,", "Emphasis"],
 " Volume 8, Issue 4, 1996. See ",
 StyleBox[ButtonBox["http://bit.ly/PIVAh",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://bit.ly/PIVAh"], None},
  ButtonNote->"http://bit.ly/PIVAh"], "URL"],
 " (PostScript file). "
}], "Text",
 CellChangeTimes->{{3.470515515867625*^9, 3.4705155374666367`*^9}, {
  3.470515581469734*^9, 3.4705156250344343`*^9}, {3.470516602051098*^9, 
  3.470516606144149*^9}}],

Cell["", "Text"]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowToolbars->"EditBar",
CellGrouping->Manual,
WindowSize->{916, 698},
WindowMargins->{{219, Automatic}, {Automatic, 49}},
PrintingCopies->1,
PrintingStartingPageNumber->181,
PrintingPageRange->{1, Automatic},
PageHeaders->{{None, None, None}, {None, None, None}},
PageFooters->{{
   Cell[
    TextData[{
      CounterBox["Page"], 
      "\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]Chapter ", 
      CounterBox["ChapterLabel"], ":\[ThickSpace]\[ThickSpace]", 
      "String and Text Processing"}], "Footer"], None, None}, {None, None, 
   Cell[
    TextData[{
      CounterBox[
      "Page", CounterFunction :> (
        Part[{"", 
          "5.0\[ThickSpace]\[ThickSpace]Introduction\[ThickSpace]\[ThickSpace]\
\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.0\[ThickSpace]\[ThickSpace]Introduction\[ThickSpace]\[ThickSpace]\
\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.0\[ThickSpace]\[ThickSpace]Introduction\[ThickSpace]\[ThickSpace]\
\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.0\[ThickSpace]\[ThickSpace]Introduction\[ThickSpace]\[ThickSpace]\
\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.0\[ThickSpace]\[ThickSpace]Introduction\[ThickSpace]\[ThickSpace]\
\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.1\[ThickSpace]\[ThickSpace]Comparing Strings\[ThickSpace]\
\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.2\[ThickSpace]\[ThickSpace]Removing and Replacing Characters \
\[LineSeparator]from Strings\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.2\[ThickSpace]\[ThickSpace]Removing and Replacing Characters \
\[LineSeparator]from Strings\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.2\[ThickSpace]\[ThickSpace]Removing and Replacing Characters \
\[LineSeparator]from Strings\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.2\[ThickSpace]\[ThickSpace]Removing and Replacing Characters \
\[LineSeparator]from Strings\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.3\[ThickSpace]\[ThickSpace]Extracting Characters and Substrings\
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.3\[ThickSpace]\[ThickSpace]Extracting Characters and Substrings\
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.3\[ThickSpace]\[ThickSpace]Extracting Characters and Substrings\
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.3\[ThickSpace]\[ThickSpace]Extracting Characters and Substrings\
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.4\[ThickSpace]\[ThickSpace]Duplicating a String \[ThickSpace]\
\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.4\[ThickSpace]\[ThickSpace]Duplicating a String \[ThickSpace]\
\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.5\[ThickSpace]\[ThickSpace]Matching and Searching Text\
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.5\[ThickSpace]\[ThickSpace]Matching and Searching Text\
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.5\[ThickSpace]\[ThickSpace]Matching and Searching Text\
\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.6\[ThickSpace]\[ThickSpace]Tokenizing Text\[ThickSpace]\
\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.7\[ThickSpace]\[ThickSpace]Working with Natural Language \
Dictionaries\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.7\[ThickSpace]\[ThickSpace]Working with Natural Language \
Dictionaries\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.7\[ThickSpace]\[ThickSpace]Working with Natural Language \
Dictionaries\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.7\[ThickSpace]\[ThickSpace]Working with Natural Language \
Dictionaries\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.7\[ThickSpace]\[ThickSpace]Working with Natural Language \
Dictionaries\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.7\[ThickSpace]\[ThickSpace]Working with Natural Language \
Dictionaries\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.7\[ThickSpace]\[ThickSpace]Working with Natural Language \
Dictionaries\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.8\[ThickSpace]\[ThickSpace]Importing XML \[ThickSpace]\
\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.8\[ThickSpace]\[ThickSpace]Importing XML \[ThickSpace]\
\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.8\[ThickSpace]\[ThickSpace]Importing XML \[ThickSpace]\
\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.8\[ThickSpace]\[ThickSpace]Importing XML \[ThickSpace]\
\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.9\[ThickSpace]\[ThickSpace]Transforming XML Using Patterns and \
Rules\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.9\[ThickSpace]\[ThickSpace]Transforming XML Using Patterns and \
Rules\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.9\[ThickSpace]\[ThickSpace]Transforming XML Using Patterns and \
Rules\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.9\[ThickSpace]\[ThickSpace]Transforming XML Using Patterns and \
Rules\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.9\[ThickSpace]\[ThickSpace]Transforming XML Using Patterns and \
Rules\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]", 
          "5.10\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive \
Functions (\[AGrave] la XSLT)\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.10\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive \
Functions (\[AGrave] la XSLT)\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.10\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive \
Functions (\[AGrave] la XSLT)\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.10\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive \
Functions (\[AGrave] la XSLT)\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.10\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive \
Functions (\[AGrave] la XSLT)\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.10\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive \
Functions (\[AGrave] la XSLT)\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.10\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive \
Functions (\[AGrave] la XSLT)\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.10\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive \
Functions (\[AGrave] la XSLT)\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.10\[ThickSpace]\[ThickSpace]Transforming XML Using Recursive \
Functions (\[AGrave] la XSLT)\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.11\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars \
\[LineSeparator]in Mathematica\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.11\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars \
\[LineSeparator]in Mathematica\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.11\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars \
\[LineSeparator]in Mathematica\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.11\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars \
\[LineSeparator]in Mathematica\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.11\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars \
\[LineSeparator]in Mathematica\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.11\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars \
\[LineSeparator]in Mathematica\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.11\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars \
\[LineSeparator]in Mathematica\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.11\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars \
\[LineSeparator]in Mathematica\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]", 
          "5.11\[ThickSpace]\[ThickSpace]Writing Parsers and Grammars \
\[LineSeparator]in Mathematica\[ThickSpace]\[ThickSpace]\[ThickSpace]|\
\[ThickSpace]\[ThickSpace]\[ThickSpace]"}, # - CurrentValue[
          InputNotebook[], PrintingStartingPageNumber] + 1]& )], 
      CounterBox["Page"]}], "Footer"]}},
PageHeaderLines->{False, False},
PageFooterLines->{True, True},
PrintingOptions->{"CellBackgroundHalftoneAngle"->Automatic,
"CellBackgroundHalftoneDensity"->Automatic,
"FacingPages"->True,
"FirstPageFace"->"Right",
"FirstPageFooter"->True,
"FirstPageHeader"->False,
"GraphicsPrintingFormat"->"Automatic",
"IncludePostScriptResourceDirectives"->True,
"IncludeSpecialFonts"->True,
"Magnification"->1.,
"OpacityRenderingMethod"->Automatic,
"PageFooterMargins"->{24, 24},
"PageHeaderMargins"->{36, 36},
"PageSize"->{504, 661.5},
"PaperOrientation"->"Portrait",
"PaperSize"->{Automatic, Automatic},
"PostScriptOutputFile"->Automatic,
"PrintCellBrackets"->False,
"PrintMultipleHorizontalPages"->False,
"PrintRegistrationMarks"->True,
"PrintSelectionHighlighting"->False,
"PrintingMargins"->{{72, 72}, {72, 54}},
"RasterizationResolution"->"Automatic",
"RestPagesFooter"->True,
"RestPagesHeader"->True,
"UnixShellPrintingCommand"->Automatic,
"UsePostScriptOutputFile"->False,
"UseUnixShellPrintingCommand"->False,
"VertexColorRenderingMethod"->Automatic},
ShowSelection->True,
CellLabelAutoDelete->False,
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.25, 1.25 Inherited],
FrontEndVersion->"7.0 for Mac OS X x86 (32-bit) (February 18, 2009)",
StyleDefinitions->"ora.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "chStrings"->{
  Cell[545, 20, 146, 6, 63, "ChapterLabel",
   CounterAssignments->{{"ChapterLabel", 5}},
   CellTags->"chStrings"]},
 "IntroductionCh5"->{
  Cell[1551, 58, 172, 9, 63, "Heading1",
   CellTags->"IntroductionCh5"]},
 "tStringPatterns"->{
  Cell[20244, 629, 152, 2, 20, "TableTitle",
   CellTags->"tStringPatterns"]},
 "tRegExPatterns"->{
  Cell[23842, 724, 177, 3, 20, "TableTitle",
   CellTags->"tRegExPatterns"]},
 "ComapringStrings"->{
  Cell[28503, 842, 201, 9, 31, "Heading1",
   CellTags->"ComapringStrings"]},
 "Removing and Replacing Characters from Strings"->{
  Cell[32978, 1006, 330, 11, 63, "Heading1",
   CellTags->"Removing and Replacing Characters from Strings"]},
 "Extracting Characters and Substrings"->{
  Cell[59941, 1825, 283, 10, 63, "Heading1",
   CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
   CellTags->"Extracting Characters and Substrings"]},
 "Solution5.3"->{
  Cell[60614, 1851, 133, 2, 75, "Heading2",
   CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
   CellTags->"Solution5.3"]},
 "Duplicating a String"->{
  Cell[81440, 2501, 220, 10, 41, "Heading1",
   CellTags->"Duplicating a String"]},
 "Matching and Searching Text"->{
  Cell[90561, 2799, 199, 9, 46, "Heading1",
   CellTags->"Matching and Searching Text"]},
 "Tokenizing"->{
  Cell[108612, 3378, 193, 9, 31, "Heading1",
   CellTags->"Tokenizing"]},
 "Natural Language Dictionaries"->{
  Cell[121804, 3682, 250, 10, 43, "Heading1",
   CellTags->"Natural Language Dictionaries"]},
 "XML"->{
  Cell[169419, 4869, 162, 9, 46, "Heading1",
   CellTags->"XML"],
  Cell[170366, 4909, 564, 26, 348, "Code",
   CellTags->"XML"]},
 "Transforming XML Using Rules"->{
  Cell[231479, 6435, 285, 10, 37, "Heading1",
   CellTags->"Transforming XML Using Rules"]},
 "Transforming XML Using Recursion"->{
  Cell[262133, 7272, 360, 12, 70, "Heading1",
   CellTags->"Transforming XML Using Recursion"]},
 "SeeAlso5.10"->{
  Cell[326065, 8923, 54, 1, 75, "Heading2",
   CellTags->"SeeAlso5.10"]},
 "Writing Parsers"->{
  Cell[327480, 8967, 300, 12, 63, "Heading1",
   CellTags->"Writing Parsers"]},
 "SeeAlso5.11"->{
  Cell[406038, 10884, 54, 1, 75, "Heading2",
   CellTags->"SeeAlso5.11"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"chStrings", 418902, 11148},
 {"IntroductionCh5", 419042, 11152},
 {"tStringPatterns", 419139, 11155},
 {"tRegExPatterns", 419239, 11158},
 {"ComapringStrings", 419340, 11161},
 {"Removing and Replacing Characters from Strings", 419471, 11164},
 {"Extracting Characters and Substrings", 419624, 11167},
 {"Solution5.3", 419810, 11171},
 {"Duplicating a String", 419979, 11175},
 {"Matching and Searching Text", 420097, 11178},
 {"Tokenizing", 420204, 11181},
 {"Natural Language Dictionaries", 420314, 11184},
 {"XML", 420418, 11187},
 {"Transforming XML Using Rules", 420584, 11192},
 {"Transforming XML Using Recursion", 420716, 11195},
 {"SeeAlso5.10", 420831, 11198},
 {"Writing Parsers", 420927, 11201},
 {"SeeAlso5.11", 421025, 11204}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[545, 20, 146, 6, 63, "ChapterLabel",
 CounterAssignments->{{"ChapterLabel", 5}},
 CellTags->"chStrings"],
Cell[694, 28, 50, 0, 63, "ChapterTitle"],
Cell[747, 30, 561, 17, 210, "Epigraph"],
Cell[1311, 49, 215, 5, 60, "EpigraphAuthor"],
Cell[CellGroupData[{
Cell[1551, 58, 172, 9, 63, "Heading1",
 CellTags->"IntroductionCh5"],
Cell[1726, 69, 595, 9, 82, "Text"],
Cell[2324, 80, 232, 5, 25, "Text"],
Cell[CellGroupData[{
Cell[2581, 89, 54, 0, 75, "Heading2"],
Cell[2638, 91, 313, 7, 44, "Text"],
Cell[2954, 100, 404, 11, 46, "Text"],
Cell[CellGroupData[{
Cell[3383, 115, 101, 2, 49, "Input"],
Cell[3487, 119, 203, 3, 54, "Output"]
}, Open  ]],
Cell[3705, 125, 180, 5, 27, "Text"],
Cell[CellGroupData[{
Cell[3910, 134, 182, 5, 51, "Input"],
Cell[4095, 141, 202, 3, 54, "Output"]
}, Open  ]],
Cell[4312, 147, 515, 12, 69, "Text"],
Cell[CellGroupData[{
Cell[4852, 163, 67, 1, 20, "Input"],
Cell[4922, 166, 200, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5159, 174, 73, 1, 20, "Input"],
Cell[5235, 177, 193, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5465, 185, 162, 5, 20, "Input"],
Cell[5630, 192, 2522, 52, 251, "Output"]
}, Open  ]],
Cell[8167, 247, 159, 2, 23, "Text"],
Cell[CellGroupData[{
Cell[8351, 253, 181, 5, 20, "Input"],
Cell[8535, 260, 221, 3, 20, "Output"]
}, Open  ]],
Cell[8771, 266, 174, 4, 23, "Text"],
Cell[CellGroupData[{
Cell[8970, 274, 225, 6, 20, "Input"],
Cell[9198, 282, 233, 5, 20, "Output"]
}, Open  ]],
Cell[9446, 290, 163, 4, 23, "Text"],
Cell[CellGroupData[{
Cell[9634, 298, 164, 4, 20, "Input"],
Cell[9801, 304, 189, 3, 20, "Output"]
}, Open  ]],
Cell[10005, 310, 72, 0, 23, "Text"],
Cell[CellGroupData[{
Cell[10102, 314, 188, 6, 20, "Input"],
Cell[10293, 322, 201, 3, 20, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10543, 331, 50, 0, 38, "Heading2"],
Cell[10596, 333, 2100, 42, 251, "Text"],
Cell[CellGroupData[{
Cell[12721, 379, 85, 1, 31, "Heading3"],
Cell[12809, 382, 1048, 30, 72, "Text"],
Cell[13860, 414, 101, 4, 23, "Text"],
Cell[13964, 420, 111, 3, 20, "Input"],
Cell[CellGroupData[{
Cell[14100, 427, 176, 4, 20, "Input"],
Cell[14279, 433, 184, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14500, 441, 177, 4, 20, "Input"],
Cell[14680, 447, 187, 3, 20, "Output"]
}, Open  ]],
Cell[14882, 453, 133, 4, 23, "Text"],
Cell[15018, 459, 112, 3, 20, "Input"],
Cell[CellGroupData[{
Cell[15155, 466, 178, 4, 20, "Input"],
Cell[15336, 472, 181, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15554, 480, 176, 4, 20, "Input"],
Cell[15733, 486, 190, 3, 20, "Output"]
}, Open  ]],
Cell[15938, 492, 111, 4, 23, "Text"],
Cell[16052, 498, 113, 3, 20, "Input"],
Cell[CellGroupData[{
Cell[16190, 505, 178, 4, 20, "Input"],
Cell[16371, 511, 184, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16592, 519, 177, 4, 20, "Input"],
Cell[16772, 525, 183, 3, 20, "Output"]
}, Open  ]],
Cell[16970, 531, 259, 4, 56, "Text"],
Cell[CellGroupData[{
Cell[17254, 539, 184, 4, 20, "Input"],
Cell[17441, 545, 192, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17670, 553, 258, 5, 20, "Input"],
Cell[17931, 560, 189, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18157, 568, 277, 7, 20, "Input"],
Cell[18437, 577, 189, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18663, 585, 275, 7, 20, "Input"],
Cell[18941, 594, 190, 3, 20, "Output"]
}, Open  ]],
Cell[19146, 600, 1095, 27, 72, "Text"],
Cell[20244, 629, 152, 2, 20, "TableTitle",
 CellTags->"tStringPatterns"],
Cell[20399, 633, 2049, 47, 447, "Table",
 Evaluatable->False],
Cell[22451, 682, 1364, 38, 96, "Text"]
}, Open  ]]
}, Open  ]],
Cell[23842, 724, 177, 3, 20, "TableTitle",
 CellTags->"tRegExPatterns"],
Cell[24022, 729, 2305, 51, 445, "Table",
 Evaluatable->False],
Cell[CellGroupData[{
Cell[26352, 784, 61, 1, 26, "Heading2"],
Cell[26416, 787, 852, 16, 72, "Text"]
}, Open  ]]
}, Open  ]],
Cell[27295, 807, 1205, 33, 88, "Text"],
Cell[28503, 842, 201, 9, 31, "Heading1",
 CellTags->"ComapringStrings"],
Cell[CellGroupData[{
Cell[28729, 855, 40, 0, 25, "Heading2WithHeadAbove"],
Cell[28772, 857, 242, 10, 40, "Text"]
}, Open  ]],
Cell[29029, 870, 28, 0, 38, "Heading2"],
Cell[29060, 872, 261, 7, 40, "Text"],
Cell[CellGroupData[{
Cell[29346, 883, 126, 3, 20, "Input"],
Cell[29475, 888, 185, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29697, 896, 125, 3, 49, "Input"],
Cell[29825, 901, 200, 4, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30062, 910, 30, 0, 75, "Heading2"],
Cell[30095, 912, 453, 10, 65, "Text"],
Cell[30551, 924, 1415, 43, 192, "Input"],
Cell[CellGroupData[{
Cell[31991, 971, 103, 2, 49, "Input"],
Cell[32097, 975, 185, 3, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32319, 983, 103, 2, 49, "Input"],
Cell[32425, 987, 194, 3, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32656, 995, 104, 2, 49, "Input"],
Cell[32763, 999, 188, 3, 54, "Output"]
}, Open  ]]
}, Open  ]],
Cell[32978, 1006, 330, 11, 63, "Heading1",
 CellTags->"Removing and Replacing Characters from Strings"],
Cell[CellGroupData[{
Cell[33333, 1021, 40, 0, 46, "Heading2WithHeadAbove"],
Cell[33376, 1023, 358, 8, 44, "Text"]
}, Open  ]],
Cell[33749, 1034, 61, 1, 33, "Heading2"],
Cell[CellGroupData[{
Cell[33835, 1039, 89, 1, 46, "Heading3WithHeadAbove"],
Cell[33927, 1042, 780, 22, 46, "Text"],
Cell[34710, 1066, 65, 1, 21, "Text"],
Cell[34778, 1069, 216, 7, 42, "Input"],
Cell[CellGroupData[{
Cell[35019, 1080, 180, 4, 51, "Input"],
Cell[35202, 1086, 231, 3, 56, "Output"]
}, Open  ]],
Cell[35448, 1092, 86, 1, 21, "Text"],
Cell[CellGroupData[{
Cell[35559, 1097, 304, 8, 42, "Input"],
Cell[35866, 1107, 308, 5, 54, "Output"]
}, Open  ]],
Cell[36189, 1115, 204, 5, 18, "Text"],
Cell[CellGroupData[{
Cell[36418, 1124, 496, 14, 66, "Input"],
Cell[36917, 1140, 311, 5, 54, "Output"]
}, Open  ]],
Cell[37243, 1148, 76, 1, 18, "Text"],
Cell[CellGroupData[{
Cell[37344, 1153, 253, 7, 42, "Input"],
Cell[37600, 1162, 312, 5, 33, "Output"]
}, Open  ]],
Cell[37927, 1170, 75, 1, 20, "Text"],
Cell[CellGroupData[{
Cell[38027, 1175, 311, 8, 17, "Input"],
Cell[38341, 1185, 308, 5, 33, "Output"]
}, Open  ]],
Cell[38664, 1193, 190, 4, 17, "Text"],
Cell[CellGroupData[{
Cell[38879, 1201, 245, 7, 17, "Input"],
Cell[39127, 1210, 250, 4, 20, "Output"]
}, Open  ]]
}, Open  ]],
Cell[39404, 1218, 124, 1, 20, "Heading3"],
Cell[39531, 1221, 452, 9, 72, "Text"],
Cell[39986, 1232, 25, 0, 23, "Text"],
Cell[40014, 1234, 139, 4, 20, "Input"],
Cell[40156, 1240, 58, 0, 23, "Text"],
Cell[CellGroupData[{
Cell[40239, 1244, 122, 3, 20, "Input"],
Cell[40364, 1249, 204, 3, 20, "Output"]
}, Open  ]],
Cell[40583, 1255, 141, 1, 25, "Text"],
Cell[CellGroupData[{
Cell[40749, 1260, 141, 4, 51, "Input"],
Cell[40893, 1266, 203, 3, 56, "Output"]
}, Open  ]],
Cell[41111, 1272, 99, 1, 25, "Text"],
Cell[CellGroupData[{
Cell[41235, 1277, 146, 4, 51, "Input"],
Cell[41384, 1283, 209, 3, 56, "Output"]
}, Open  ]],
Cell[41608, 1289, 193, 5, 27, "Text"],
Cell[CellGroupData[{
Cell[41826, 1298, 171, 5, 51, "Input"],
Cell[42000, 1305, 200, 3, 56, "Output"],
Cell[42203, 1310, 424, 11, 65, "Text"],
Cell[CellGroupData[{
Cell[42652, 1325, 197, 6, 51, "Input"],
Cell[42852, 1333, 196, 3, 56, "Output"]
}, Open  ]]
}, Open  ]],
Cell[43075, 1340, 60, 0, 25, "Text"],
Cell[43138, 1342, 131, 4, 51, "Input"],
Cell[CellGroupData[{
Cell[43294, 1350, 235, 7, 51, "Input"],
Cell[43532, 1359, 265, 6, 56, "Output"]
}, Open  ]],
Cell[43812, 1368, 437, 10, 46, "Text"],
Cell[CellGroupData[{
Cell[44274, 1382, 203, 5, 51, "Input"],
Cell[44480, 1389, 210, 3, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44727, 1397, 316, 9, 51, "Input"],
Cell[45046, 1408, 208, 3, 56, "Output"]
}, Open  ]],
Cell[45269, 1414, 68, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[45362, 1418, 375, 11, 51, "Input"],
Cell[45740, 1431, 203, 3, 56, "Output"]
}, Open  ]],
Cell[45958, 1437, 30, 0, 75, "Heading2"],
Cell[45991, 1439, 1009, 26, 66, "Text"],
Cell[47003, 1467, 104, 1, 75, "Heading3"],
Cell[47110, 1470, 108, 1, 24, "Text"],
Cell[CellGroupData[{
Cell[47243, 1475, 388, 10, 98, "Input"],
Cell[47634, 1487, 207, 3, 54, "Output"]
}, Open  ]],
Cell[47856, 1493, 109, 1, 25, "Text"],
Cell[CellGroupData[{
Cell[47990, 1498, 371, 10, 99, "Input"],
Cell[48364, 1510, 213, 3, 20, "Output"]
}, Open  ]],
Cell[48592, 1516, 107, 1, 31, "Heading3"],
Cell[48702, 1519, 1315, 21, 121, "Text"],
Cell[CellGroupData[{
Cell[50042, 1544, 1653, 34, 82, "Input"],
Cell[51698, 1580, 690, 11, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52425, 1596, 105, 1, 31, "Heading3"],
Cell[52533, 1599, 158, 5, 40, "Text"],
Cell[CellGroupData[{
Cell[52716, 1608, 89, 2, 20, "Input"],
Cell[52808, 1612, 263, 4, 20, "Output"]
}, Open  ]],
Cell[53086, 1619, 493, 12, 35, "Input"],
Cell[53582, 1633, 851, 12, 370, "Output"],
Cell[CellGroupData[{
Cell[54458, 1649, 511, 15, 33, "Input"],
Cell[54972, 1666, 281, 4, 20, "Output"]
}, Open  ]]
}, Open  ]],
Cell[55280, 1674, 124, 1, 31, "Heading3"],
Cell[55407, 1677, 447, 14, 40, "Text"],
Cell[55857, 1693, 181, 6, 20, "Input"],
Cell[CellGroupData[{
Cell[56063, 1703, 896, 25, 67, "Input"],
Cell[56962, 1730, 261, 4, 20, "Output"]
}, Open  ]],
Cell[57238, 1737, 52, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[57315, 1741, 1325, 37, 469, "Input"],
Cell[58643, 1780, 268, 4, 102, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58948, 1789, 28, 0, 75, "Heading2"],
Cell[58979, 1791, 504, 16, 48, "Text"],
Cell[59486, 1809, 418, 11, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59941, 1825, 283, 10, 63, "Heading1",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
 CellTags->"Extracting Characters and Substrings"],
Cell[CellGroupData[{
Cell[60249, 1839, 106, 1, 75, "Heading2WithHeadAbove",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],
Cell[60358, 1842, 219, 4, 25, "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[60614, 1851, 133, 2, 75, "Heading2",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.},
 CellTags->"Solution5.3"],
Cell[CellGroupData[{
Cell[60772, 1857, 115, 1, 75, "Heading3WithHeadAbove"],
Cell[60890, 1860, 781, 17, 65, "Text"],
Cell[61674, 1879, 156, 4, 27, "Text"],
Cell[CellGroupData[{
Cell[61855, 1887, 309, 7, 75, "Input"],
Cell[62167, 1896, 271, 6, 54, "Output"]
}, Open  ]],
Cell[62453, 1905, 62, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[62540, 1909, 403, 10, 75, "Input"],
Cell[62946, 1921, 273, 6, 54, "Output"]
}, Open  ]],
Cell[63234, 1930, 506, 10, 63, "Text"],
Cell[CellGroupData[{
Cell[63765, 1944, 830, 20, 145, "Input"],
Cell[64598, 1966, 294, 6, 54, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[64941, 1978, 102, 1, 75, "Heading3"],
Cell[65046, 1981, 734, 18, 67, "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],
Cell[65783, 2001, 91, 1, 25, "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],
Cell[65877, 2004, 139, 4, 51, "Input"],
Cell[66019, 2010, 81, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[66125, 2014, 122, 3, 51, "Input"],
Cell[66250, 2019, 191, 3, 54, "Output"]
}, Open  ]],
Cell[66456, 2025, 141, 1, 25, "Text"],
Cell[CellGroupData[{
Cell[66622, 2030, 141, 4, 51, "Input"],
Cell[66766, 2036, 197, 3, 54, "Output"]
}, Open  ]],
Cell[66978, 2042, 101, 1, 25, "Text"],
Cell[CellGroupData[{
Cell[67104, 2047, 146, 4, 51, "Input"],
Cell[67253, 2053, 191, 3, 54, "Output"]
}, Open  ]],
Cell[67459, 2059, 189, 5, 27, "Text"],
Cell[CellGroupData[{
Cell[67673, 2068, 171, 5, 51, "Input"],
Cell[67847, 2075, 193, 3, 54, "Output"],
Cell[68043, 2080, 610, 17, 46, "Text"],
Cell[CellGroupData[{
Cell[68678, 2101, 197, 6, 51, "Input"],
Cell[68878, 2109, 202, 3, 56, "Output"]
}, Open  ]]
}, Open  ]],
Cell[69107, 2116, 74, 0, 25, "Text"],
Cell[69184, 2118, 131, 4, 51, "Input"],
Cell[CellGroupData[{
Cell[69340, 2126, 235, 7, 51, "Input"],
Cell[69578, 2135, 246, 5, 54, "Output"]
}, Open  ]],
Cell[69839, 2143, 788, 19, 48, "Text"],
Cell[CellGroupData[{
Cell[70652, 2166, 297, 9, 51, "Input"],
Cell[70952, 2177, 266, 6, 56, "Output"]
}, Open  ]],
Cell[71233, 2186, 275, 7, 46, "Text"],
Cell[CellGroupData[{
Cell[71533, 2197, 348, 11, 51, "Input"],
Cell[71884, 2210, 194, 3, 56, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[72139, 2220, 109, 1, 75, "Heading2",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],
Cell[72251, 2223, 1465, 38, 106, "Text"],
Cell[CellGroupData[{
Cell[73741, 2265, 458, 10, 33, "Input"],
Cell[74202, 2277, 289, 6, 20, "Output"]
}, Open  ]],
Cell[74506, 2286, 311, 10, 23, "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],
Cell[CellGroupData[{
Cell[74842, 2300, 400, 10, 33, "Input"],
Cell[75245, 2312, 267, 6, 20, "Output"]
}, Open  ]],
Cell[75527, 2321, 581, 13, 72, "Text"],
Cell[CellGroupData[{
Cell[76133, 2338, 373, 9, 35, "Input"],
Cell[76509, 2349, 786, 22, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77332, 2376, 388, 9, 35, "Input"],
Cell[77723, 2387, 840, 24, 93, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78600, 2416, 387, 9, 35, "Input"],
Cell[78990, 2427, 1436, 39, 327, "Output"]
}, Open  ]]
}, Open  ]],
Cell[80453, 2470, 127, 2, 26, "Heading2",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}],
Cell[80583, 2474, 842, 24, 56, "Text",
 CellGroupingRules->{$CellContext`GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[81440, 2501, 220, 10, 41, "Heading1",
 CellTags->"Duplicating a String"],
Cell[CellGroupData[{
Cell[81685, 2515, 40, 0, 25, "Heading2WithHeadAbove"],
Cell[81728, 2517, 105, 3, 23, "Text"]
}, Open  ]],
Cell[81848, 2523, 62, 1, 33, "Heading2"],
Cell[81913, 2526, 161, 7, 23, "Text"],
Cell[82077, 2535, 284, 9, 20, "Input"],
Cell[CellGroupData[{
Cell[82386, 2548, 151, 4, 20, "Input"],
Cell[82540, 2554, 195, 3, 33, "Output"]
}, Open  ]],
Cell[82750, 2560, 131, 3, 16, "Input"],
Cell[82884, 2565, 200, 3, 20, "Output"],
Cell[83087, 2570, 53, 0, 25, "Heading2"],
Cell[83143, 2572, 811, 15, 88, "Text"],
Cell[83957, 2589, 455, 14, 35, "Input"],
Cell[84415, 2605, 336, 10, 20, "Input"],
Cell[84754, 2617, 204, 3, 20, "Output"],
Cell[84961, 2622, 337, 10, 20, "Input"],
Cell[85301, 2634, 208, 3, 20, "Output"],
Cell[85512, 2639, 410, 9, 56, "Text"],
Cell[85925, 2650, 163, 5, 20, "Input"],
Cell[86091, 2657, 213, 4, 20, "Output"],
Cell[86307, 2663, 67, 0, 23, "Text"],
Cell[86377, 2665, 265, 9, 20, "Input"],
Cell[86645, 2676, 216, 4, 20, "Output"],
Cell[86864, 2682, 2186, 64, 121, "Text"],
Cell[89053, 2748, 217, 5, 40, "Text"],
Cell[89273, 2755, 911, 27, 67, "Input"],
Cell[90187, 2784, 61, 1, 27, "Heading2"],
Cell[90251, 2787, 307, 10, 23, "Text"],
Cell[90561, 2799, 199, 9, 46, "Heading1",
 CellTags->"Matching and Searching Text"],
Cell[CellGroupData[{
Cell[90785, 2812, 40, 0, 25, "Heading2WithHeadAbove"],
Cell[90828, 2814, 99, 2, 23, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90964, 2821, 28, 0, 38, "Heading2"],
Cell[90995, 2823, 139, 4, 23, "Text"],
Cell[CellGroupData[{
Cell[91159, 2831, 139, 3, 20, "Input"],
Cell[91301, 2836, 182, 3, 20, "Output"]
}, Open  ]],
Cell[91498, 2842, 98, 2, 23, "Text"],
Cell[CellGroupData[{
Cell[91621, 2848, 322, 9, 20, "Input"],
Cell[91946, 2859, 241, 5, 20, "Output"]
}, Open  ]],
Cell[92202, 2867, 265, 7, 23, "Text"],
Cell[CellGroupData[{
Cell[92492, 2878, 223, 6, 20, "Input"],
Cell[92718, 2886, 236, 5, 20, "Output"]
}, Open  ]],
Cell[92969, 2894, 543, 16, 40, "Text"],
Cell[CellGroupData[{
Cell[93537, 2914, 145, 3, 20, "Input"],
Cell[93685, 2919, 746, 23, 32, "Output"]
}, Open  ]],
Cell[94446, 2945, 308, 7, 40, "Text"],
Cell[CellGroupData[{
Cell[94779, 2956, 201, 4, 20, "Input"],
Cell[94983, 2962, 324, 9, 20, "Output"]
}, Open  ]]
}, Open  ]],
Cell[95334, 2975, 53, 0, 25, "Heading2"],
Cell[95390, 2977, 392, 13, 40, "Text"],
Cell[95785, 2992, 2384, 57, 195, "Input"],
Cell[98172, 3051, 1445, 37, 121, "Text"],
Cell[99620, 3090, 1274, 36, 83, "Input"],
Cell[CellGroupData[{
Cell[100919, 3130, 377, 11, 33, "Input"],
Cell[101299, 3143, 844, 23, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102180, 3171, 315, 9, 20, "Input"],
Cell[102498, 3182, 483, 13, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103018, 3200, 337, 9, 20, "Input"],
Cell[103358, 3211, 442, 12, 20, "Output"]
}, Open  ]],
Cell[103815, 3226, 948, 23, 88, "Text"],
Cell[104766, 3251, 221, 5, 20, "Input"],
Cell[104990, 3258, 189, 3, 20, "Output"],
Cell[CellGroupData[{
Cell[105204, 3265, 219, 5, 20, "Input"],
Cell[105426, 3272, 184, 3, 20, "Output"]
}, Open  ]],
Cell[105625, 3278, 164, 6, 23, "Text"],
Cell[CellGroupData[{
Cell[105814, 3288, 343, 10, 35, "Input"],
Cell[106160, 3300, 405, 8, 20, "Output"]
}, Open  ]],
Cell[106580, 3311, 761, 19, 72, "Text"],
Cell[CellGroupData[{
Cell[107366, 3334, 456, 12, 35, "Input"],
Cell[107825, 3348, 261, 5, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108123, 3358, 28, 0, 38, "Heading2"],
Cell[108154, 3360, 443, 15, 23, "Text"]
}, Open  ]],
Cell[108612, 3378, 193, 9, 31, "Heading1",
 CellTags->"Tokenizing"],
Cell[CellGroupData[{
Cell[108830, 3391, 40, 0, 25, "Heading2WithHeadAbove"],
Cell[108873, 3393, 95, 2, 23, "Text"]
}, Open  ]],
Cell[108983, 3398, 28, 0, 38, "Heading2"],
Cell[109014, 3400, 172, 4, 40, "Text"],
Cell[CellGroupData[{
Cell[109211, 3408, 155, 4, 20, "Input"],
Cell[109369, 3414, 420, 8, 20, "Output"]
}, Open  ]],
Cell[109804, 3425, 172, 3, 40, "Text"],
Cell[CellGroupData[{
Cell[110001, 3432, 233, 5, 33, "Input"],
Cell[110237, 3439, 326, 6, 20, "Output"]
}, Open  ]],
Cell[110578, 3448, 225, 4, 40, "Text"],
Cell[CellGroupData[{
Cell[110828, 3456, 297, 8, 33, "Input"],
Cell[111128, 3466, 362, 7, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111527, 3478, 30, 0, 38, "Heading2"],
Cell[111560, 3480, 778, 18, 88, "Text"],
Cell[112341, 3500, 1814, 49, 115, "Input"]
}, Open  ]],
Cell[114170, 3552, 7631, 128, 370, "Output"],
Cell[121804, 3682, 250, 10, 43, "Heading1",
 CellTags->"Natural Language Dictionaries"],
Cell[CellGroupData[{
Cell[122079, 3696, 27, 0, 25, "Heading2"],
Cell[122109, 3698, 147, 4, 23, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122293, 3707, 62, 1, 33, "Heading2"],
Cell[122358, 3710, 291, 5, 56, "Text"],
Cell[122652, 3717, 234, 7, 23, "Text"],
Cell[CellGroupData[{
Cell[122911, 3728, 166, 4, 20, "Input"],
Cell[123080, 3734, 1495, 24, 131, "Output"]
}, Open  ]],
Cell[124590, 3761, 179, 5, 23, "Text"],
Cell[CellGroupData[{
Cell[124794, 3770, 139, 3, 20, "Input"],
Cell[124936, 3775, 4864, 69, 366, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[129849, 3850, 53, 0, 25, "Heading2"],
Cell[129905, 3852, 157, 3, 23, "Text"],
Cell[130065, 3857, 107, 1, 31, "Heading3"],
Cell[130175, 3860, 470, 12, 40, "Text"],
Cell[CellGroupData[{
Cell[130670, 3876, 247, 6, 20, "Input"],
Cell[130920, 3884, 289, 6, 20, "Output"]
}, Open  ]],
Cell[131224, 3893, 170, 5, 23, "Text"],
Cell[CellGroupData[{
Cell[131419, 3902, 28, 0, 31, "Heading3"],
Cell[131450, 3904, 715, 11, 105, "Text"],
Cell[132168, 3917, 1405, 41, 82, "Input"],
Cell[133576, 3960, 673, 15, 51, "Input"],
Cell[134252, 3977, 7667, 113, 481, "Output"],
Cell[141922, 4092, 612, 14, 88, "Text"],
Cell[142537, 4108, 2111, 55, 116, "Input"],
Cell[CellGroupData[{
Cell[144673, 4167, 144, 3, 20, "Input"],
Cell[144820, 4172, 189, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145046, 4180, 144, 3, 20, "Input"],
Cell[145193, 4185, 187, 3, 20, "Output"]
}, Open  ]],
Cell[145395, 4191, 437, 12, 35, "Input"],
Cell[145835, 4205, 64, 0, 23, "Text"],
Cell[CellGroupData[{
Cell[145924, 4209, 99, 2, 20, "Input"],
Cell[146026, 4213, 1088, 18, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[147151, 4236, 96, 2, 20, "Input"],
Cell[147250, 4240, 289, 6, 20, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[147588, 4252, 31, 0, 31, "Heading3"],
Cell[147622, 4254, 176, 4, 23, "Text"],
Cell[CellGroupData[{
Cell[147823, 4262, 188, 5, 20, "Input"],
Cell[148014, 4269, 1751, 28, 97, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[149814, 4303, 125, 2, 31, "Heading3"],
Cell[149942, 4307, 734, 13, 88, "Text"],
Cell[150679, 4322, 794, 23, 63, "Input"],
Cell[CellGroupData[{
Cell[151498, 4349, 102, 2, 20, "Input"],
Cell[151603, 4353, 638, 12, 35, "Output"]
}, Open  ]],
Cell[152256, 4368, 711, 14, 72, "Text"],
Cell[152970, 4384, 1796, 51, 126, "Input"],
Cell[CellGroupData[{
Cell[154791, 4439, 102, 2, 20, "Input"],
Cell[154896, 4443, 508, 10, 32, "Output"]
}, Open  ]],
Cell[155419, 4456, 371, 10, 40, "Text"],
Cell[CellGroupData[{
Cell[155815, 4470, 125, 3, 20, "Input"],
Cell[155943, 4475, 565, 12, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[156545, 4492, 103, 2, 20, "Input"],
Cell[156651, 4496, 513, 11, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[157201, 4512, 103, 2, 20, "Input"],
Cell[157307, 4516, 520, 10, 35, "Output"]
}, Open  ]],
Cell[157842, 4529, 151, 3, 23, "Text"],
Cell[CellGroupData[{
Cell[158018, 4536, 139, 4, 20, "Input"],
Cell[158160, 4542, 585, 12, 32, "Output"]
}, Open  ]],
Cell[158760, 4557, 642, 16, 72, "Text"],
Cell[159405, 4575, 720, 21, 50, "Input"],
Cell[160128, 4598, 1029, 28, 77, "Input"],
Cell[CellGroupData[{
Cell[161182, 4630, 139, 4, 20, "Input"],
Cell[161324, 4636, 585, 12, 32, "Output"]
}, Open  ]],
Cell[161924, 4651, 56, 0, 23, "Text"]
}, Open  ]],
Cell[161995, 4654, 313, 7, 40, "Text"],
Cell[CellGroupData[{
Cell[162333, 4665, 96, 2, 20, "Input"],
Cell[162432, 4669, 6412, 176, 307, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[168893, 4851, 41, 0, 25, "Heading2"],
Cell[168937, 4853, 445, 11, 40, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169419, 4869, 162, 9, 46, "Heading1",
 CellTags->"XML"],
Cell[CellGroupData[{
Cell[169606, 4882, 40, 0, 26, "Heading2WithHeadAbove"],
Cell[169649, 4884, 74, 0, 23, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169760, 4889, 28, 0, 38, "Heading2"],
Cell[169791, 4891, 572, 16, 56, "Text"],
Cell[170366, 4909, 564, 26, 348, "Code",
 CellTags->"XML"],
Cell[CellGroupData[{
Cell[170955, 4939, 434, 11, 35, "Input"],
Cell[171392, 4952, 3954, 96, 230, "Output"]
}, Open  ]]
}, Open  ]],
Cell[175373, 5052, 30, 0, 38, "Heading2"],
Cell[175406, 5054, 3629, 99, 235, "Text"],
Cell[CellGroupData[{
Cell[179060, 5157, 117, 3, 20, "Input"],
Cell[179180, 5162, 275, 4, 33, "Output"]
}, Open  ]],
Cell[179470, 5169, 564, 13, 72, "Text"],
Cell[CellGroupData[{
Cell[180059, 5186, 105, 3, 20, "Input"],
Cell[180167, 5191, 790, 18, 66, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180994, 5214, 105, 3, 20, "Input"],
Cell[181102, 5219, 2916, 74, 133, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184055, 5298, 105, 3, 20, "Input"],
Cell[184163, 5303, 314, 7, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184514, 5315, 388, 12, 20, "Input"],
Cell[184905, 5329, 197, 3, 20, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185139, 5337, 422, 12, 20, "Input"],
Cell[185564, 5351, 952, 25, 51, "Output"]
}, Open  ]],
Cell[186531, 5379, 618, 15, 56, "Text"],
Cell[187152, 5396, 482, 13, 35, "Input"],
Cell[187637, 5411, 1507, 41, 82, "Output"],
Cell[189147, 5454, 708, 21, 56, "Text"],
Cell[CellGroupData[{
Cell[189880, 5479, 222, 6, 20, "Input"],
Cell[190105, 5487, 3453, 94, 132, "Output"]
}, Open  ]],
Cell[193573, 5584, 72, 0, 23, "Text"],
Cell[CellGroupData[{
Cell[193670, 5588, 310, 9, 49, "Input"],
Cell[193983, 5599, 1455, 42, 80, "Output"]
}, Open  ]],
Cell[195453, 5644, 787, 25, 67, "Text"],
Cell[196243, 5671, 1060, 28, 122, "Input"],
Cell[197306, 5701, 32221, 674, 169, "Output"],
Cell[229530, 6377, 1186, 27, 66, "NoteWarning"],
Cell[CellGroupData[{
Cell[230741, 6408, 62, 1, 37, "Heading2"],
Cell[230806, 6411, 624, 18, 25, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[231479, 6435, 285, 10, 37, "Heading1",
 CellTags->"Transforming XML Using Rules"],
Cell[CellGroupData[{
Cell[231789, 6449, 40, 0, 75, "Heading2WithHeadAbove"],
Cell[231832, 6451, 119, 3, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231988, 6459, 62, 1, 35, "Heading2"],
Cell[232053, 6462, 532, 13, 46, "Text"],
Cell[232588, 6477, 496, 14, 44, "Input"],
Cell[CellGroupData[{
Cell[233109, 6495, 1036, 28, 120, "Input"],
Cell[234148, 6525, 953, 21, 96, "Output"]
}, Open  ]],
Cell[235116, 6549, 1471, 34, 99, "Text"],
Cell[236590, 6585, 68, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[236683, 6589, 239, 6, 49, "Input"],
Cell[236925, 6597, 2675, 69, 173, "Output"]
}, Open  ]],
Cell[239615, 6669, 131, 2, 20, "Text"],
Cell[CellGroupData[{
Cell[239771, 6675, 437, 12, 49, "Input"],
Cell[240211, 6689, 930, 23, 78, "Output"]
}, Open  ]],
Cell[241156, 6715, 237, 5, 37, "Text"],
Cell[CellGroupData[{
Cell[241418, 6724, 622, 17, 33, "Input"],
Cell[242043, 6743, 601, 14, 20, "Output"]
}, Open  ]],
Cell[242659, 6760, 80, 1, 21, "Text"],
Cell[CellGroupData[{
Cell[242764, 6765, 976, 26, 65, "Input"],
Cell[243743, 6793, 599, 14, 20, "Output"]
}, Open  ]]
}, Open  ]],
Cell[244369, 6811, 64, 1, 33, "Heading2"],
Cell[244436, 6814, 1140, 26, 153, "Text"],
Cell[CellGroupData[{
Cell[245601, 6844, 1076, 31, 80, "Input"],
Cell[246680, 6877, 908, 21, 63, "Output"]
}, Open  ]],
Cell[247603, 6901, 207, 4, 40, "Text"],
Cell[CellGroupData[{
Cell[247835, 6909, 500, 13, 51, "Input"],
Cell[248338, 6924, 921, 22, 78, "Output"]
}, Open  ]],
Cell[249274, 6949, 142, 2, 31, "Heading3"],
Cell[249419, 6953, 809, 15, 88, "Text"],
Cell[CellGroupData[{
Cell[250253, 6972, 697, 17, 51, "Input"],
Cell[250953, 6991, 2542, 57, 180, "Output"]
}, Open  ]],
Cell[253510, 7051, 276, 6, 40, "Text"],
Cell[253789, 7059, 270, 7, 20, "Input"],
Cell[254062, 7068, 646, 9, 293, "Output"],
Cell[254711, 7079, 446, 9, 72, "Text"],
Cell[255160, 7090, 840, 21, 67, "Input"],
Cell[256003, 7113, 3939, 96, 230, "Output"],
Cell[CellGroupData[{
Cell[259967, 7213, 271, 7, 20, "Input"],
Cell[260241, 7222, 727, 10, 385, "Output"]
}, Open  ]],
Cell[260983, 7235, 62, 1, 17, "Heading2"],
Cell[261048, 7238, 737, 20, 40, "Text"],
Cell[261788, 7260, 308, 7, 23, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[262133, 7272, 360, 12, 70, "Heading1",
 CellTags->"Transforming XML Using Recursion"],
Cell[CellGroupData[{
Cell[262518, 7288, 40, 0, 26, "Heading2WithHeadAbove"],
Cell[262561, 7290, 459, 12, 40, "Text"]
}, Open  ]],
Cell[263035, 7305, 28, 0, 38, "Heading2"],
Cell[263066, 7307, 942, 16, 137, "Text"],
Cell[CellGroupData[{
Cell[264033, 7327, 434, 11, 35, "Input"],
Cell[264470, 7340, 3951, 96, 230, "Output"]
}, Open  ]],
Cell[268436, 7439, 2512, 74, 193, "Input"],
Cell[CellGroupData[{
Cell[270973, 7517, 90, 2, 20, "Input"],
Cell[271066, 7521, 2531, 57, 163, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273634, 7583, 30, 0, 38, "Heading2"],
Cell[273667, 7585, 1153, 24, 170, "Text"],
Cell[274823, 7611, 3506, 101, 242, "Input"],
Cell[CellGroupData[{
Cell[278354, 7716, 127, 3, 20, "Input"],
Cell[278484, 7721, 2592, 60, 181, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[281113, 7786, 308, 9, 20, "Input"],
Cell[281424, 7797, 658, 9, 297, "Output"]
}, Open  ]],
Cell[282097, 7809, 435, 8, 72, "Text"],
Cell[282535, 7819, 1042, 30, 113, "Input"],
Cell[CellGroupData[{
Cell[283602, 7853, 90, 2, 20, "Input"],
Cell[283695, 7857, 247, 4, 20, "Output"]
}, Open  ]],
Cell[283957, 7864, 588, 14, 56, "Text"],
Cell[284548, 7880, 94, 2, 20, "Input"],
Cell[284645, 7884, 1832, 53, 146, "Input"],
Cell[CellGroupData[{
Cell[286502, 7941, 90, 2, 20, "Input"],
Cell[286595, 7945, 4277, 105, 213, "Output"]
}, Open  ]],
Cell[290887, 8053, 293, 6, 40, "Text"],
Cell[CellGroupData[{
Cell[291205, 8063, 150, 3, 20, "Input"],
Cell[291358, 8068, 3943, 96, 230, "Output"]
}, Open  ]],
Cell[295316, 8167, 769, 20, 56, "Text"],
Cell[CellGroupData[{
Cell[296110, 8191, 587, 14, 51, "Input"],
Cell[296700, 8207, 10463, 245, 520, "Output"]
}, Open  ]],
Cell[307178, 8455, 1098, 31, 88, "Text"],
Cell[308279, 8488, 3697, 107, 261, "Input"],
Cell[CellGroupData[{
Cell[312001, 8599, 95, 2, 49, "Input"],
Cell[312099, 8603, 13130, 299, 773, "Output"]
}, Open  ]],
Cell[325244, 8905, 806, 15, 82, "Text"]
}, Open  ]],
Cell[326065, 8923, 54, 1, 75, "Heading2",
 CellTags->"SeeAlso5.10"],
Cell[326122, 8926, 745, 19, 43, "Text"],
Cell[326870, 8947, 573, 15, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[327480, 8967, 300, 12, 63, "Heading1",
 CellTags->"Writing Parsers"],
Cell[CellGroupData[{
Cell[327805, 8983, 40, 0, 75, "Heading2WithHeadAbove"],
Cell[327848, 8985, 58, 0, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[327943, 8990, 28, 0, 75, "Heading2"],
Cell[327974, 8992, 1276, 26, 119, "Text"],
Cell[329253, 9020, 782, 18, 90, "Text"],
Cell[330038, 9040, 318, 9, 73, "Input"],
Cell[330359, 9051, 85, 0, 25, "Text"],
Cell[330447, 9053, 5234, 125, 643, "Input"],
Cell[CellGroupData[{
Cell[335706, 9182, 499, 19, 20, "Input"],
Cell[336208, 9203, 201, 3, 20, "Output"]
}, Open  ]],
Cell[336424, 9209, 662, 10, 100, "Text"],
Cell[337089, 9221, 22873, 612, 2490, "Input"],
Cell[359965, 9835, 113, 2, 25, "Text"],
Cell[CellGroupData[{
Cell[360103, 9841, 299, 7, 51, "Input"],
Cell[360405, 9850, 1172, 26, 125, "Output"]
}, Open  ]]
}, Open  ]],
Cell[361604, 9880, 30, 0, 75, "Heading2"],
Cell[361637, 9882, 2006, 33, 195, "Text"],
Cell[363646, 9917, 7765, 191, 825, "Input"],
Cell[371414, 10110, 317, 5, 44, "Text"],
Cell[CellGroupData[{
Cell[371756, 10119, 132, 4, 49, "Input"],
Cell[371891, 10125, 378, 5, 75, "Output"]
}, Open  ]],
Cell[372284, 10133, 203, 6, 49, "Input"],
Cell[372490, 10141, 2313, 65, 302, "Output"],
Cell[CellGroupData[{
Cell[374828, 10210, 357, 10, 74, "Input"],
Cell[375188, 10222, 29626, 629, 300, "Output"]
}, Open  ]],
Cell[404829, 10854, 1184, 26, 82, "Text"],
Cell[CellGroupData[{
Cell[406038, 10884, 54, 1, 75, "Heading2",
 CellTags->"SeeAlso5.11"],
Cell[406095, 10887, 368, 10, 25, "Text"],
Cell[406466, 10899, 385, 10, 25, "Text"],
Cell[406854, 10911, 664, 15, 44, "Text"],
Cell[407521, 10928, 16, 0, 25, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
